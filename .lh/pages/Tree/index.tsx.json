{
    "sourceFile": "pages/Tree/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1721627528931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721627536524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,8 @@\n-\"use client\";\r\n-\r\n import React, { useEffect, useState } from \"react\";\r\n-import Image from \"next/image\";\r\n-import axios from \"axios\";\r\n import styles from \"./index.module.scss\";\r\n import Navbar from \"../../Components/Navbar\";\r\n-import { CardBody, CardContainer, CardItem } from \"../ui/3d-card\";\r\n+import axios from \"axios\";\r\n \r\n interface User {\r\n   _id: string;\r\n   name: string;\r\n@@ -26,10 +22,10 @@\n   left: TreeNodeProps | null;\r\n   right: TreeNodeProps | null;\r\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-  refreshKey: number;\r\n-  userRole: string | null;\r\n+  refreshKey: number; // Pass refreshKey as prop\r\n+  userRole: string | null; // Pass userRole as prop\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n   const userMap = new Map<string, any>();\r\n@@ -89,8 +85,9 @@\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n+      // Reload the page to reflect updated coins\r\n       window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n@@ -111,8 +108,9 @@\n         <div className={styles.email}>{node.email}</div>\r\n         <div className={styles.id}>Coins: {node.coins}</div>\r\n         <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n \r\n+        {/* Conditionally render Add Child buttons based on role */}\r\n         {userRole === \"admin\" && !left && (\r\n           <div className={styles.addChild}>\r\n             <button\r\n               className={styles.addChildButton}\r\n@@ -146,19 +144,21 @@\n           </div>\r\n         )}\r\n       </div>\r\n \r\n+      {/* Conditionally render Send Coins button based on role */}\r\n       {userRole === \"admin\" && !showCoinsPopup && (\r\n         <div className={styles.sendCoinnew}>\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n+             <button\r\n+          className={`${styles.sendCoinsButton} ${\r\n+            updatingCoins ? styles.updating : \"\"\r\n+          }`}\r\n+          onClick={() => setShowCoinsPopup(true)}\r\n+        >\r\n+          Send Coins\r\n+        </button>\r\n         </div>\r\n+       \r\n       )}\r\n \r\n       <div className={styles.sendCoins}>\r\n         {showCoinsPopup && (\r\n@@ -200,10 +200,10 @@\n   );\r\n   const [error, setError] = useState<Error | null>(null);\r\n   const [success, setSuccess] = useState(false);\r\n   const [showForm, setShowForm] = useState(false);\r\n-  const [refreshKey, setRefreshKey] = useState(0);\r\n-  const [userRole, setUserRole] = useState<string | null>(null);\r\n+  const [refreshKey, setRefreshKey] = useState(0); \r\n+  const [userRole, setUserRole] = useState<string | null>(null); \r\n \r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n@@ -235,9 +235,9 @@\n     };\r\n \r\n     fetchUsers();\r\n     fetchUserRole();\r\n-  }, [refreshKey]);\r\n+  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n \r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n@@ -285,10 +285,11 @@\n \r\n       console.log(\"Child added successfully:\", response.data);\r\n       setSuccess(true);\r\n \r\n+      // Trigger refresh by incrementing refreshKey\r\n       setRefreshKey((prevKey) => prevKey + 1);\r\n-    } catch (error: any) {\r\n+    } catch (error:any) {\r\n       console.error(\"Error adding child:\", error);\r\n       setError(error);\r\n     }\r\n   };\r\n@@ -303,69 +304,153 @@\n     setError(null);\r\n     setSuccess(false);\r\n   };\r\n \r\n+  const renderInitialNodes = (node: User | null) => {\r\n+    if (!node) return null;\r\n+\r\n+    return (\r\n+      <div className={styles.children}>\r\n+        {userMap && userMap.has(node._id) && (\r\n+          <>\r\n+            {userMap.get(node._id)!.left && (\r\n+              <div className={styles.child}>\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.left!.node}\r\n+                  left={userMap.get(node._id)!.left!.left}\r\n+                  right={userMap.get(node._id)!.left!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n+                  userRole={userRole} // Pass userRole\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {userMap.get(node._id)!.right && (\r\n+              <div className={styles.child}>\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.right!.node}\r\n+                  left={userMap.get(node._id)!.right!.left}\r\n+                  right={userMap.get(node._id)!.right!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n+                  userRole={userRole} // Pass userRole\r\n+                />\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n+    if (!node) return null;\r\n+\r\n+    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n+    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n+\r\n+    return (\r\n+      <div>\r\n+        <TreeNode\r\n+          node={node}\r\n+          left={userMap?.get(node._id)?.left || null}\r\n+          right={userMap?.get(node._id)?.right || null}\r\n+          onClick={handleNodeClick}\r\n+          onAddChild={handleAddChild}\r\n+          refreshKey={refreshKey} // Pass refreshKey\r\n+          userRole={userRole} // Pass userRole\r\n+        />\r\n+        <div className={styles.children}>\r\n+          {leftNode && renderCompleteTree(leftNode)}\r\n+          {rightNode && renderCompleteTree(rightNode)}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n   return (\r\n     <div>\r\n       <Navbar />\r\n-      <div className={styles.main}>\r\n-        <h1 className={styles.title}>Referback User Tree</h1>\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n+        </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                    refreshKey={refreshKey} // Pass refreshKey\r\n+                    userRole={userRole} // Pass userRole\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n+      </div>\r\n \r\n-        {currentNode && userMap && (\r\n-          <div className={styles.tree}>\r\n-            <TreeNode\r\n-              node={userMap.get(currentNode._id)!.node}\r\n-              left={userMap.get(currentNode._id)!.left}\r\n-              right={userMap.get(currentNode._id)!.right}\r\n-              onClick={handleNodeClick}\r\n-              onAddChild={handleAddChild}\r\n-              refreshKey={refreshKey}\r\n-              userRole={userRole}\r\n-            />\r\n-          </div>\r\n-        )}\r\n-\r\n-        {showForm && (\r\n-          <div className={styles.formContainer}>\r\n-            <form className={styles.form} onSubmit={handleSubmit}>\r\n-              <h2>Add {selectedOption === \"left\" ? \"Left\" : \"Right\"} Child</h2>\r\n-              {error && <p className={styles.error}>{error.message}</p>}\r\n-              {success && (\r\n-                <p className={styles.success}>Child added successfully!</p>\r\n+      {showForm && (\r\n+        <div className={styles.modal}>\r\n+          <div className={styles.modalContent}>\r\n+            <span className={styles.close} onClick={handleCloseForm}>\r\n+              &times;\r\n+            </span>\r\n+            <form onSubmit={handleSubmit} className={styles.form}>\r\n+              <label>\r\n+                Name:\r\n+                <input\r\n+                  type=\"text\"\r\n+                  name=\"name\"\r\n+                  value={formData.name}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Email:\r\n+                <input\r\n+                  type=\"email\"\r\n+                  name=\"email\"\r\n+                  value={formData.email}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Password:\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={formData.password}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              {userRole === \"admin\" && (\r\n+                <button type=\"submit\">Add Child</button>\r\n               )}\r\n-              <input\r\n-                type=\"text\"\r\n-                name=\"name\"\r\n-                placeholder=\"Name\"\r\n-                value={formData.name}\r\n-                onChange={handleChange}\r\n-                required\r\n-              />\r\n-              <input\r\n-                type=\"email\"\r\n-                name=\"email\"\r\n-                placeholder=\"Email\"\r\n-                value={formData.email}\r\n-                onChange={handleChange}\r\n-                required\r\n-              />\r\n-              <input\r\n-                type=\"password\"\r\n-                name=\"password\"\r\n-                placeholder=\"Password\"\r\n-                value={formData.password}\r\n-                onChange={handleChange}\r\n-                required\r\n-              />\r\n-              <button type=\"submit\">Add Child</button>\r\n-              <button type=\"button\" onClick={handleCloseForm}>\r\n-                Cancel\r\n-              </button>\r\n             </form>\r\n+            {error && (\r\n+              <div className={styles.error}>Error: {error.message}</div>\r\n+            )}\r\n+            {success && (\r\n+              <div className={styles.success}>\r\n+                Child added successfully!\r\n+              </div>\r\n+            )}\r\n           </div>\r\n-        )}\r\n-      </div>\r\n-      <ThreeDCardDemo />\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1721628092103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,457 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import axios from \"axios\";\r\n+import styles from \"./index.module.scss\";\r\n+import Navbar from \"../../Components/Navbar\";\r\n+import { CardBody, CardContainer, CardItem } from \"../ui/3d-card\"; // Assuming you have these components\r\n+\r\n+interface User {\r\n+  _id: string;\r\n+  name: string;\r\n+  email: string;\r\n+  password: string;\r\n+  createdAt: string;\r\n+  updatedAt: string;\r\n+  __v: number;\r\n+  leftChild?: string;\r\n+  rightChild?: string;\r\n+  coins?: number;\r\n+  referralCode?: string;\r\n+}\r\n+\r\n+interface TreeNodeProps {\r\n+  node: User;\r\n+  left: TreeNodeProps | null;\r\n+  right: TreeNodeProps | null;\r\n+  onClick: (node: User) => void;\r\n+  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+  refreshKey: number;\r\n+  userRole: string | null;\r\n+}\r\n+\r\n+const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n+  const userMap = new Map<string, any>();\r\n+\r\n+  users.forEach((user) => {\r\n+    userMap.set(user._id, { node: user, left: null, right: null });\r\n+  });\r\n+\r\n+  users.forEach((user) => {\r\n+    const node = userMap.get(user._id);\r\n+    if (user.leftChild && userMap.has(user.leftChild)) {\r\n+      node!.left = userMap.get(user.leftChild)!;\r\n+    }\r\n+    if (user.rightChild && userMap.has(user.rightChild)) {\r\n+      node!.right = userMap.get(user.rightChild)!;\r\n+    }\r\n+  });\r\n+\r\n+  return userMap;\r\n+};\r\n+\r\n+const TreeNode: React.FC<TreeNodeProps> = ({\r\n+  node,\r\n+  left,\r\n+  right,\r\n+  onClick,\r\n+  onAddChild,\r\n+  refreshKey,\r\n+  userRole,\r\n+}) => {\r\n+  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n+  const [newCoins, setNewCoins] = useState(\"\");\r\n+  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n+\r\n+  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setNewCoins(e.target.value);\r\n+  };\r\n+\r\n+  const handleUpdateCoins = async () => {\r\n+    try {\r\n+      setUpdatingCoins(true);\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { coins: newCoins },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Coins updated successfully:\", response.data);\r\n+      setNewCoins(\"\");\r\n+      setShowCoinsPopup(false);\r\n+      setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error updating coins:\", error);\r\n+      setUpdatingCoins(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <div className={styles.node} onClick={() => onClick(node)}>\r\n+        <div className={styles.icon}>\r\n+          <i className=\"fas fa-user\"></i>\r\n+        </div>\r\n+        <div className={styles.name}>{node.name}</div>\r\n+        <div className={styles.email}>{node.email}</div>\r\n+        <div className={styles.id}>Coins: {node.coins}</div>\r\n+        <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+        {/* Conditionally render Add Child buttons based on role */}\r\n+        {userRole === \"admin\" && !left && (\r\n+          <div className={styles.addChild}>\r\n+            <button\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"left\")}\r\n+            >\r\n+              <i className=\"fas fa-plus\"></i> Add Left Child\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+\r\n+        {userRole === \"admin\" && !right && (\r\n+          <div className={styles.addChild}>\r\n+            <button\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"right\")}\r\n+            >\r\n+              <i className=\"fas fa-plus\"></i> Add Right Child\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+\r\n+        {left && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+          </div>\r\n+        )}\r\n+\r\n+        {right && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+\r\n+      {/* Conditionally render Send Coins button based on role */}\r\n+      {userRole === \"admin\" && !showCoinsPopup && (\r\n+        <div className={styles.sendCoinnew}>\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className={styles.sendCoins}>\r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n+            <button\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n+            >\r\n+              Update Coins\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+const Index: React.FC = () => {\r\n+  const [users, setUsers] = useState<User[]>([]);\r\n+  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n+    null\r\n+  );\r\n+  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n+  const [viewAll, setViewAll] = useState(false);\r\n+  const [formData, setFormData] = useState({\r\n+    name: \"\",\r\n+    email: \"\",\r\n+    password: \"\",\r\n+  });\r\n+  const [parentId, setParentId] = useState(\"\");\r\n+  const [selectedOption, setSelectedOption] = useState<\"left\" | \"right\">(\r\n+    \"left\"\r\n+  );\r\n+  const [error, setError] = useState<Error | null>(null);\r\n+  const [success, setSuccess] = useState(false);\r\n+  const [showForm, setShowForm] = useState(false);\r\n+  const [refreshKey, setRefreshKey] = useState(0);\r\n+  const [userRole, setUserRole] = useState<string | null>(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchUsers = async () => {\r\n+      try {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+        const response = await axios.get(\r\n+          \"https://www.referback.trollsufficient.com/admin/all\",\r\n+          {\r\n+            headers: {\r\n+              Authorization: `Bearer ${token}`,\r\n+              \"Content-Type\": \"application/json\",\r\n+            },\r\n+          }\r\n+        );\r\n+        setUsers(response.data);\r\n+        const map = createBinaryTree(response.data);\r\n+        setUserMap(map);\r\n+\r\n+        if (response.data.length > 0) {\r\n+          setCurrentNode(response.data[0]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching users:\", error);\r\n+      }\r\n+    };\r\n+\r\n+    const fetchUserRole = () => {\r\n+      const role = localStorage.getItem(\"role\");\r\n+      setUserRole(role);\r\n+    };\r\n+\r\n+    fetchUsers();\r\n+    fetchUserRole();\r\n+  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n+\r\n+  const handleNodeClick = (node: User) => {\r\n+    setCurrentNode(node);\r\n+  };\r\n+\r\n+  const handleAddChild = async (\r\n+    parentId: string,\r\n+    selectedOption: \"left\" | \"right\"\r\n+  ) => {\r\n+    try {\r\n+      setParentId(parentId);\r\n+      setSelectedOption(selectedOption);\r\n+      setShowForm(true);\r\n+    } catch (error) {\r\n+      console.error(\"Error handling add child:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setFormData({\r\n+      ...formData,\r\n+      [e.target.name]: e.target.value,\r\n+    });\r\n+  };\r\n+\r\n+  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+    try {\r\n+      const apiEndpoint =\r\n+        selectedOption === \"left\"\r\n+          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n+          : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n+\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+\r\n+      const response = await axios.put(apiEndpoint, formData, {\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n+\r\n+      if (response.status !== 200) {\r\n+        throw new Error(\"Failed to add child\");\r\n+      }\r\n+\r\n+      console.log(\"Child added successfully:\", response.data);\r\n+      setSuccess(true);\r\n+\r\n+      // Trigger refresh by incrementing refreshKey\r\n+      setRefreshKey((prevKey) => prevKey + 1);\r\n+    } catch (error: any) {\r\n+      console.error(\"Error adding child:\", error);\r\n+      setError(error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCloseForm = () => {\r\n+    setShowForm(false);\r\n+    setFormData({\r\n+      name: \"\",\r\n+      email: \"\",\r\n+      password: \"\",\r\n+    });\r\n+    setError(null);\r\n+    setSuccess(false);\r\n+  };\r\n+\r\n+  const renderInitialNodes = (node: User | null) => {\r\n+    if (!node) return null;\r\n+\r\n+    return (\r\n+      <div className={styles.children}>\r\n+        {userMap && userMap.has(node._id) && (\r\n+          <>\r\n+            {userMap.get(node._id)!.left && (\r\n+              <div className={styles.child}>\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.left!.node}\r\n+                  left={userMap.get(node._id)!.left!.left}\r\n+                  right={userMap.get(node._id)!.left!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n+                  userRole={userRole} // Pass userRole\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {userMap.get(node._id)!.right && (\r\n+              <div className={styles.child}>\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.right!.node}\r\n+                  left={userMap.get(node._id)!.right!.left}\r\n+                  right={userMap.get(node._id)!.right!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n+                  userRole={userRole} // Pass userRole\r\n+                />\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n+    if (!node) return null;\r\n+\r\n+    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n+    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n+\r\n+    return (\r\n+      <div>\r\n+        <TreeNode\r\n+          node={node}\r\n+          left={userMap?.get(node._id)?.left || null}\r\n+          right={userMap?.get(node._id)?.right || null}\r\n+          onClick={handleNodeClick}\r\n+          onAddChild={handleAddChild}\r\n+          refreshKey={refreshKey} // Pass refreshKey\r\n+          userRole={userRole} // Pass userRole\r\n+        />\r\n+        <div className={styles.children}>\r\n+          {leftNode && renderCompleteTree(leftNode)}\r\n+          {rightNode && renderCompleteTree(rightNode)}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <Navbar />\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n+        </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                    refreshKey={refreshKey} // Pass refreshKey\r\n+                    userRole={userRole} // Pass userRole\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {showForm && (\r\n+        <div className={styles.modal}>\r\n+          <div className={styles.modalContent}>\r\n+            <span className={styles.close} onClick={handleCloseForm}>\r\n+              &times;\r\n+            </span>\r\n+            <form onSubmit={handleSubmit} className={styles.form}>\r\n+              <label>\r\n+                Name:\r\n+                <input\r\n+                  type=\"text\"\r\n+                  name=\"name\"\r\n+                  value={formData.name}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Email:\r\n+                <input\r\n+                  type=\"email\"\r\n+                  name=\"email\"\r\n+                  value={formData.email}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Password:\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={formData.password}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              {userRole === \"admin\" && (\r\n+                <button type=\"submit\">Add Child</button>\r\n+              )}\r\n+            </form>\r\n+            {error && (\r\n+              <div className={styles.error}>Error: {error.message}</div>\r\n+            )}\r\n+            {success && (\r\n+              <div className={styles.success}>\r\n+                Child added successfully!\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Index;\r\n"
                },
                {
                    "date": 1721629604511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,457 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import styles from \"./index.module.scss\";\r\n+import Navbar from \"../../Components/Navbar\";\r\n+import axios from \"axios\";\r\n+\r\n+interface User {\r\n+  _id: string;\r\n+  name: string;\r\n+  email: string;\r\n+  password: string;\r\n+  createdAt: string;\r\n+  updatedAt: string;\r\n+  __v: number;\r\n+  leftChild?: string;\r\n+  rightChild?: string;\r\n+  coins?: number;\r\n+  referralCode?: string;\r\n+}\r\n+\r\n+interface TreeNodeProps {\r\n+  node: User;\r\n+  left: TreeNodeProps | null;\r\n+  right: TreeNodeProps | null;\r\n+  onClick: (node: User) => void;\r\n+  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+  refreshKey: number; // Pass refreshKey as prop\r\n+  userRole: string | null; // Pass userRole as prop\r\n+}\r\n+\r\n+const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n+  const userMap = new Map<string, any>();\r\n+\r\n+  users.forEach((user) => {\r\n+    userMap.set(user._id, { node: user, left: null, right: null });\r\n+  });\r\n+\r\n+  users.forEach((user) => {\r\n+    const node = userMap.get(user._id);\r\n+    if (user.leftChild && userMap.has(user.leftChild)) {\r\n+      node!.left = userMap.get(user.leftChild)!;\r\n+    }\r\n+    if (user.rightChild && userMap.has(user.rightChild)) {\r\n+      node!.right = userMap.get(user.rightChild)!;\r\n+    }\r\n+  });\r\n+\r\n+  return userMap;\r\n+};\r\n+\r\n+const TreeNode: React.FC<TreeNodeProps> = ({\r\n+  node,\r\n+  left,\r\n+  right,\r\n+  onClick,\r\n+  onAddChild,\r\n+  refreshKey,\r\n+  userRole,\r\n+}) => {\r\n+  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n+  const [newCoins, setNewCoins] = useState(\"\");\r\n+  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n+\r\n+  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setNewCoins(e.target.value);\r\n+  };\r\n+\r\n+  const handleUpdateCoins = async () => {\r\n+    try {\r\n+      setUpdatingCoins(true);\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { coins: newCoins },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Coins updated successfully:\", response.data);\r\n+      setNewCoins(\"\");\r\n+      setShowCoinsPopup(false);\r\n+      setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error updating coins:\", error);\r\n+      setUpdatingCoins(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <div className={styles.node} onClick={() => onClick(node)}>\r\n+        <div className={styles.icon}>\r\n+          <i className=\"fas fa-user\"></i>\r\n+        </div>\r\n+        <div className={styles.name}>{node.name}</div>\r\n+        <div className={styles.email}>{node.email}</div>\r\n+        <div className={styles.id}>Coins: {node.coins}</div>\r\n+        <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+        {/* Conditionally render Add Child buttons based on role */}\r\n+        {userRole === \"admin\" && !left && (\r\n+          <div className={styles.addChild}>\r\n+            <button\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"left\")}\r\n+            >\r\n+              <i className=\"fas fa-plus\"></i> Add Left Child\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+\r\n+        {userRole === \"admin\" && !right && (\r\n+          <div className={styles.addChild}>\r\n+            <button\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"right\")}\r\n+            >\r\n+              <i className=\"fas fa-plus\"></i> Add Right Child\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+\r\n+        {left && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+          </div>\r\n+        )}\r\n+\r\n+        {right && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+\r\n+      {/* Conditionally render Send Coins button based on role */}\r\n+      {userRole === \"admin\" && !showCoinsPopup && (\r\n+        <div className={styles.sendCoinnew}>\r\n+             <button\r\n+          className={`${styles.sendCoinsButton} ${\r\n+            updatingCoins ? styles.updating : \"\"\r\n+          }`}\r\n+          onClick={() => setShowCoinsPopup(true)}\r\n+        >\r\n+          Send Coins\r\n+        </button>\r\n+        </div>\r\n+       \r\n+      )}\r\n+\r\n+      <div className={styles.sendCoins}>\r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n+            <button\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n+            >\r\n+              Update Coins\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+const Index: React.FC = () => {\r\n+  const [users, setUsers] = useState<User[]>([]);\r\n+  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n+    null\r\n+  );\r\n+  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n+  const [viewAll, setViewAll] = useState(false);\r\n+  const [formData, setFormData] = useState({\r\n+    name: \"\",\r\n+    email: \"\",\r\n+    password: \"\",\r\n+  });\r\n+  const [parentId, setParentId] = useState(\"\");\r\n+  const [selectedOption, setSelectedOption] = useState<\"left\" | \"right\">(\r\n+    \"left\"\r\n+  );\r\n+  const [error, setError] = useState<Error | null>(null);\r\n+  const [success, setSuccess] = useState(false);\r\n+  const [showForm, setShowForm] = useState(false);\r\n+  const [refreshKey, setRefreshKey] = useState(0); \r\n+  const [userRole, setUserRole] = useState<string | null>(null); \r\n+\r\n+  useEffect(() => {\r\n+    const fetchUsers = async () => {\r\n+      try {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+        const response = await axios.get(\r\n+          \"https://www.referback.trollsufficient.com/admin/all\",\r\n+          {\r\n+            headers: {\r\n+              Authorization: `Bearer ${token}`,\r\n+              \"Content-Type\": \"application/json\",\r\n+            },\r\n+          }\r\n+        );\r\n+        setUsers(response.data);\r\n+        const map = createBinaryTree(response.data);\r\n+        setUserMap(map);\r\n+\r\n+        if (response.data.length > 0) {\r\n+          setCurrentNode(response.data[0]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching users:\", error);\r\n+      }\r\n+    };\r\n+\r\n+    const fetchUserRole = () => {\r\n+      const role = localStorage.getItem(\"role\");\r\n+      setUserRole(role);\r\n+    };\r\n+\r\n+    fetchUsers();\r\n+    fetchUserRole();\r\n+  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n+\r\n+  const handleNodeClick = (node: User) => {\r\n+    setCurrentNode(node);\r\n+  };\r\n+\r\n+  const handleAddChild = async (\r\n+    parentId: string,\r\n+    selectedOption: \"left\" | \"right\"\r\n+  ) => {\r\n+    try {\r\n+      setParentId(parentId);\r\n+      setSelectedOption(selectedOption);\r\n+      setShowForm(true);\r\n+    } catch (error) {\r\n+      console.error(\"Error handling add child:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setFormData({\r\n+      ...formData,\r\n+      [e.target.name]: e.target.value,\r\n+    });\r\n+  };\r\n+\r\n+  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+    try {\r\n+      const apiEndpoint =\r\n+        selectedOption === \"left\"\r\n+          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n+          : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n+\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+\r\n+      const response = await axios.put(apiEndpoint, formData, {\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n+\r\n+      if (response.status !== 200) {\r\n+        throw new Error(\"Failed to add child\");\r\n+      }\r\n+\r\n+      console.log(\"Child added successfully:\", response.data);\r\n+      setSuccess(true);\r\n+\r\n+      // Trigger refresh by incrementing refreshKey\r\n+      setRefreshKey((prevKey) => prevKey + 1);\r\n+    } catch (error:any) {\r\n+      console.error(\"Error adding child:\", error);\r\n+      setError(error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCloseForm = () => {\r\n+    setShowForm(false);\r\n+    setFormData({\r\n+      name: \"\",\r\n+      email: \"\",\r\n+      password: \"\",\r\n+    });\r\n+    setError(null);\r\n+    setSuccess(false);\r\n+  };\r\n+\r\n+  const renderInitialNodes = (node: User | null) => {\r\n+    if (!node) return null;\r\n+\r\n+    return (\r\n+      <div className={styles.children}>\r\n+        {userMap && userMap.has(node._id) && (\r\n+          <>\r\n+            {userMap.get(node._id)!.left && (\r\n+              <div className={styles.child}>\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.left!.node}\r\n+                  left={userMap.get(node._id)!.left!.left}\r\n+                  right={userMap.get(node._id)!.left!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n+                  userRole={userRole} // Pass userRole\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {userMap.get(node._id)!.right && (\r\n+              <div className={styles.child}>\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.right!.node}\r\n+                  left={userMap.get(node._id)!.right!.left}\r\n+                  right={userMap.get(node._id)!.right!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n+                  userRole={userRole} // Pass userRole\r\n+                />\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n+    if (!node) return null;\r\n+\r\n+    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n+    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n+\r\n+    return (\r\n+      <div>\r\n+        <TreeNode\r\n+          node={node}\r\n+          left={userMap?.get(node._id)?.left || null}\r\n+          right={userMap?.get(node._id)?.right || null}\r\n+          onClick={handleNodeClick}\r\n+          onAddChild={handleAddChild}\r\n+          refreshKey={refreshKey} // Pass refreshKey\r\n+          userRole={userRole} // Pass userRole\r\n+        />\r\n+        <div className={styles.children}>\r\n+          {leftNode && renderCompleteTree(leftNode)}\r\n+          {rightNode && renderCompleteTree(rightNode)}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <Navbar />\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n+        </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                    refreshKey={refreshKey} // Pass refreshKey\r\n+                    userRole={userRole} // Pass userRole\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {showForm && (\r\n+        <div className={styles.modal}>\r\n+          <div className={styles.modalContent}>\r\n+            <span className={styles.close} onClick={handleCloseForm}>\r\n+              &times;\r\n+            </span>\r\n+            <form onSubmit={handleSubmit} className={styles.form}>\r\n+              <label>\r\n+                Name:\r\n+                <input\r\n+                  type=\"text\"\r\n+                  name=\"name\"\r\n+                  value={formData.name}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Email:\r\n+                <input\r\n+                  type=\"email\"\r\n+                  name=\"email\"\r\n+                  value={formData.email}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Password:\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={formData.password}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              {userRole === \"admin\" && (\r\n+                <button type=\"submit\">Add Child</button>\r\n+              )}\r\n+            </form>\r\n+            {error && (\r\n+              <div className={styles.error}>Error: {error.message}</div>\r\n+            )}\r\n+            {success && (\r\n+              <div className={styles.success}>\r\n+                Child added successfully!\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Index;\r\n"
                }
            ],
            "date": 1721627528931,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Image from \"next/image\";\r\nimport axios from \"axios\";\r\nimport styles from \"./index.module.scss\";\r\nimport Navbar from \"../../Components/Navbar\";\r\nimport { CardBody, CardContainer, CardItem } from \"../ui/3d-card\";\r\n\r\ninterface User {\r\n  _id: string;\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  __v: number;\r\n  leftChild?: string;\r\n  rightChild?: string;\r\n  coins?: number;\r\n  referralCode?: string;\r\n}\r\n\r\ninterface TreeNodeProps {\r\n  node: User;\r\n  left: TreeNodeProps | null;\r\n  right: TreeNodeProps | null;\r\n  onClick: (node: User) => void;\r\n  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n  refreshKey: number;\r\n  userRole: string | null;\r\n}\r\n\r\nconst createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n  const userMap = new Map<string, any>();\r\n\r\n  users.forEach((user) => {\r\n    userMap.set(user._id, { node: user, left: null, right: null });\r\n  });\r\n\r\n  users.forEach((user) => {\r\n    const node = userMap.get(user._id);\r\n    if (user.leftChild && userMap.has(user.leftChild)) {\r\n      node!.left = userMap.get(user.leftChild)!;\r\n    }\r\n    if (user.rightChild && userMap.has(user.rightChild)) {\r\n      node!.right = userMap.get(user.rightChild)!;\r\n    }\r\n  });\r\n\r\n  return userMap;\r\n};\r\n\r\nconst TreeNode: React.FC<TreeNodeProps> = ({\r\n  node,\r\n  left,\r\n  right,\r\n  onClick,\r\n  onAddChild,\r\n  refreshKey,\r\n  userRole,\r\n}) => {\r\n  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n  const [newCoins, setNewCoins] = useState(\"\");\r\n  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n\r\n  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNewCoins(e.target.value);\r\n  };\r\n\r\n  const handleUpdateCoins = async () => {\r\n    try {\r\n      setUpdatingCoins(true);\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n\r\n      const response = await axios.post(\r\n        apiEndpoint,\r\n        { coins: newCoins },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      console.log(\"Coins updated successfully:\", response.data);\r\n      setNewCoins(\"\");\r\n      setShowCoinsPopup(false);\r\n      setUpdatingCoins(false);\r\n\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.error(\"Error updating coins:\", error);\r\n      setUpdatingCoins(false);\r\n    }\r\n  };\r\n\r\n  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n    onAddChild(node._id, selectedOption);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.node} onClick={() => onClick(node)}>\r\n        <div className={styles.icon}>\r\n          <i className=\"fas fa-user\"></i>\r\n        </div>\r\n        <div className={styles.name}>{node.name}</div>\r\n        <div className={styles.email}>{node.email}</div>\r\n        <div className={styles.id}>Coins: {node.coins}</div>\r\n        <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n\r\n        {userRole === \"admin\" && !left && (\r\n          <div className={styles.addChild}>\r\n            <button\r\n              className={styles.addChildButton}\r\n              onClick={() => handleAddChild(\"left\")}\r\n            >\r\n              <i className=\"fas fa-plus\"></i> Add Left Child\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {userRole === \"admin\" && !right && (\r\n          <div className={styles.addChild}>\r\n            <button\r\n              className={styles.addChildButton}\r\n              onClick={() => handleAddChild(\"right\")}\r\n            >\r\n              <i className=\"fas fa-plus\"></i> Add Right Child\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {left && (\r\n          <div className={styles.lineWrapper}>\r\n            <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n          </div>\r\n        )}\r\n\r\n        {right && (\r\n          <div className={styles.lineWrapper}>\r\n            <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {userRole === \"admin\" && !showCoinsPopup && (\r\n        <div className={styles.sendCoinnew}>\r\n          <button\r\n            className={`${styles.sendCoinsButton} ${\r\n              updatingCoins ? styles.updating : \"\"\r\n            }`}\r\n            onClick={() => setShowCoinsPopup(true)}\r\n          >\r\n            Send Coins\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <div className={styles.sendCoins}>\r\n        {showCoinsPopup && (\r\n          <div className={styles.coinsPopup}>\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Enter Coins\"\r\n              value={newCoins}\r\n              onChange={handleCoinsChange}\r\n            />\r\n            <button\r\n              className={styles.updateCoinsButton}\r\n              onClick={handleUpdateCoins}\r\n            >\r\n              Update Coins\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Index: React.FC = () => {\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n    null\r\n  );\r\n  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n  const [viewAll, setViewAll] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [parentId, setParentId] = useState(\"\");\r\n  const [selectedOption, setSelectedOption] = useState<\"left\" | \"right\">(\r\n    \"left\"\r\n  );\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n  const [userRole, setUserRole] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"accessToken\");\r\n        const response = await axios.get(\r\n          \"https://www.referback.trollsufficient.com/admin/all\",\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n        setUsers(response.data);\r\n        const map = createBinaryTree(response.data);\r\n        setUserMap(map);\r\n\r\n        if (response.data.length > 0) {\r\n          setCurrentNode(response.data[0]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n      }\r\n    };\r\n\r\n    const fetchUserRole = () => {\r\n      const role = localStorage.getItem(\"role\");\r\n      setUserRole(role);\r\n    };\r\n\r\n    fetchUsers();\r\n    fetchUserRole();\r\n  }, [refreshKey]);\r\n\r\n  const handleNodeClick = (node: User) => {\r\n    setCurrentNode(node);\r\n  };\r\n\r\n  const handleAddChild = async (\r\n    parentId: string,\r\n    selectedOption: \"left\" | \"right\"\r\n  ) => {\r\n    try {\r\n      setParentId(parentId);\r\n      setSelectedOption(selectedOption);\r\n      setShowForm(true);\r\n    } catch (error) {\r\n      console.error(\"Error handling add child:\", error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({\r\n      ...formData,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    try {\r\n      const apiEndpoint =\r\n        selectedOption === \"left\"\r\n          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n          : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n\r\n      const token = localStorage.getItem(\"accessToken\");\r\n\r\n      const response = await axios.put(apiEndpoint, formData, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      if (response.status !== 200) {\r\n        throw new Error(\"Failed to add child\");\r\n      }\r\n\r\n      console.log(\"Child added successfully:\", response.data);\r\n      setSuccess(true);\r\n\r\n      setRefreshKey((prevKey) => prevKey + 1);\r\n    } catch (error: any) {\r\n      console.error(\"Error adding child:\", error);\r\n      setError(error);\r\n    }\r\n  };\r\n\r\n  const handleCloseForm = () => {\r\n    setShowForm(false);\r\n    setFormData({\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n    });\r\n    setError(null);\r\n    setSuccess(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <div className={styles.main}>\r\n        <h1 className={styles.title}>Referback User Tree</h1>\r\n\r\n        {currentNode && userMap && (\r\n          <div className={styles.tree}>\r\n            <TreeNode\r\n              node={userMap.get(currentNode._id)!.node}\r\n              left={userMap.get(currentNode._id)!.left}\r\n              right={userMap.get(currentNode._id)!.right}\r\n              onClick={handleNodeClick}\r\n              onAddChild={handleAddChild}\r\n              refreshKey={refreshKey}\r\n              userRole={userRole}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {showForm && (\r\n          <div className={styles.formContainer}>\r\n            <form className={styles.form} onSubmit={handleSubmit}>\r\n              <h2>Add {selectedOption === \"left\" ? \"Left\" : \"Right\"} Child</h2>\r\n              {error && <p className={styles.error}>{error.message}</p>}\r\n              {success && (\r\n                <p className={styles.success}>Child added successfully!</p>\r\n              )}\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Name\"\r\n                value={formData.name}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Email\"\r\n                value={formData.email}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n                value={formData.password}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              <button type=\"submit\">Add Child</button>\r\n              <button type=\"button\" onClick={handleCloseForm}>\r\n                Cancel\r\n              </button>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <ThreeDCardDemo />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"
        }
    ]
}