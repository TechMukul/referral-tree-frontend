{
    "sourceFile": "pages/Tree/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 59,
            "patches": [
                {
                    "date": 1721306133685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721306376454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// index.tsx\r\n import React, { useEffect, useState } from \"react\";\r\n import styles from \"./index.module.scss\";\r\n import Navbar from \"../../Components/Navbar\";\r\n import axios from \"axios\";\r\n@@ -60,17 +61,19 @@\n   const socket = io(\"https://www.referback.trollsufficient.com\");\r\n \r\n   useEffect(() => {\r\n     socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n-      if (node._id === updatedUser._id) {\r\n-        node.coins = updatedUser.coins || 0;\r\n-      }\r\n+      setUsers((prevUsers) =>\r\n+        prevUsers.map((user) =>\r\n+          user._id === updatedUser._id ? { ...user, coins: updatedUser.coins } : user\r\n+        )\r\n+      );\r\n     });\r\n \r\n     return () => {\r\n       socket.disconnect();\r\n     };\r\n-  }, [socket, node]);\r\n+  }, []);\r\n \r\n   const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     setNewCoins(e.target.value);\r\n   };\r\n@@ -312,35 +315,14 @@\n     );\r\n   };\r\n \r\n   return (\r\n-    <div>\r\n+    <div className={styles.container}>\r\n       <Navbar />\r\n-      <div className={styles.container}>\r\n-        <div className={styles.buttonWrapper}>\r\n-          <button\r\n-            className={styles.toggleButton}\r\n-            onClick={() => setViewAll(!viewAll)}\r\n-          >\r\n-            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n-          </button>\r\n+      <div className={styles.content}>\r\n+        <div className={styles.tree}>\r\n+          {viewAll ? renderCompleteTree(currentNode) : renderInitialNodes(currentNode)}\r\n         </div>\r\n-        <div className={styles.treeContainer}>\r\n-          {viewAll\r\n-            ? renderCompleteTree(currentNode)\r\n-            : currentNode && (\r\n-                <div key={currentNode._id}>\r\n-                  <TreeNode\r\n-                    node={currentNode}\r\n-                    left={userMap?.get(currentNode._id)?.left || null}\r\n-                    right={userMap?.get(currentNode._id)?.right || null}\r\n-                    onClick={handleNodeClick}\r\n-                    onAddChild={handleAddChild}\r\n-                  />\r\n-                  {renderInitialNodes(currentNode)}\r\n-                </div>\r\n-              )}\r\n-        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1721306384585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-// index.tsx\r\n import React, { useEffect, useState } from \"react\";\r\n import styles from \"./index.module.scss\";\r\n import Navbar from \"../../Components/Navbar\";\r\n import axios from \"axios\";\r\n@@ -61,19 +60,17 @@\n   const socket = io(\"https://www.referback.trollsufficient.com\");\r\n \r\n   useEffect(() => {\r\n     socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n-      setUsers((prevUsers) =>\r\n-        prevUsers.map((user) =>\r\n-          user._id === updatedUser._id ? { ...user, coins: updatedUser.coins } : user\r\n-        )\r\n-      );\r\n+      if (node._id === updatedUser._id) {\r\n+        node.coins = updatedUser.coins || 0;\r\n+      }\r\n     });\r\n \r\n     return () => {\r\n       socket.disconnect();\r\n     };\r\n-  }, []);\r\n+  }, [socket, node]);\r\n \r\n   const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     setNewCoins(e.target.value);\r\n   };\r\n@@ -315,14 +312,35 @@\n     );\r\n   };\r\n \r\n   return (\r\n-    <div className={styles.container}>\r\n+    <div>\r\n       <Navbar />\r\n-      <div className={styles.content}>\r\n-        <div className={styles.tree}>\r\n-          {viewAll ? renderCompleteTree(currentNode) : renderInitialNodes(currentNode)}\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n         </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div key={currentNode._id}>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1721306471432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// Index.tsx\r\n+\r\n import React, { useEffect, useState } from \"react\";\r\n import styles from \"./index.module.scss\";\r\n import Navbar from \"../../Components/Navbar\";\r\n import axios from \"axios\";\r\n@@ -60,17 +62,19 @@\n   const socket = io(\"https://www.referback.trollsufficient.com\");\r\n \r\n   useEffect(() => {\r\n     socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n-      if (node._id === updatedUser._id) {\r\n-        node.coins = updatedUser.coins || 0;\r\n-      }\r\n+      setUsers((prevUsers) =>\r\n+        prevUsers.map((user) =>\r\n+          user._id === updatedUser._id ? { ...user, coins: updatedUser.coins } : user\r\n+        )\r\n+      );\r\n     });\r\n \r\n     return () => {\r\n       socket.disconnect();\r\n     };\r\n-  }, [socket, node]);\r\n+  }, []);\r\n \r\n   const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     setNewCoins(e.target.value);\r\n   };\r\n@@ -312,37 +316,17 @@\n     );\r\n   };\r\n \r\n   return (\r\n-    <div>\r\n+    <div className={styles.container}>\r\n       <Navbar />\r\n-      <div className={styles.container}>\r\n-        <div className={styles.buttonWrapper}>\r\n-          <button\r\n-            className={styles.toggleButton}\r\n-            onClick={() => setViewAll(!viewAll)}\r\n-          >\r\n-            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n-          </button>\r\n+      <div className={styles.content}>\r\n+        <div className={styles.tree}>\r\n+          {viewAll ? renderCompleteTree(currentNode) : renderInitialNodes(currentNode)}\r\n         </div>\r\n-        <div className={styles.treeContainer}>\r\n-          {viewAll\r\n-            ? renderCompleteTree(currentNode)\r\n-            : currentNode && (\r\n-                <div key={currentNode._id}>\r\n-                  <TreeNode\r\n-                    node={currentNode}\r\n-                    left={userMap?.get(currentNode._id)?.left || null}\r\n-                    right={userMap?.get(currentNode._id)?.right || null}\r\n-                    onClick={handleNodeClick}\r\n-                    onAddChild={handleAddChild}\r\n-                  />\r\n-                  {renderInitialNodes(currentNode)}\r\n-                </div>\r\n-              )}\r\n-        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n export default Index;\r\n+\r\n"
                },
                {
                    "date": 1721306485736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-// Index.tsx\r\n-\r\n import React, { useEffect, useState } from \"react\";\r\n import styles from \"./index.module.scss\";\r\n import Navbar from \"../../Components/Navbar\";\r\n import axios from \"axios\";\r\n@@ -62,19 +60,17 @@\n   const socket = io(\"https://www.referback.trollsufficient.com\");\r\n \r\n   useEffect(() => {\r\n     socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n-      setUsers((prevUsers) =>\r\n-        prevUsers.map((user) =>\r\n-          user._id === updatedUser._id ? { ...user, coins: updatedUser.coins } : user\r\n-        )\r\n-      );\r\n+      if (node._id === updatedUser._id) {\r\n+        node.coins = updatedUser.coins || 0;\r\n+      }\r\n     });\r\n \r\n     return () => {\r\n       socket.disconnect();\r\n     };\r\n-  }, []);\r\n+  }, [socket, node]);\r\n \r\n   const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     setNewCoins(e.target.value);\r\n   };\r\n@@ -316,17 +312,37 @@\n     );\r\n   };\r\n \r\n   return (\r\n-    <div className={styles.container}>\r\n+    <div>\r\n       <Navbar />\r\n-      <div className={styles.content}>\r\n-        <div className={styles.tree}>\r\n-          {viewAll ? renderCompleteTree(currentNode) : renderInitialNodes(currentNode)}\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n         </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div key={currentNode._id}>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n export default Index;\r\n-\r\n"
                },
                {
                    "date": 1721306632237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,348 +1,11 @@\n-import React, { useEffect, useState } from \"react\";\r\n-import styles from \"./index.module.scss\";\r\n-import Navbar from \"../../Components/Navbar\";\r\n-import axios from \"axios\";\r\n-import io from \"socket.io-client\";\r\n+import React from 'react'\r\n \r\n-interface User {\r\n-  _id: string;\r\n-  name: string;\r\n-  email: string;\r\n-  password: string;\r\n-  createdAt: string;\r\n-  updatedAt: string;\r\n-  __v: number;\r\n-  leftChild?: string;\r\n-  rightChild?: string;\r\n-  coins?: number;\r\n-  referralCode?: string;\r\n-}\r\n-\r\n-interface TreeNodeProps {\r\n-  node: User;\r\n-  left: TreeNodeProps | null;\r\n-  right: TreeNodeProps | null;\r\n-  onClick: (node: User) => void;\r\n-  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-}\r\n-\r\n-const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, TreeNodeProps>();\r\n-\r\n-  users.forEach((user) => {\r\n-    userMap.set(user._id, { node: user, left: null, right: null });\r\n-  });\r\n-\r\n-  users.forEach((user) => {\r\n-    const node = userMap.get(user._id);\r\n-    if (user.leftChild && userMap.has(user.leftChild)) {\r\n-      node!.left = userMap.get(user.leftChild)!;\r\n-    }\r\n-    if (user.rightChild && userMap.has(user.rightChild)) {\r\n-      node!.right = userMap.get(user.rightChild)!;\r\n-    }\r\n-  });\r\n-\r\n-  return userMap;\r\n-};\r\n-\r\n-const TreeNode: React.FC<TreeNodeProps> = ({\r\n-  node,\r\n-  left,\r\n-  right,\r\n-  onClick,\r\n-  onAddChild,\r\n-}) => {\r\n-  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n-  const [newCoins, setNewCoins] = useState(\"\");\r\n-  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n-\r\n-  const socket = io(\"https://www.referback.trollsufficient.com\");\r\n-\r\n-  useEffect(() => {\r\n-    socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n-      if (node._id === updatedUser._id) {\r\n-        node.coins = updatedUser.coins || 0;\r\n-      }\r\n-    });\r\n-\r\n-    return () => {\r\n-      socket.disconnect();\r\n-    };\r\n-  }, [socket, node]);\r\n-\r\n-  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    setNewCoins(e.target.value);\r\n-  };\r\n-\r\n-  const handleUpdateCoins = async () => {\r\n-    try {\r\n-      setUpdatingCoins(true);\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { coins: newCoins },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"Coins updated successfully:\", response.data);\r\n-      setNewCoins(\"\");\r\n-      setShowCoinsPopup(false);\r\n-      setUpdatingCoins(false);\r\n-    } catch (error) {\r\n-      console.error(\"Error updating coins:\", error);\r\n-      setUpdatingCoins(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n-    onAddChild(node._id, selectedOption);\r\n-  };\r\n-\r\n+function index() {\r\n   return (\r\n-    <div className={styles.node} onClick={() => onClick(node)}>\r\n-      <div className={styles.icon}>\r\n-        <i className=\"fas fa-user\"></i>\r\n-      </div>\r\n-      <div className={styles.name}>{node.name}</div>\r\n-      <div className={styles.email}>{node.email}</div>\r\n-      <div className={styles.id}>Coins: {node.coins}</div>\r\n-      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n-\r\n-      {!left && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Left Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {!right && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Right Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {left && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {right && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      <div className={styles.sendCoins}>\r\n-        {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n-            <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n-            >\r\n-              Update Coins\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-const Index: React.FC = () => {\r\n-  const [users, setUsers] = useState<User[]>([]);\r\n-  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n-    null\r\n-  );\r\n-  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n-  const [viewAll, setViewAll] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchUsers = async () => {\r\n-      try {\r\n-        const token = localStorage.getItem(\"accessToken\");\r\n-        const response = await axios.get(\r\n-          \"https://www.referback.trollsufficient.com/admin/all\",\r\n-          {\r\n-            headers: {\r\n-              Authorization: `Bearer ${token}`,\r\n-              \"Content-Type\": \"application/json\",\r\n-            },\r\n-          }\r\n-        );\r\n-        setUsers(response.data);\r\n-        const map = createBinaryTree(response.data);\r\n-        setUserMap(map);\r\n-\r\n-        if (response.data.length > 0) {\r\n-          setCurrentNode(response.data[0]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching users:\", error);\r\n-      }\r\n-    };\r\n-\r\n-    fetchUsers();\r\n-\r\n-    const socket = io(\"https://www.referback.trollsufficient.com\");\r\n-\r\n-    // Socket.IO event listeners\r\n-    socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n-      setUsers((prevUsers) =>\r\n-        prevUsers.map((user) =>\r\n-          user._id === updatedUser._id ? { ...user, coins: updatedUser.coins } : user\r\n-        )\r\n-      );\r\n-    });\r\n-\r\n-    return () => {\r\n-      socket.disconnect();\r\n-    };\r\n-  }, []);\r\n-\r\n-  const handleNodeClick = (node: User) => {\r\n-    setCurrentNode(node);\r\n-  };\r\n-\r\n-  const handleAddChild = async (\r\n-    parentId: string,\r\n-    selectedOption: \"left\" | \"right\"\r\n-  ) => {\r\n-    try {\r\n-      // Implement add child logic here\r\n-    } catch (error) {\r\n-      console.error(\"Error handling add child:\", error);\r\n-    }\r\n-  };\r\n-\r\n-  const renderInitialNodes = (node: User | null) => {\r\n-    if (!node) return null;\r\n-\r\n-    return (\r\n-      <div className={styles.children}>\r\n-        {userMap && userMap.has(node._id) && (\r\n-          <>\r\n-            {userMap.get(node._id)!.left && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.left!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.left!.node}\r\n-                  left={userMap.get(node._id)!.left!.left}\r\n-                  right={userMap.get(node._id)!.left!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-            {userMap.get(node._id)!.right && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.right!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.right!.node}\r\n-                  left={userMap.get(node._id)!.right!.left}\r\n-                  right={userMap.get(node._id)!.right!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-          </>\r\n-        )}\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n-    if (!node) return null;\r\n-\r\n-    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n-    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n-\r\n-    return (\r\n-      <div key={node._id}>\r\n-        <TreeNode\r\n-          node={node}\r\n-          left={userMap?.get(node._id)?.left || null}\r\n-          right={userMap?.get(node._id)?.right || null}\r\n-          onClick={handleNodeClick}\r\n-          onAddChild={handleAddChild}\r\n-        />\r\n-        <div className={styles.children}>\r\n-          {leftNode && renderCompleteTree(leftNode)}\r\n-          {rightNode && renderCompleteTree(rightNode)}\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n     <div>\r\n-      <Navbar />\r\n-      <div className={styles.container}>\r\n-        <div className={styles.buttonWrapper}>\r\n-          <button\r\n-            className={styles.toggleButton}\r\n-            onClick={() => setViewAll(!viewAll)}\r\n-          >\r\n-            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n-          </button>\r\n-        </div>\r\n-        <div className={styles.treeContainer}>\r\n-          {viewAll\r\n-            ? renderCompleteTree(currentNode)\r\n-            : currentNode && (\r\n-                <div key={currentNode._id}>\r\n-                  <TreeNode\r\n-                    node={currentNode}\r\n-                    left={userMap?.get(currentNode._id)?.left || null}\r\n-                    right={userMap?.get(currentNode._id)?.right || null}\r\n-                    onClick={handleNodeClick}\r\n-                    onAddChild={handleAddChild}\r\n-                  />\r\n-                  {renderInitialNodes(currentNode)}\r\n-                </div>\r\n-              )}\r\n-        </div>\r\n-      </div>\r\n+      hh\r\n     </div>\r\n-  );\r\n-};\r\n+  )\r\n+}\r\n \r\n-export default Index;\r\n+export default index\r\n"
                },
                {
                    "date": 1721306644429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,348 @@\n-import React from 'react'\r\n+import React, { useEffect, useState } from \"react\";\r\n+import styles from \"./index.module.scss\";\r\n+import Navbar from \"../../Components/Navbar\";\r\n+import axios from \"axios\";\r\n+import io from \"socket.io-client\";\r\n \r\n-function index() {\r\n+interface User {\r\n+  _id: string;\r\n+  name: string;\r\n+  email: string;\r\n+  password: string;\r\n+  createdAt: string;\r\n+  updatedAt: string;\r\n+  __v: number;\r\n+  leftChild?: string;\r\n+  rightChild?: string;\r\n+  coins?: number;\r\n+  referralCode?: string;\r\n+}\r\n+\r\n+interface TreeNodeProps {\r\n+  node: User;\r\n+  left: TreeNodeProps | null;\r\n+  right: TreeNodeProps | null;\r\n+  onClick: (node: User) => void;\r\n+  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+}\r\n+\r\n+const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n+  const userMap = new Map<string, TreeNodeProps>();\r\n+\r\n+  users.forEach((user) => {\r\n+    userMap.set(user._id, { node: user, left: null, right: null });\r\n+  });\r\n+\r\n+  users.forEach((user) => {\r\n+    const node = userMap.get(user._id);\r\n+    if (user.leftChild && userMap.has(user.leftChild)) {\r\n+      node!.left = userMap.get(user.leftChild)!;\r\n+    }\r\n+    if (user.rightChild && userMap.has(user.rightChild)) {\r\n+      node!.right = userMap.get(user.rightChild)!;\r\n+    }\r\n+  });\r\n+\r\n+  return userMap;\r\n+};\r\n+\r\n+const TreeNode: React.FC<TreeNodeProps> = ({\r\n+  node,\r\n+  left,\r\n+  right,\r\n+  onClick,\r\n+  onAddChild,\r\n+}) => {\r\n+  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n+  const [newCoins, setNewCoins] = useState(\"\");\r\n+  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n+\r\n+  const socket = io(\"https://www.referback.trollsufficient.com\");\r\n+\r\n+  useEffect(() => {\r\n+    socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n+      if (node._id === updatedUser._id) {\r\n+        node.coins = updatedUser.coins || 0;\r\n+      }\r\n+    });\r\n+\r\n+    return () => {\r\n+      socket.disconnect();\r\n+    };\r\n+  }, [socket, node]);\r\n+\r\n+  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setNewCoins(e.target.value);\r\n+  };\r\n+\r\n+  const handleUpdateCoins = async () => {\r\n+    try {\r\n+      setUpdatingCoins(true);\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { coins: newCoins },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Coins updated successfully:\", response.data);\r\n+      setNewCoins(\"\");\r\n+      setShowCoinsPopup(false);\r\n+      setUpdatingCoins(false);\r\n+    } catch (error) {\r\n+      console.error(\"Error updating coins:\", error);\r\n+      setUpdatingCoins(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n+  };\r\n+\r\n   return (\r\n+    <div className={styles.node} onClick={() => onClick(node)}>\r\n+      <div className={styles.icon}>\r\n+        <i className=\"fas fa-user\"></i>\r\n+      </div>\r\n+      <div className={styles.name}>{node.name}</div>\r\n+      <div className={styles.email}>{node.email}</div>\r\n+      <div className={styles.id}>Coins: {node.coins}</div>\r\n+      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+      {!left && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Left Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {!right && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Right Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {left && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {right && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className={styles.sendCoins}>\r\n+        {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n+            <button\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n+            >\r\n+              Update Coins\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const Index: React.FC = () => {\r\n+  const [users, setUsers] = useState<User[]>([]);\r\n+  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n+    null\r\n+  );\r\n+  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n+  const [viewAll, setViewAll] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchUsers = async () => {\r\n+      try {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+        const response = await axios.get(\r\n+          \"https://www.referback.trollsufficient.com/admin/all\",\r\n+          {\r\n+            headers: {\r\n+              Authorization: `Bearer ${token}`,\r\n+              \"Content-Type\": \"application/json\",\r\n+            },\r\n+          }\r\n+        );\r\n+        setUsers(response.data);\r\n+        const map = createBinaryTree(response.data);\r\n+        setUserMap(map);\r\n+\r\n+        if (response.data.length > 0) {\r\n+          setCurrentNode(response.data[0]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching users:\", error);\r\n+      }\r\n+    };\r\n+\r\n+    fetchUsers();\r\n+\r\n+    const socket = io(\"https://www.referback.trollsufficient.com\");\r\n+\r\n+    // Socket.IO event listeners\r\n+    socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n+      setUsers((prevUsers) =>\r\n+        prevUsers.map((user) =>\r\n+          user._id === updatedUser._id ? { ...user, coins: updatedUser.coins } : user\r\n+        )\r\n+      );\r\n+    });\r\n+\r\n+    return () => {\r\n+      socket.disconnect();\r\n+    };\r\n+  }, []);\r\n+\r\n+  const handleNodeClick = (node: User) => {\r\n+    setCurrentNode(node);\r\n+  };\r\n+\r\n+  const handleAddChild = async (\r\n+    parentId: string,\r\n+    selectedOption: \"left\" | \"right\"\r\n+  ) => {\r\n+    try {\r\n+      // Implement add child logic here\r\n+    } catch (error) {\r\n+      console.error(\"Error handling add child:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const renderInitialNodes = (node: User | null) => {\r\n+    if (!node) return null;\r\n+\r\n+    return (\r\n+      <div className={styles.children}>\r\n+        {userMap && userMap.has(node._id) && (\r\n+          <>\r\n+            {userMap.get(node._id)!.left && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.left!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.left!.node}\r\n+                  left={userMap.get(node._id)!.left!.left}\r\n+                  right={userMap.get(node._id)!.left!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {userMap.get(node._id)!.right && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.right!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.right!.node}\r\n+                  left={userMap.get(node._id)!.right!.left}\r\n+                  right={userMap.get(node._id)!.right!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n+    if (!node) return null;\r\n+\r\n+    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n+    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n+\r\n+    return (\r\n+      <div key={node._id}>\r\n+        <TreeNode\r\n+          node={node}\r\n+          left={userMap?.get(node._id)?.left || null}\r\n+          right={userMap?.get(node._id)?.right || null}\r\n+          onClick={handleNodeClick}\r\n+          onAddChild={handleAddChild}\r\n+        />\r\n+        <div className={styles.children}>\r\n+          {leftNode && renderCompleteTree(leftNode)}\r\n+          {rightNode && renderCompleteTree(rightNode)}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n     <div>\r\n-      hh\r\n+      <Navbar />\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n+        </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div key={currentNode._id}>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n+      </div>\r\n     </div>\r\n-  )\r\n-}\r\n+  );\r\n+};\r\n \r\n-export default index\r\n+export default Index;\r\n"
                },
                {
                    "date": 1721306944818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import React, { useEffect, useState } from \"react\";\r\n import styles from \"./index.module.scss\";\r\n import Navbar from \"../../Components/Navbar\";\r\n import axios from \"axios\";\r\n-import io from \"socket.io-client\";\r\n \r\n interface User {\r\n   _id: string;\r\n   name: string;\r\n@@ -56,22 +55,8 @@\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n \r\n-  const socket = io(\"https://www.referback.trollsufficient.com\");\r\n-\r\n-  useEffect(() => {\r\n-    socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n-      if (node._id === updatedUser._id) {\r\n-        node.coins = updatedUser.coins || 0;\r\n-      }\r\n-    });\r\n-\r\n-    return () => {\r\n-      socket.disconnect();\r\n-    };\r\n-  }, [socket, node]);\r\n-\r\n   const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     setNewCoins(e.target.value);\r\n   };\r\n \r\n@@ -95,8 +80,11 @@\n       console.log(\"Coins updated successfully:\", response.data);\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n@@ -215,23 +203,8 @@\n       }\r\n     };\r\n \r\n     fetchUsers();\r\n-\r\n-    const socket = io(\"https://www.referback.trollsufficient.com\");\r\n-\r\n-    // Socket.IO event listeners\r\n-    socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n-      setUsers((prevUsers) =>\r\n-        prevUsers.map((user) =>\r\n-          user._id === updatedUser._id ? { ...user, coins: updatedUser.coins } : user\r\n-        )\r\n-      );\r\n-    });\r\n-\r\n-    return () => {\r\n-      socket.disconnect();\r\n-    };\r\n   }, []);\r\n \r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n@@ -242,8 +215,11 @@\n     selectedOption: \"left\" | \"right\"\r\n   ) => {\r\n     try {\r\n       // Implement add child logic here\r\n+\r\n+      // Reload the page after adding the child to reflect changes\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error handling add child:\", error);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1721307166537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,22 +77,52 @@\n         }\r\n       );\r\n \r\n       console.log(\"Coins updated successfully:\", response.data);\r\n+\r\n+      // Update the coins locally without reloading\r\n+      node.coins = response.data.coins;\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n-\r\n-      // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n   };\r\n \r\n-  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n-    onAddChild(node._id, selectedOption);\r\n+  const handleAddChild = async (selectedOption: \"left\" | \"right\") => {\r\n+    try {\r\n+      // Implement add child logic here\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/add-child/${node._id}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { selectedOption },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Child added successfully:\", response.data);\r\n+\r\n+      // Update the local state if necessary based on your backend response\r\n+      // For example, if the backend returns updated user data, you can update node's leftChild or rightChild\r\n+\r\n+      // Example (update based on your actual response structure):\r\n+      if (selectedOption === \"left\") {\r\n+        node.leftChild = response.data.childId; // Update node's leftChild with the new child's ID\r\n+      } else {\r\n+        node.rightChild = response.data.childId; // Update node's rightChild with the new child's ID\r\n+      }\r\n+\r\n+    } catch (error) {\r\n+      console.error(\"Error adding child:\", error);\r\n+    }\r\n   };\r\n \r\n   return (\r\n     <div className={styles.node} onClick={() => onClick(node)}>\r\n@@ -209,22 +239,8 @@\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n \r\n-  const handleAddChild = async (\r\n-    parentId: string,\r\n-    selectedOption: \"left\" | \"right\"\r\n-  ) => {\r\n-    try {\r\n-      // Implement add child logic here\r\n-\r\n-      // Reload the page after adding the child to reflect changes\r\n-      window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error handling add child:\", error);\r\n-    }\r\n-  };\r\n-\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1721307466280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,40 +89,10 @@\n       setUpdatingCoins(false);\r\n     }\r\n   };\r\n \r\n-  const handleAddChild = async (selectedOption: \"left\" | \"right\") => {\r\n-    try {\r\n-      // Implement add child logic here\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/add-child/${node._id}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { selectedOption },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"Child added successfully:\", response.data);\r\n-\r\n-      // Update the local state if necessary based on your backend response\r\n-      // For example, if the backend returns updated user data, you can update node's leftChild or rightChild\r\n-\r\n-      // Example (update based on your actual response structure):\r\n-      if (selectedOption === \"left\") {\r\n-        node.leftChild = response.data.childId; // Update node's leftChild with the new child's ID\r\n-      } else {\r\n-        node.rightChild = response.data.childId; // Update node's rightChild with the new child's ID\r\n-      }\r\n-\r\n-    } catch (error) {\r\n-      console.error(\"Error adding child:\", error);\r\n-    }\r\n+  const handleAddChildLocal = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n   };\r\n \r\n   return (\r\n     <div className={styles.node} onClick={() => onClick(node)}>\r\n@@ -137,9 +107,9 @@\n       {!left && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n+            onClick={() => handleAddChildLocal(\"left\")}\r\n           >\r\n             <i className=\"fas fa-plus\"></i> Add Left Child\r\n           </button>\r\n         </div>\r\n@@ -148,9 +118,9 @@\n       {!right && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n+            onClick={() => handleAddChildLocal(\"right\")}\r\n           >\r\n             <i className=\"fas fa-plus\"></i> Add Right Child\r\n           </button>\r\n         </div>\r\n@@ -239,8 +209,51 @@\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n \r\n+  const handleAddChild = async (\r\n+    parentId: string,\r\n+    selectedOption: \"left\" | \"right\"\r\n+  ) => {\r\n+    try {\r\n+      // Implement add child logic here\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/add-child/${parentId}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { selectedOption },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Child added successfully:\", response.data);\r\n+\r\n+      // Update user data in local state or refetch if necessary\r\n+\r\n+      // For example, update user data in local state\r\n+      const updatedUsers = users.map((user) =>\r\n+        user._id === parentId\r\n+          ? {\r\n+              ...user,\r\n+              [selectedOption === \"left\" ? \"leftChild\" : \"rightChild\"]: response.data.childId,\r\n+            }\r\n+          : user\r\n+      );\r\n+\r\n+      setUsers(updatedUsers);\r\n+      const updatedMap = createBinaryTree(updatedUsers);\r\n+      setUserMap(updatedMap);\r\n+\r\n+    } catch (error) {\r\n+      console.error(\"Error adding child:\", error);\r\n+    }\r\n+  };\r\n+\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1721364123814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,10 +89,40 @@\n       setUpdatingCoins(false);\r\n     }\r\n   };\r\n \r\n-  const handleAddChildLocal = (selectedOption: \"left\" | \"right\") => {\r\n-    onAddChild(node._id, selectedOption);\r\n+  const handleAddChild = async (selectedOption: \"left\" | \"right\") => {\r\n+    try {\r\n+      // Implement add child logic here\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/add-child/${node._id}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { selectedOption },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Child added successfully:\", response.data);\r\n+\r\n+      // Update the local state if necessary based on your backend response\r\n+      // For example, if the backend returns updated user data, you can update node's leftChild or rightChild\r\n+\r\n+      // Example (update based on your actual response structure):\r\n+      if (selectedOption === \"left\") {\r\n+        node.leftChild = response.data.childId; // Update node's leftChild with the new child's ID\r\n+      } else {\r\n+        node.rightChild = response.data.childId; // Update node's rightChild with the new child's ID\r\n+      }\r\n+\r\n+    } catch (error) {\r\n+      console.error(\"Error adding child:\", error);\r\n+    }\r\n   };\r\n \r\n   return (\r\n     <div className={styles.node} onClick={() => onClick(node)}>\r\n@@ -107,9 +137,9 @@\n       {!left && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n-            onClick={() => handleAddChildLocal(\"left\")}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n           >\r\n             <i className=\"fas fa-plus\"></i> Add Left Child\r\n           </button>\r\n         </div>\r\n@@ -118,9 +148,9 @@\n       {!right && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n-            onClick={() => handleAddChildLocal(\"right\")}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n           >\r\n             <i className=\"fas fa-plus\"></i> Add Right Child\r\n           </button>\r\n         </div>\r\n@@ -209,51 +239,8 @@\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n \r\n-  const handleAddChild = async (\r\n-    parentId: string,\r\n-    selectedOption: \"left\" | \"right\"\r\n-  ) => {\r\n-    try {\r\n-      // Implement add child logic here\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/add-child/${parentId}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { selectedOption },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"Child added successfully:\", response.data);\r\n-\r\n-      // Update user data in local state or refetch if necessary\r\n-\r\n-      // For example, update user data in local state\r\n-      const updatedUsers = users.map((user) =>\r\n-        user._id === parentId\r\n-          ? {\r\n-              ...user,\r\n-              [selectedOption === \"left\" ? \"leftChild\" : \"rightChild\"]: response.data.childId,\r\n-            }\r\n-          : user\r\n-      );\r\n-\r\n-      setUsers(updatedUsers);\r\n-      const updatedMap = createBinaryTree(updatedUsers);\r\n-      setUserMap(updatedMap);\r\n-\r\n-    } catch (error) {\r\n-      console.error(\"Error adding child:\", error);\r\n-    }\r\n-  };\r\n-\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1721364501053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,55 +77,26 @@\n         }\r\n       );\r\n \r\n       console.log(\"Coins updated successfully:\", response.data);\r\n-\r\n-      // Update the coins locally without reloading\r\n-      node.coins = response.data.coins;\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n   };\r\n \r\n-  const handleAddChild = async (selectedOption: \"left\" | \"right\") => {\r\n-    try {\r\n-      // Implement add child logic here\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/add-child/${node._id}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { selectedOption },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"Child added successfully:\", response.data);\r\n-\r\n-      // Update the local state if necessary based on your backend response\r\n-      // For example, if the backend returns updated user data, you can update node's leftChild or rightChild\r\n-\r\n-      // Example (update based on your actual response structure):\r\n-      if (selectedOption === \"left\") {\r\n-        node.leftChild = response.data.childId; // Update node's leftChild with the new child's ID\r\n-      } else {\r\n-        node.rightChild = response.data.childId; // Update node's rightChild with the new child's ID\r\n-      }\r\n-\r\n-    } catch (error) {\r\n-      console.error(\"Error adding child:\", error);\r\n-    }\r\n+  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n   };\r\n \r\n   return (\r\n+    <>\r\n     <div className={styles.node} onClick={() => onClick(node)}>\r\n       <div className={styles.icon}>\r\n         <i className=\"fas fa-user\"></i>\r\n       </div>\r\n@@ -167,37 +138,39 @@\n           <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n         </div>\r\n       )}\r\n \r\n-      <div className={styles.sendCoins}>\r\n-        {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n-            <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n-            >\r\n-              Update Coins\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n+      \r\n+    </div>\r\n+    <div className={styles.sendCoins}>\r\n+    {!showCoinsPopup && (\r\n+      <button\r\n+        className={`${styles.sendCoinsButton} ${\r\n+          updatingCoins ? styles.updating : \"\"\r\n+        }`}\r\n+        onClick={() => setShowCoinsPopup(true)}\r\n+      >\r\n+        Send Coins\r\n+      </button>\r\n+    )}\r\n+    {showCoinsPopup && (\r\n+      <div className={styles.coinsPopup}>\r\n+        <input\r\n+          type=\"number\"\r\n+          placeholder=\"Enter Coins\"\r\n+          value={newCoins}\r\n+          onChange={handleCoinsChange}\r\n+        />\r\n+        <button\r\n+          className={styles.updateCoinsButton}\r\n+          onClick={handleUpdateCoins}\r\n+        >\r\n+          Update Coins\r\n+        </button>\r\n       </div>\r\n-    </div>\r\n+    )}\r\n+  </div>\r\n+  </>\r\n   );\r\n };\r\n \r\n const Index: React.FC = () => {\r\n@@ -239,8 +212,22 @@\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n \r\n+  const handleAddChild = async (\r\n+    parentId: string,\r\n+    selectedOption: \"left\" | \"right\"\r\n+  ) => {\r\n+    try {\r\n+      // Implement add child logic here\r\n+\r\n+      // Reload the page after adding the child to reflect changes\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error handling add child:\", error);\r\n+    }\r\n+  };\r\n+\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1721364564715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,8 @@\n     onAddChild(node._id, selectedOption);\r\n   };\r\n \r\n   return (\r\n-    <>\r\n     <div className={styles.node} onClick={() => onClick(node)}>\r\n       <div className={styles.icon}>\r\n         <i className=\"fas fa-user\"></i>\r\n       </div>\r\n@@ -140,37 +139,9 @@\n       )}\r\n \r\n       \r\n     </div>\r\n-    <div className={styles.sendCoins}>\r\n-    {!showCoinsPopup && (\r\n-      <button\r\n-        className={`${styles.sendCoinsButton} ${\r\n-          updatingCoins ? styles.updating : \"\"\r\n-        }`}\r\n-        onClick={() => setShowCoinsPopup(true)}\r\n-      >\r\n-        Send Coins\r\n-      </button>\r\n-    )}\r\n-    {showCoinsPopup && (\r\n-      <div className={styles.coinsPopup}>\r\n-        <input\r\n-          type=\"number\"\r\n-          placeholder=\"Enter Coins\"\r\n-          value={newCoins}\r\n-          onChange={handleCoinsChange}\r\n-        />\r\n-        <button\r\n-          className={styles.updateCoinsButton}\r\n-          onClick={handleUpdateCoins}\r\n-        >\r\n-          Update Coins\r\n-        </button>\r\n-      </div>\r\n-    )}\r\n-  </div>\r\n-  </>\r\n+    \r\n   );\r\n };\r\n \r\n const Index: React.FC = () => {\r\n"
                },
                {
                    "date": 1721365272889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,362 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import styles from \"./index.module.scss\";\r\n+import axios from \"axios\";\r\n+\r\n+interface User {\r\n+  _id: string;\r\n+  name: string;\r\n+  email: string;\r\n+  password: string;\r\n+  createdAt: string;\r\n+  updatedAt: string;\r\n+  __v: number;\r\n+  leftChild?: string;\r\n+  rightChild?: string;\r\n+  coins?: number;\r\n+  referralCode?: string;\r\n+}\r\n+\r\n+interface TreeNodeProps {\r\n+  node: User;\r\n+  left: TreeNodeProps | null;\r\n+  right: TreeNodeProps | null;\r\n+  onClick: (node: User) => void;\r\n+  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+  onUpdateCoins: (nodeId: string, updatedCoins: number) => void;\r\n+}\r\n+\r\n+const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n+  const userMap = new Map<string, TreeNodeProps>();\r\n+\r\n+  users.forEach((user) => {\r\n+    userMap.set(user._id, { node: user, left: null, right: null });\r\n+  });\r\n+\r\n+  users.forEach((user) => {\r\n+    const node = userMap.get(user._id);\r\n+    if (user.leftChild && userMap.has(user.leftChild)) {\r\n+      node!.left = userMap.get(user.leftChild)!;\r\n+    }\r\n+    if (user.rightChild && userMap.has(user.rightChild)) {\r\n+      node!.right = userMap.get(user.rightChild)!;\r\n+    }\r\n+  });\r\n+\r\n+  return userMap;\r\n+};\r\n+\r\n+const Index: React.FC = () => {\r\n+  const [users, setUsers] = useState<User[]>([]);\r\n+  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n+    null\r\n+  );\r\n+  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n+  const [viewAll, setViewAll] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchUsers = async () => {\r\n+      try {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+        const response = await axios.get(\r\n+          \"https://www.referback.trollsufficient.com/admin/all\",\r\n+          {\r\n+            headers: {\r\n+              Authorization: `Bearer ${token}`,\r\n+              \"Content-Type\": \"application/json\",\r\n+            },\r\n+          }\r\n+        );\r\n+        setUsers(response.data);\r\n+        const map = createBinaryTree(response.data);\r\n+        setUserMap(map);\r\n+\r\n+        if (response.data.length > 0) {\r\n+          setCurrentNode(response.data[0]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching users:\", error);\r\n+      }\r\n+    };\r\n+\r\n+    fetchUsers();\r\n+  }, []);\r\n+\r\n+  const handleNodeClick = (node: User) => {\r\n+    setCurrentNode(node);\r\n+  };\r\n+\r\n+  const handleAddChild = async (\r\n+    parentId: string,\r\n+    selectedOption: \"left\" | \"right\"\r\n+  ) => {\r\n+    try {\r\n+      // Implement add child logic here\r\n+\r\n+      // Example: Mock addition of child node\r\n+      const newChild: User = {\r\n+        _id: `${parentId}_child`,\r\n+        name: `Child of ${parentId}`,\r\n+        email: `child_${parentId}@example.com`,\r\n+        password: \"\",\r\n+        createdAt: new Date().toISOString(),\r\n+        updatedAt: new Date().toISOString(),\r\n+        __v: 0,\r\n+        referralCode: `${parentId}_child_code`,\r\n+      };\r\n+\r\n+      // Example: Update state to include new child node\r\n+      setUsers((prevUsers) => [...prevUsers, newChild]);\r\n+      const updatedMap = createBinaryTree([...users, newChild]);\r\n+      setUserMap(updatedMap);\r\n+\r\n+      // Reload the page after adding the child to reflect changes\r\n+      // window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error handling add child:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleUpdateCoinsLocal = (nodeId: string, updatedCoins: number) => {\r\n+    setUserMap((prevMap) => {\r\n+      if (!prevMap) return null;\r\n+\r\n+      const updatedMap = new Map(prevMap);\r\n+      const nodeToUpdate = updatedMap.get(nodeId);\r\n+\r\n+      if (nodeToUpdate) {\r\n+        nodeToUpdate.node.coins = updatedCoins;\r\n+      }\r\n+\r\n+      return updatedMap;\r\n+    });\r\n+  };\r\n+\r\n+  const renderInitialNodes = (node: User | null) => {\r\n+    if (!node) return null;\r\n+\r\n+    return (\r\n+      <div className={styles.children}>\r\n+        {userMap && userMap.has(node._id) && (\r\n+          <>\r\n+            {userMap.get(node._id)!.left && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.left!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.left!.node}\r\n+                  left={userMap.get(node._id)!.left!.left}\r\n+                  right={userMap.get(node._id)!.left!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                  onUpdateCoins={handleUpdateCoinsLocal}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {userMap.get(node._id)!.right && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.right!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.right!.node}\r\n+                  left={userMap.get(node._id)!.right!.left}\r\n+                  right={userMap.get(node._id)!.right!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                  onUpdateCoins={handleUpdateCoinsLocal}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n+    if (!node) return null;\r\n+\r\n+    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n+    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n+\r\n+    return (\r\n+      <div key={node._id}>\r\n+        <TreeNode\r\n+          node={node}\r\n+          left={userMap?.get(node._id)?.left || null}\r\n+          right={userMap?.get(node._id)?.right || null}\r\n+          onClick={handleNodeClick}\r\n+          onAddChild={handleAddChild}\r\n+          onUpdateCoins={handleUpdateCoinsLocal}\r\n+        />\r\n+        <div className={styles.children}>\r\n+          {leftNode && renderCompleteTree(leftNode)}\r\n+          {rightNode && renderCompleteTree(rightNode)}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n+        </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div key={currentNode._id}>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                    onUpdateCoins={handleUpdateCoinsLocal}\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+const TreeNode: React.FC<TreeNodeProps> = ({\r\n+  node,\r\n+  left,\r\n+  right,\r\n+  onClick,\r\n+  onAddChild,\r\n+  onUpdateCoins,\r\n+}) => {\r\n+  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n+  const [newCoins, setNewCoins] = useState(\"\");\r\n+  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n+\r\n+  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setNewCoins(e.target.value);\r\n+  };\r\n+\r\n+  const handleUpdateCoins = async () => {\r\n+    try {\r\n+      setUpdatingCoins(true);\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { coins: newCoins },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Coins updated successfully:\", response.data);\r\n+\r\n+      // Update the local state to reflect the new coins value\r\n+      onUpdateCoins(node._id, response.data.coins);\r\n+\r\n+      // Close the popup and reset state\r\n+      setNewCoins(\"\");\r\n+      setShowCoinsPopup(false);\r\n+      setUpdatingCoins(false);\r\n+    } catch (error) {\r\n+      console.error(\"Error updating coins:\", error);\r\n+      setUpdatingCoins(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleAddChildLocal = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className={styles.node} onClick={() => onClick(node)}>\r\n+      <div className={styles.icon}>\r\n+        <i className=\"fas fa-user\"></i>\r\n+      </div>\r\n+      <div className={styles.name}>{node.name}</div>\r\n+      <div className={styles.email}>{node.email}</div>\r\n+      <div className={styles.id}>Coins: {node.coins}</div>\r\n+      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+      {!left && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChildLocal(\"left\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Left Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {!right && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChildLocal(\"right\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Right Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {left && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {right && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className={styles.sendCoins}>\r\n+        {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n+            <button\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n+            >\r\n+              Update Coins\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Index;\r\n"
                },
                {
                    "date": 1721365309896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useEffect, useState } from \"react\";\r\n import styles from \"./index.module.scss\";\r\n+import Navbar from \"../../Components/Navbar\";\r\n import axios from \"axios\";\r\n \r\n interface User {\r\n   _id: string;\r\n@@ -21,9 +22,8 @@\n   left: TreeNodeProps | null;\r\n   right: TreeNodeProps | null;\r\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-  onUpdateCoins: (nodeId: string, updatedCoins: number) => void;\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n   const userMap = new Map<string, TreeNodeProps>();\r\n@@ -44,201 +44,14 @@\n \r\n   return userMap;\r\n };\r\n \r\n-const Index: React.FC = () => {\r\n-  const [users, setUsers] = useState<User[]>([]);\r\n-  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n-    null\r\n-  );\r\n-  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n-  const [viewAll, setViewAll] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchUsers = async () => {\r\n-      try {\r\n-        const token = localStorage.getItem(\"accessToken\");\r\n-        const response = await axios.get(\r\n-          \"https://www.referback.trollsufficient.com/admin/all\",\r\n-          {\r\n-            headers: {\r\n-              Authorization: `Bearer ${token}`,\r\n-              \"Content-Type\": \"application/json\",\r\n-            },\r\n-          }\r\n-        );\r\n-        setUsers(response.data);\r\n-        const map = createBinaryTree(response.data);\r\n-        setUserMap(map);\r\n-\r\n-        if (response.data.length > 0) {\r\n-          setCurrentNode(response.data[0]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching users:\", error);\r\n-      }\r\n-    };\r\n-\r\n-    fetchUsers();\r\n-  }, []);\r\n-\r\n-  const handleNodeClick = (node: User) => {\r\n-    setCurrentNode(node);\r\n-  };\r\n-\r\n-  const handleAddChild = async (\r\n-    parentId: string,\r\n-    selectedOption: \"left\" | \"right\"\r\n-  ) => {\r\n-    try {\r\n-      // Implement add child logic here\r\n-\r\n-      // Example: Mock addition of child node\r\n-      const newChild: User = {\r\n-        _id: `${parentId}_child`,\r\n-        name: `Child of ${parentId}`,\r\n-        email: `child_${parentId}@example.com`,\r\n-        password: \"\",\r\n-        createdAt: new Date().toISOString(),\r\n-        updatedAt: new Date().toISOString(),\r\n-        __v: 0,\r\n-        referralCode: `${parentId}_child_code`,\r\n-      };\r\n-\r\n-      // Example: Update state to include new child node\r\n-      setUsers((prevUsers) => [...prevUsers, newChild]);\r\n-      const updatedMap = createBinaryTree([...users, newChild]);\r\n-      setUserMap(updatedMap);\r\n-\r\n-      // Reload the page after adding the child to reflect changes\r\n-      // window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error handling add child:\", error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleUpdateCoinsLocal = (nodeId: string, updatedCoins: number) => {\r\n-    setUserMap((prevMap) => {\r\n-      if (!prevMap) return null;\r\n-\r\n-      const updatedMap = new Map(prevMap);\r\n-      const nodeToUpdate = updatedMap.get(nodeId);\r\n-\r\n-      if (nodeToUpdate) {\r\n-        nodeToUpdate.node.coins = updatedCoins;\r\n-      }\r\n-\r\n-      return updatedMap;\r\n-    });\r\n-  };\r\n-\r\n-  const renderInitialNodes = (node: User | null) => {\r\n-    if (!node) return null;\r\n-\r\n-    return (\r\n-      <div className={styles.children}>\r\n-        {userMap && userMap.has(node._id) && (\r\n-          <>\r\n-            {userMap.get(node._id)!.left && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.left!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.left!.node}\r\n-                  left={userMap.get(node._id)!.left!.left}\r\n-                  right={userMap.get(node._id)!.left!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                  onUpdateCoins={handleUpdateCoinsLocal}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-            {userMap.get(node._id)!.right && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.right!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.right!.node}\r\n-                  left={userMap.get(node._id)!.right!.left}\r\n-                  right={userMap.get(node._id)!.right!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                  onUpdateCoins={handleUpdateCoinsLocal}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-          </>\r\n-        )}\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n-    if (!node) return null;\r\n-\r\n-    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n-    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n-\r\n-    return (\r\n-      <div key={node._id}>\r\n-        <TreeNode\r\n-          node={node}\r\n-          left={userMap?.get(node._id)?.left || null}\r\n-          right={userMap?.get(node._id)?.right || null}\r\n-          onClick={handleNodeClick}\r\n-          onAddChild={handleAddChild}\r\n-          onUpdateCoins={handleUpdateCoinsLocal}\r\n-        />\r\n-        <div className={styles.children}>\r\n-          {leftNode && renderCompleteTree(leftNode)}\r\n-          {rightNode && renderCompleteTree(rightNode)}\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      <div className={styles.container}>\r\n-        <div className={styles.buttonWrapper}>\r\n-          <button\r\n-            className={styles.toggleButton}\r\n-            onClick={() => setViewAll(!viewAll)}\r\n-          >\r\n-            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n-          </button>\r\n-        </div>\r\n-        <div className={styles.treeContainer}>\r\n-          {viewAll\r\n-            ? renderCompleteTree(currentNode)\r\n-            : currentNode && (\r\n-                <div key={currentNode._id}>\r\n-                  <TreeNode\r\n-                    node={currentNode}\r\n-                    left={userMap?.get(currentNode._id)?.left || null}\r\n-                    right={userMap?.get(currentNode._id)?.right || null}\r\n-                    onClick={handleNodeClick}\r\n-                    onAddChild={handleAddChild}\r\n-                    onUpdateCoins={handleUpdateCoinsLocal}\r\n-                  />\r\n-                  {renderInitialNodes(currentNode)}\r\n-                </div>\r\n-              )}\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n const TreeNode: React.FC<TreeNodeProps> = ({\r\n   node,\r\n   left,\r\n   right,\r\n   onClick,\r\n   onAddChild,\r\n-  onUpdateCoins,\r\n }) => {\r\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n@@ -264,23 +77,21 @@\n         }\r\n       );\r\n \r\n       console.log(\"Coins updated successfully:\", response.data);\r\n-\r\n-      // Update the local state to reflect the new coins value\r\n-      onUpdateCoins(node._id, response.data.coins);\r\n-\r\n-      // Close the popup and reset state\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n   };\r\n \r\n-  const handleAddChildLocal = (selectedOption: \"left\" | \"right\") => {\r\n+  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n     onAddChild(node._id, selectedOption);\r\n   };\r\n \r\n   return (\r\n@@ -296,9 +107,9 @@\n       {!left && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n-            onClick={() => handleAddChildLocal(\"left\")}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n           >\r\n             <i className=\"fas fa-plus\"></i> Add Left Child\r\n           </button>\r\n         </div>\r\n@@ -307,9 +118,9 @@\n       {!right && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n-            onClick={() => handleAddChildLocal(\"right\")}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n           >\r\n             <i className=\"fas fa-plus\"></i> Add Right Child\r\n           </button>\r\n         </div>\r\n@@ -358,155 +169,8 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\r\n-import React, { useEffect, useState } from \"react\";\r\n-import styles from \"./index.module.scss\";\r\n-import Navbar from \"../../Components/Navbar\";\r\n-import axios from \"axios\";\r\n-\r\n-interface User {\r\n-  _id: string;\r\n-  name: string;\r\n-  email: string;\r\n-  password: string;\r\n-  createdAt: string;\r\n-  updatedAt: string;\r\n-  __v: number;\r\n-  leftChild?: string;\r\n-  rightChild?: string;\r\n-  coins?: number;\r\n-  referralCode?: string;\r\n-}\r\n-\r\n-interface TreeNodeProps {\r\n-  node: User;\r\n-  left: TreeNodeProps | null;\r\n-  right: TreeNodeProps | null;\r\n-  onClick: (node: User) => void;\r\n-  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-}\r\n-\r\n-const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, TreeNodeProps>();\r\n-\r\n-  users.forEach((user) => {\r\n-    userMap.set(user._id, { node: user, left: null, right: null });\r\n-  });\r\n-\r\n-  users.forEach((user) => {\r\n-    const node = userMap.get(user._id);\r\n-    if (user.leftChild && userMap.has(user.leftChild)) {\r\n-      node!.left = userMap.get(user.leftChild)!;\r\n-    }\r\n-    if (user.rightChild && userMap.has(user.rightChild)) {\r\n-      node!.right = userMap.get(user.rightChild)!;\r\n-    }\r\n-  });\r\n-\r\n-  return userMap;\r\n-};\r\n-\r\n-const TreeNode: React.FC<TreeNodeProps> = ({\r\n-  node,\r\n-  left,\r\n-  right,\r\n-  onClick,\r\n-  onAddChild,\r\n-}) => {\r\n-  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n-  const [newCoins, setNewCoins] = useState(\"\");\r\n-  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n-\r\n-  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    setNewCoins(e.target.value);\r\n-  };\r\n-\r\n-  const handleUpdateCoins = async () => {\r\n-    try {\r\n-      setUpdatingCoins(true);\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { coins: newCoins },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"Coins updated successfully:\", response.data);\r\n-      setNewCoins(\"\");\r\n-      setShowCoinsPopup(false);\r\n-      setUpdatingCoins(false);\r\n-\r\n-      // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error updating coins:\", error);\r\n-      setUpdatingCoins(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n-    onAddChild(node._id, selectedOption);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className={styles.node} onClick={() => onClick(node)}>\r\n-      <div className={styles.icon}>\r\n-        <i className=\"fas fa-user\"></i>\r\n-      </div>\r\n-      <div className={styles.name}>{node.name}</div>\r\n-      <div className={styles.email}>{node.email}</div>\r\n-      <div className={styles.id}>Coins: {node.coins}</div>\r\n-      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n-\r\n-      {!left && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Left Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {!right && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Right Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {left && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {right && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      \r\n-    </div>\r\n-    \r\n-  );\r\n-};\r\n-\r\n const Index: React.FC = () => {\r\n   const [users, setUsers] = useState<User[]>([]);\r\n   const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n     null\r\n"
                },
                {
                    "date": 1721365430336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,18 +138,9 @@\n         </div>\r\n       )}\r\n \r\n       <div className={styles.sendCoins}>\r\n-        {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n+       \r\n         {showCoinsPopup && (\r\n           <div className={styles.coinsPopup}>\r\n             <input\r\n               type=\"number\"\r\n@@ -165,8 +156,18 @@\n             </button>\r\n           </div>\r\n         )}\r\n       </div>\r\n+      {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1721365477889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,9 @@\n     onAddChild(node._id, selectedOption);\r\n   };\r\n \r\n   return (\r\n+    <>\r\n     <div className={styles.node} onClick={() => onClick(node)}>\r\n       <div className={styles.icon}>\r\n         <i className=\"fas fa-user\"></i>\r\n       </div>\r\n@@ -156,9 +157,11 @@\n             </button>\r\n           </div>\r\n         )}\r\n       </div>\r\n-      {!showCoinsPopup && (\r\n+      \r\n+    </div>\r\n+    {!showCoinsPopup && (\r\n           <button\r\n             className={`${styles.sendCoinsButton} ${\r\n               updatingCoins ? styles.updating : \"\"\r\n             }`}\r\n@@ -166,9 +169,9 @@\n           >\r\n             Send Coins\r\n           </button>\r\n         )}\r\n-    </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n const Index: React.FC = () => {\r\n"
                },
                {
                    "date": 1721366133403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,343 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import styles from \"./index.module.scss\";\r\n+import Navbar from \"../../Components/Navbar\";\r\n+import axios from \"axios\";\r\n+\r\n+interface User {\r\n+  _id: string;\r\n+  name: string;\r\n+  email: string;\r\n+  password: string;\r\n+  createdAt: string;\r\n+  updatedAt: string;\r\n+  __v: number;\r\n+  leftChild?: string;\r\n+  rightChild?: string;\r\n+  coins?: number;\r\n+  referralCode?: string;\r\n+}\r\n+\r\n+interface TreeNodeProps {\r\n+  node: User;\r\n+  left: TreeNodeProps | null;\r\n+  right: TreeNodeProps | null;\r\n+  onClick: (node: User) => void;\r\n+  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+}\r\n+\r\n+const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n+  const userMap = new Map<string, TreeNodeProps>();\r\n+\r\n+  users.forEach((user) => {\r\n+    userMap.set(user._id, { node: user, left: null, right: null });\r\n+  });\r\n+\r\n+  users.forEach((user) => {\r\n+    const node = userMap.get(user._id);\r\n+    if (user.leftChild && userMap.has(user.leftChild)) {\r\n+      node!.left = userMap.get(user.leftChild)!;\r\n+    }\r\n+    if (user.rightChild && userMap.has(user.rightChild)) {\r\n+      node!.right = userMap.get(user.rightChild)!;\r\n+    }\r\n+  });\r\n+\r\n+  return userMap;\r\n+};\r\n+\r\n+const TreeNode: React.FC<TreeNodeProps> = ({\r\n+  node,\r\n+  left,\r\n+  right,\r\n+  onClick,\r\n+  onAddChild,\r\n+}) => {\r\n+  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n+  const [newCoins, setNewCoins] = useState(\"\");\r\n+  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n+\r\n+  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setNewCoins(e.target.value);\r\n+  };\r\n+\r\n+  const handleUpdateCoins = async () => {\r\n+    try {\r\n+      setUpdatingCoins(true);\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { coins: newCoins },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Coins updated successfully:\", response.data);\r\n+      setNewCoins(\"\");\r\n+      setShowCoinsPopup(false);\r\n+      setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error updating coins:\", error);\r\n+      setUpdatingCoins(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+    <div className={styles.node} onClick={() => onClick(node)}>\r\n+      <div className={styles.icon}>\r\n+        <i className=\"fas fa-user\"></i>\r\n+      </div>\r\n+      <div className={styles.name}>{node.name}</div>\r\n+      <div className={styles.email}>{node.email}</div>\r\n+      <div className={styles.id}>Coins: {node.coins}</div>\r\n+      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+      {!left && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Left Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {!right && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Right Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {left && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {right && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className={styles.sendCoins}>\r\n+       \r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n+            <button\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n+            >\r\n+              Update Coins\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+      \r\n+    </div>\r\n+    {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+const Index: React.FC = () => {\r\n+  const [users, setUsers] = useState<User[]>([]);\r\n+  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n+    null\r\n+  );\r\n+  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n+  const [viewAll, setViewAll] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchUsers = async () => {\r\n+      try {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+        const response = await axios.get(\r\n+          \"https://www.referback.trollsufficient.com/admin/all\",\r\n+          {\r\n+            headers: {\r\n+              Authorization: `Bearer ${token}`,\r\n+              \"Content-Type\": \"application/json\",\r\n+            },\r\n+          }\r\n+        );\r\n+        setUsers(response.data);\r\n+        const map = createBinaryTree(response.data);\r\n+        setUserMap(map);\r\n+\r\n+        const email =localStorage.getItem('emails')\r\n+  // Fetch user's coins\r\n+  const coinsResponse = await axios.post(\r\n+    'https://www.referback.trollsufficient.com/admin/coins',\r\n+    { email },\r\n+  );\r\n+\r\n+  // Log the entire response to check its structure\r\n+  // console.log('coinsResponse:', coinsResponse);\r\n+\r\n+  const userCoins = coinsResponse.data.Coins;\r\n+\r\n+  localStorage.setItem('userCoins', userCoins); \r\n+\r\n+\r\n+        if (response.data.length > 0) {\r\n+          setCurrentNode(response.data[0]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching users:\", error);\r\n+      }\r\n+    };\r\n+\r\n+    fetchUsers();\r\n+  }, []);\r\n+\r\n+  const handleNodeClick = (node: User) => {\r\n+    setCurrentNode(node);\r\n+  };\r\n+\r\n+  const handleAddChild = async (\r\n+    parentId: string,\r\n+    selectedOption: \"left\" | \"right\"\r\n+  ) => {\r\n+    try {\r\n+      // Implement add child logic here\r\n+\r\n+      // Reload the page after adding the child to reflect changes\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error handling add child:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const renderInitialNodes = (node: User | null) => {\r\n+    if (!node) return null;\r\n+\r\n+    return (\r\n+      <div className={styles.children}>\r\n+        {userMap && userMap.has(node._id) && (\r\n+          <>\r\n+            {userMap.get(node._id)!.left && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.left!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.left!.node}\r\n+                  left={userMap.get(node._id)!.left!.left}\r\n+                  right={userMap.get(node._id)!.left!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {userMap.get(node._id)!.right && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.right!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.right!.node}\r\n+                  left={userMap.get(node._id)!.right!.left}\r\n+                  right={userMap.get(node._id)!.right!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n+    if (!node) return null;\r\n+\r\n+    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n+    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n+\r\n+    return (\r\n+      <div key={node._id}>\r\n+        <TreeNode\r\n+          node={node}\r\n+          left={userMap?.get(node._id)?.left || null}\r\n+          right={userMap?.get(node._id)?.right || null}\r\n+          onClick={handleNodeClick}\r\n+          onAddChild={handleAddChild}\r\n+        />\r\n+        <div className={styles.children}>\r\n+          {leftNode && renderCompleteTree(leftNode)}\r\n+          {rightNode && renderCompleteTree(rightNode)}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <Navbar />\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n+        </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div key={currentNode._id}>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Index;\r\n"
                },
                {
                    "date": 1721366144406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,8 +199,9 @@\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n         const email =localStorage.getItem('emails')\r\n+        console.log(\"aaa\",email)\r\n   // Fetch user's coins\r\n   const coinsResponse = await axios.post(\r\n     'https://www.referback.trollsufficient.com/admin/coins',\r\n     { email },\r\n@@ -340,332 +341,4 @@\n   );\r\n };\r\n \r\n export default Index;\r\n-import React, { useEffect, useState } from \"react\";\r\n-import styles from \"./index.module.scss\";\r\n-import Navbar from \"../../Components/Navbar\";\r\n-import axios from \"axios\";\r\n-\r\n-interface User {\r\n-  _id: string;\r\n-  name: string;\r\n-  email: string;\r\n-  password: string;\r\n-  createdAt: string;\r\n-  updatedAt: string;\r\n-  __v: number;\r\n-  leftChild?: string;\r\n-  rightChild?: string;\r\n-  coins?: number;\r\n-  referralCode?: string;\r\n-}\r\n-\r\n-interface TreeNodeProps {\r\n-  node: User;\r\n-  left: TreeNodeProps | null;\r\n-  right: TreeNodeProps | null;\r\n-  onClick: (node: User) => void;\r\n-  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-}\r\n-\r\n-const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, TreeNodeProps>();\r\n-\r\n-  users.forEach((user) => {\r\n-    userMap.set(user._id, { node: user, left: null, right: null });\r\n-  });\r\n-\r\n-  users.forEach((user) => {\r\n-    const node = userMap.get(user._id);\r\n-    if (user.leftChild && userMap.has(user.leftChild)) {\r\n-      node!.left = userMap.get(user.leftChild)!;\r\n-    }\r\n-    if (user.rightChild && userMap.has(user.rightChild)) {\r\n-      node!.right = userMap.get(user.rightChild)!;\r\n-    }\r\n-  });\r\n-\r\n-  return userMap;\r\n-};\r\n-\r\n-const TreeNode: React.FC<TreeNodeProps> = ({\r\n-  node,\r\n-  left,\r\n-  right,\r\n-  onClick,\r\n-  onAddChild,\r\n-}) => {\r\n-  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n-  const [newCoins, setNewCoins] = useState(\"\");\r\n-  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n-\r\n-  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    setNewCoins(e.target.value);\r\n-  };\r\n-\r\n-  const handleUpdateCoins = async () => {\r\n-    try {\r\n-      setUpdatingCoins(true);\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { coins: newCoins },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"Coins updated successfully:\", response.data);\r\n-      setNewCoins(\"\");\r\n-      setShowCoinsPopup(false);\r\n-      setUpdatingCoins(false);\r\n-\r\n-      // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error updating coins:\", error);\r\n-      setUpdatingCoins(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n-    onAddChild(node._id, selectedOption);\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-    <div className={styles.node} onClick={() => onClick(node)}>\r\n-      <div className={styles.icon}>\r\n-        <i className=\"fas fa-user\"></i>\r\n-      </div>\r\n-      <div className={styles.name}>{node.name}</div>\r\n-      <div className={styles.email}>{node.email}</div>\r\n-      <div className={styles.id}>Coins: {node.coins}</div>\r\n-      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n-\r\n-      {!left && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Left Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {!right && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Right Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {left && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {right && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      <div className={styles.sendCoins}>\r\n-       \r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n-            <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n-            >\r\n-              Update Coins\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n-      \r\n-    </div>\r\n-    {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-const Index: React.FC = () => {\r\n-  const [users, setUsers] = useState<User[]>([]);\r\n-  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n-    null\r\n-  );\r\n-  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n-  const [viewAll, setViewAll] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchUsers = async () => {\r\n-      try {\r\n-        const token = localStorage.getItem(\"accessToken\");\r\n-        const response = await axios.get(\r\n-          \"https://www.referback.trollsufficient.com/admin/all\",\r\n-          {\r\n-            headers: {\r\n-              Authorization: `Bearer ${token}`,\r\n-              \"Content-Type\": \"application/json\",\r\n-            },\r\n-          }\r\n-        );\r\n-        setUsers(response.data);\r\n-        const map = createBinaryTree(response.data);\r\n-        setUserMap(map);\r\n-\r\n-        if (response.data.length > 0) {\r\n-          setCurrentNode(response.data[0]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching users:\", error);\r\n-      }\r\n-    };\r\n-\r\n-    fetchUsers();\r\n-  }, []);\r\n-\r\n-  const handleNodeClick = (node: User) => {\r\n-    setCurrentNode(node);\r\n-  };\r\n-\r\n-  const handleAddChild = async (\r\n-    parentId: string,\r\n-    selectedOption: \"left\" | \"right\"\r\n-  ) => {\r\n-    try {\r\n-      // Implement add child logic here\r\n-\r\n-      // Reload the page after adding the child to reflect changes\r\n-      window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error handling add child:\", error);\r\n-    }\r\n-  };\r\n-\r\n-  const renderInitialNodes = (node: User | null) => {\r\n-    if (!node) return null;\r\n-\r\n-    return (\r\n-      <div className={styles.children}>\r\n-        {userMap && userMap.has(node._id) && (\r\n-          <>\r\n-            {userMap.get(node._id)!.left && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.left!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.left!.node}\r\n-                  left={userMap.get(node._id)!.left!.left}\r\n-                  right={userMap.get(node._id)!.left!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-            {userMap.get(node._id)!.right && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.right!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.right!.node}\r\n-                  left={userMap.get(node._id)!.right!.left}\r\n-                  right={userMap.get(node._id)!.right!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-          </>\r\n-        )}\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n-    if (!node) return null;\r\n-\r\n-    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n-    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n-\r\n-    return (\r\n-      <div key={node._id}>\r\n-        <TreeNode\r\n-          node={node}\r\n-          left={userMap?.get(node._id)?.left || null}\r\n-          right={userMap?.get(node._id)?.right || null}\r\n-          onClick={handleNodeClick}\r\n-          onAddChild={handleAddChild}\r\n-        />\r\n-        <div className={styles.children}>\r\n-          {leftNode && renderCompleteTree(leftNode)}\r\n-          {rightNode && renderCompleteTree(rightNode)}\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      <Navbar />\r\n-      <div className={styles.container}>\r\n-        <div className={styles.buttonWrapper}>\r\n-          <button\r\n-            className={styles.toggleButton}\r\n-            onClick={() => setViewAll(!viewAll)}\r\n-          >\r\n-            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n-          </button>\r\n-        </div>\r\n-        <div className={styles.treeContainer}>\r\n-          {viewAll\r\n-            ? renderCompleteTree(currentNode)\r\n-            : currentNode && (\r\n-                <div key={currentNode._id}>\r\n-                  <TreeNode\r\n-                    node={currentNode}\r\n-                    left={userMap?.get(currentNode._id)?.left || null}\r\n-                    right={userMap?.get(currentNode._id)?.right || null}\r\n-                    onClick={handleNodeClick}\r\n-                    onAddChild={handleAddChild}\r\n-                  />\r\n-                  {renderInitialNodes(currentNode)}\r\n-                </div>\r\n-              )}\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Index;\r\n"
                },
                {
                    "date": 1721366446658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,10 +212,10 @@\n \r\n   const userCoins = coinsResponse.data.Coins;\r\n \r\n   localStorage.setItem('userCoins', userCoins); \r\n+ console.log(userCoins)\r\n \r\n-\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n"
                },
                {
                    "date": 1721366928712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,10 +81,14 @@\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n-      // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n+      // Update userCoins in localStorage after successful update\r\n+      localStorage.setItem(\"userCoins\", response.data.Coins);\r\n+\r\n+      // Trigger a custom event to notify other parts of the application\r\n+      const event = new Event(\"userCoinsUpdated\");\r\n+      window.dispatchEvent(event);\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n@@ -95,82 +99,80 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-    <div className={styles.node} onClick={() => onClick(node)}>\r\n-      <div className={styles.icon}>\r\n-        <i className=\"fas fa-user\"></i>\r\n-      </div>\r\n-      <div className={styles.name}>{node.name}</div>\r\n-      <div className={styles.email}>{node.email}</div>\r\n-      <div className={styles.id}>Coins: {node.coins}</div>\r\n-      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n-\r\n-      {!left && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Left Child\r\n-          </button>\r\n+      <div className={styles.node} onClick={() => onClick(node)}>\r\n+        <div className={styles.icon}>\r\n+          <i className=\"fas fa-user\"></i>\r\n         </div>\r\n-      )}\r\n+        <div className={styles.name}>{node.name}</div>\r\n+        <div className={styles.email}>{node.email}</div>\r\n+        <div className={styles.id}>Coins: {node.coins}</div>\r\n+        <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n \r\n-      {!right && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Right Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n+        {!left && (\r\n+          <div className={styles.addChild}>\r\n+            <button\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"left\")}\r\n+            >\r\n+              <i className=\"fas fa-plus\"></i> Add Left Child\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n \r\n-      {left && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {right && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      <div className={styles.sendCoins}>\r\n-       \r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n+        {!right && (\r\n+          <div className={styles.addChild}>\r\n             <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"right\")}\r\n             >\r\n-              Update Coins\r\n+              <i className=\"fas fa-plus\"></i> Add Right Child\r\n             </button>\r\n           </div>\r\n         )}\r\n+\r\n+        {left && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+          </div>\r\n+        )}\r\n+\r\n+        {right && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+          </div>\r\n+        )}\r\n+\r\n+        <div className={styles.sendCoins}>\r\n+          {showCoinsPopup && (\r\n+            <div className={styles.coinsPopup}>\r\n+              <input\r\n+                type=\"number\"\r\n+                placeholder=\"Enter Coins\"\r\n+                value={newCoins}\r\n+                onChange={handleCoinsChange}\r\n+              />\r\n+              <button\r\n+                className={styles.updateCoinsButton}\r\n+                onClick={handleUpdateCoins}\r\n+              >\r\n+                Update Coins\r\n+              </button>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n-      \r\n-    </div>\r\n-    {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n+      {!showCoinsPopup && (\r\n+        <button\r\n+          className={`${styles.sendCoinsButton} ${\r\n+            updatingCoins ? styles.updating : \"\"\r\n+          }`}\r\n+          onClick={() => setShowCoinsPopup(true)}\r\n+        >\r\n+          Send Coins\r\n+        </button>\r\n+      )}\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -198,24 +200,8 @@\n         setUsers(response.data);\r\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n-        const email =localStorage.getItem('emails')\r\n-        console.log(\"aaa\",email)\r\n-  // Fetch user's coins\r\n-  const coinsResponse = await axios.post(\r\n-    'https://www.referback.trollsufficient.com/admin/coins',\r\n-    { email },\r\n-  );\r\n-\r\n-  // Log the entire response to check its structure\r\n-  // console.log('coinsResponse:', coinsResponse);\r\n-\r\n-  const userCoins = coinsResponse.data.Coins;\r\n-\r\n-  localStorage.setItem('userCoins', userCoins); \r\n- console.log(userCoins)\r\n-\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n"
                },
                {
                    "date": 1721367039645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,14 +81,10 @@\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n-      // Update userCoins in localStorage after successful update\r\n-      localStorage.setItem(\"userCoins\", response.data.Coins);\r\n-\r\n-      // Trigger a custom event to notify other parts of the application\r\n-      const event = new Event(\"userCoinsUpdated\");\r\n-      window.dispatchEvent(event);\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n@@ -99,80 +95,82 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      <div className={styles.node} onClick={() => onClick(node)}>\r\n-        <div className={styles.icon}>\r\n-          <i className=\"fas fa-user\"></i>\r\n+    <div className={styles.node} onClick={() => onClick(node)}>\r\n+      <div className={styles.icon}>\r\n+        <i className=\"fas fa-user\"></i>\r\n+      </div>\r\n+      <div className={styles.name}>{node.name}</div>\r\n+      <div className={styles.email}>{node.email}</div>\r\n+      <div className={styles.id}>Coins: {node.coins}</div>\r\n+      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+      {!left && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Left Child\r\n+          </button>\r\n         </div>\r\n-        <div className={styles.name}>{node.name}</div>\r\n-        <div className={styles.email}>{node.email}</div>\r\n-        <div className={styles.id}>Coins: {node.coins}</div>\r\n-        <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+      )}\r\n \r\n-        {!left && (\r\n-          <div className={styles.addChild}>\r\n-            <button\r\n-              className={styles.addChildButton}\r\n-              onClick={() => handleAddChild(\"left\")}\r\n-            >\r\n-              <i className=\"fas fa-plus\"></i> Add Left Child\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n+      {!right && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Right Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n \r\n-        {!right && (\r\n-          <div className={styles.addChild}>\r\n+      {left && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {right && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className={styles.sendCoins}>\r\n+       \r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n             <button\r\n-              className={styles.addChildButton}\r\n-              onClick={() => handleAddChild(\"right\")}\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n             >\r\n-              <i className=\"fas fa-plus\"></i> Add Right Child\r\n+              Update Coins\r\n             </button>\r\n           </div>\r\n         )}\r\n-\r\n-        {left && (\r\n-          <div className={styles.lineWrapper}>\r\n-            <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-          </div>\r\n+      </div>\r\n+      \r\n+    </div>\r\n+    {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n         )}\r\n-\r\n-        {right && (\r\n-          <div className={styles.lineWrapper}>\r\n-            <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-          </div>\r\n-        )}\r\n-\r\n-        <div className={styles.sendCoins}>\r\n-          {showCoinsPopup && (\r\n-            <div className={styles.coinsPopup}>\r\n-              <input\r\n-                type=\"number\"\r\n-                placeholder=\"Enter Coins\"\r\n-                value={newCoins}\r\n-                onChange={handleCoinsChange}\r\n-              />\r\n-              <button\r\n-                className={styles.updateCoinsButton}\r\n-                onClick={handleUpdateCoins}\r\n-              >\r\n-                Update Coins\r\n-              </button>\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n-      </div>\r\n-      {!showCoinsPopup && (\r\n-        <button\r\n-          className={`${styles.sendCoinsButton} ${\r\n-            updatingCoins ? styles.updating : \"\"\r\n-          }`}\r\n-          onClick={() => setShowCoinsPopup(true)}\r\n-        >\r\n-          Send Coins\r\n-        </button>\r\n-      )}\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -200,8 +198,24 @@\n         setUsers(response.data);\r\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n+        const email =localStorage.getItem('emails')\r\n+        console.log(\"aaa\",email)\r\n+  // Fetch user's coins\r\n+  const coinsResponse = await axios.post(\r\n+    'https://www.referback.trollsufficient.com/admin/coins',\r\n+    { email },\r\n+  );\r\n+\r\n+  // Log the entire response to check its structure\r\n+  // console.log('coinsResponse:', coinsResponse);\r\n+\r\n+  const userCoins = coinsResponse.data.Coins;\r\n+\r\n+  localStorage.setItem('userCoins', userCoins); \r\n+ console.log(userCoins)\r\n+\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n"
                },
                {
                    "date": 1721367808891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n   };\r\n \r\n   return (\r\n     <div>\r\n-      <Navbar />\r\n+      <Navbar coins={coins} />\r\n       <div className={styles.container}>\r\n         <div className={styles.buttonWrapper}>\r\n           <button\r\n             className={styles.toggleButton}\r\n"
                },
                {
                    "date": 1721367868627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,344 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import styles from \"./index.module.scss\";\r\n+import Navbar from \"../../Components/Navbar\";\r\n+import axios from \"axios\";\r\n+\r\n+interface User {\r\n+  _id: string;\r\n+  name: string;\r\n+  email: string;\r\n+  password: string;\r\n+  createdAt: string;\r\n+  updatedAt: string;\r\n+  __v: number;\r\n+  leftChild?: string;\r\n+  rightChild?: string;\r\n+  coins?: number;\r\n+  referralCode?: string;\r\n+}\r\n+\r\n+interface TreeNodeProps {\r\n+  node: User;\r\n+  left: TreeNodeProps | null;\r\n+  right: TreeNodeProps | null;\r\n+  onClick: (node: User) => void;\r\n+  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+}\r\n+\r\n+const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n+  const userMap = new Map<string, TreeNodeProps>();\r\n+\r\n+  users.forEach((user) => {\r\n+    userMap.set(user._id, { node: user, left: null, right: null });\r\n+  });\r\n+\r\n+  users.forEach((user) => {\r\n+    const node = userMap.get(user._id);\r\n+    if (user.leftChild && userMap.has(user.leftChild)) {\r\n+      node!.left = userMap.get(user.leftChild)!;\r\n+    }\r\n+    if (user.rightChild && userMap.has(user.rightChild)) {\r\n+      node!.right = userMap.get(user.rightChild)!;\r\n+    }\r\n+  });\r\n+\r\n+  return userMap;\r\n+};\r\n+\r\n+const TreeNode: React.FC<TreeNodeProps> = ({\r\n+  node,\r\n+  left,\r\n+  right,\r\n+  onClick,\r\n+  onAddChild,\r\n+}) => {\r\n+  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n+  const [newCoins, setNewCoins] = useState(\"\");\r\n+  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n+\r\n+  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setNewCoins(e.target.value);\r\n+  };\r\n+\r\n+  const handleUpdateCoins = async () => {\r\n+    try {\r\n+      setUpdatingCoins(true);\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { coins: newCoins },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Coins updated successfully:\", response.data);\r\n+      setNewCoins(\"\");\r\n+      setShowCoinsPopup(false);\r\n+      setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error updating coins:\", error);\r\n+      setUpdatingCoins(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+    <div className={styles.node} onClick={() => onClick(node)}>\r\n+      <div className={styles.icon}>\r\n+        <i className=\"fas fa-user\"></i>\r\n+      </div>\r\n+      <div className={styles.name}>{node.name}</div>\r\n+      <div className={styles.email}>{node.email}</div>\r\n+      <div className={styles.id}>Coins: {node.coins}</div>\r\n+      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+      {!left && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Left Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {!right && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Right Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {left && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {right && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className={styles.sendCoins}>\r\n+       \r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n+            <button\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n+            >\r\n+              Update Coins\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n+      \r\n+    </div>\r\n+    {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+const Index: React.FC = () => {\r\n+  const [users, setUsers] = useState<User[]>([]);\r\n+  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n+    null\r\n+  );\r\n+  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n+  const [viewAll, setViewAll] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchUsers = async () => {\r\n+      try {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+        const response = await axios.get(\r\n+          \"https://www.referback.trollsufficient.com/admin/all\",\r\n+          {\r\n+            headers: {\r\n+              Authorization: `Bearer ${token}`,\r\n+              \"Content-Type\": \"application/json\",\r\n+            },\r\n+          }\r\n+        );\r\n+        setUsers(response.data);\r\n+        const map = createBinaryTree(response.data);\r\n+        setUserMap(map);\r\n+\r\n+        const email =localStorage.getItem('emails')\r\n+        console.log(\"aaa\",email)\r\n+  // Fetch user's coins\r\n+  const coinsResponse = await axios.post(\r\n+    'https://www.referback.trollsufficient.com/admin/coins',\r\n+    { email },\r\n+  );\r\n+\r\n+  // Log the entire response to check its structure\r\n+  // console.log('coinsResponse:', coinsResponse);\r\n+\r\n+  const userCoins = coinsResponse.data.Coins;\r\n+\r\n+  localStorage.setItem('userCoins', userCoins); \r\n+ console.log(userCoins)\r\n+\r\n+        if (response.data.length > 0) {\r\n+          setCurrentNode(response.data[0]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching users:\", error);\r\n+      }\r\n+    };\r\n+\r\n+    fetchUsers();\r\n+  }, []);\r\n+\r\n+  const handleNodeClick = (node: User) => {\r\n+    setCurrentNode(node);\r\n+  };\r\n+\r\n+  const handleAddChild = async (\r\n+    parentId: string,\r\n+    selectedOption: \"left\" | \"right\"\r\n+  ) => {\r\n+    try {\r\n+      // Implement add child logic here\r\n+\r\n+      // Reload the page after adding the child to reflect changes\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error handling add child:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const renderInitialNodes = (node: User | null) => {\r\n+    if (!node) return null;\r\n+\r\n+    return (\r\n+      <div className={styles.children}>\r\n+        {userMap && userMap.has(node._id) && (\r\n+          <>\r\n+            {userMap.get(node._id)!.left && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.left!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.left!.node}\r\n+                  left={userMap.get(node._id)!.left!.left}\r\n+                  right={userMap.get(node._id)!.left!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {userMap.get(node._id)!.right && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.right!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.right!.node}\r\n+                  left={userMap.get(node._id)!.right!.left}\r\n+                  right={userMap.get(node._id)!.right!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n+    if (!node) return null;\r\n+\r\n+    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n+    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n+\r\n+    return (\r\n+      <div key={node._id}>\r\n+        <TreeNode\r\n+          node={node}\r\n+          left={userMap?.get(node._id)?.left || null}\r\n+          right={userMap?.get(node._id)?.right || null}\r\n+          onClick={handleNodeClick}\r\n+          onAddChild={handleAddChild}\r\n+        />\r\n+        <div className={styles.children}>\r\n+          {leftNode && renderCompleteTree(leftNode)}\r\n+          {rightNode && renderCompleteTree(rightNode)}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <Navbar coins={coins} />\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n+        </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div key={currentNode._id}>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Index;\r\n"
                },
                {
                    "date": 1721367928044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n         </div>\r\n       </div>\r\n     );\r\n   };\r\n-\r\n+const coins =localStorage.getItem('userCoins')\r\n   return (\r\n     <div>\r\n       <Navbar coins={coins} />\r\n       <div className={styles.container}>\r\n@@ -341,348 +341,4 @@\n   );\r\n };\r\n \r\n export default Index;\r\n-import React, { useEffect, useState } from \"react\";\r\n-import styles from \"./index.module.scss\";\r\n-import Navbar from \"../../Components/Navbar\";\r\n-import axios from \"axios\";\r\n-\r\n-interface User {\r\n-  _id: string;\r\n-  name: string;\r\n-  email: string;\r\n-  password: string;\r\n-  createdAt: string;\r\n-  updatedAt: string;\r\n-  __v: number;\r\n-  leftChild?: string;\r\n-  rightChild?: string;\r\n-  coins?: number;\r\n-  referralCode?: string;\r\n-}\r\n-\r\n-interface TreeNodeProps {\r\n-  node: User;\r\n-  left: TreeNodeProps | null;\r\n-  right: TreeNodeProps | null;\r\n-  onClick: (node: User) => void;\r\n-  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-}\r\n-\r\n-const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, TreeNodeProps>();\r\n-\r\n-  users.forEach((user) => {\r\n-    userMap.set(user._id, { node: user, left: null, right: null });\r\n-  });\r\n-\r\n-  users.forEach((user) => {\r\n-    const node = userMap.get(user._id);\r\n-    if (user.leftChild && userMap.has(user.leftChild)) {\r\n-      node!.left = userMap.get(user.leftChild)!;\r\n-    }\r\n-    if (user.rightChild && userMap.has(user.rightChild)) {\r\n-      node!.right = userMap.get(user.rightChild)!;\r\n-    }\r\n-  });\r\n-\r\n-  return userMap;\r\n-};\r\n-\r\n-const TreeNode: React.FC<TreeNodeProps> = ({\r\n-  node,\r\n-  left,\r\n-  right,\r\n-  onClick,\r\n-  onAddChild,\r\n-}) => {\r\n-  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n-  const [newCoins, setNewCoins] = useState(\"\");\r\n-  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n-\r\n-  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    setNewCoins(e.target.value);\r\n-  };\r\n-\r\n-  const handleUpdateCoins = async () => {\r\n-    try {\r\n-      setUpdatingCoins(true);\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { coins: newCoins },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"Coins updated successfully:\", response.data);\r\n-      setNewCoins(\"\");\r\n-      setShowCoinsPopup(false);\r\n-      setUpdatingCoins(false);\r\n-\r\n-      // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error updating coins:\", error);\r\n-      setUpdatingCoins(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n-    onAddChild(node._id, selectedOption);\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-    <div className={styles.node} onClick={() => onClick(node)}>\r\n-      <div className={styles.icon}>\r\n-        <i className=\"fas fa-user\"></i>\r\n-      </div>\r\n-      <div className={styles.name}>{node.name}</div>\r\n-      <div className={styles.email}>{node.email}</div>\r\n-      <div className={styles.id}>Coins: {node.coins}</div>\r\n-      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n-\r\n-      {!left && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Left Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {!right && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Right Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {left && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {right && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      <div className={styles.sendCoins}>\r\n-       \r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n-            <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n-            >\r\n-              Update Coins\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n-      \r\n-    </div>\r\n-    {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-const Index: React.FC = () => {\r\n-  const [users, setUsers] = useState<User[]>([]);\r\n-  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n-    null\r\n-  );\r\n-  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n-  const [viewAll, setViewAll] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchUsers = async () => {\r\n-      try {\r\n-        const token = localStorage.getItem(\"accessToken\");\r\n-        const response = await axios.get(\r\n-          \"https://www.referback.trollsufficient.com/admin/all\",\r\n-          {\r\n-            headers: {\r\n-              Authorization: `Bearer ${token}`,\r\n-              \"Content-Type\": \"application/json\",\r\n-            },\r\n-          }\r\n-        );\r\n-        setUsers(response.data);\r\n-        const map = createBinaryTree(response.data);\r\n-        setUserMap(map);\r\n-\r\n-        const email =localStorage.getItem('emails')\r\n-        console.log(\"aaa\",email)\r\n-  // Fetch user's coins\r\n-  const coinsResponse = await axios.post(\r\n-    'https://www.referback.trollsufficient.com/admin/coins',\r\n-    { email },\r\n-  );\r\n-\r\n-  // Log the entire response to check its structure\r\n-  // console.log('coinsResponse:', coinsResponse);\r\n-\r\n-  const userCoins = coinsResponse.data.Coins;\r\n-\r\n-  localStorage.setItem('userCoins', userCoins); \r\n- console.log(userCoins)\r\n-\r\n-        if (response.data.length > 0) {\r\n-          setCurrentNode(response.data[0]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching users:\", error);\r\n-      }\r\n-    };\r\n-\r\n-    fetchUsers();\r\n-  }, []);\r\n-\r\n-  const handleNodeClick = (node: User) => {\r\n-    setCurrentNode(node);\r\n-  };\r\n-\r\n-  const handleAddChild = async (\r\n-    parentId: string,\r\n-    selectedOption: \"left\" | \"right\"\r\n-  ) => {\r\n-    try {\r\n-      // Implement add child logic here\r\n-\r\n-      // Reload the page after adding the child to reflect changes\r\n-      window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error handling add child:\", error);\r\n-    }\r\n-  };\r\n-\r\n-  const renderInitialNodes = (node: User | null) => {\r\n-    if (!node) return null;\r\n-\r\n-    return (\r\n-      <div className={styles.children}>\r\n-        {userMap && userMap.has(node._id) && (\r\n-          <>\r\n-            {userMap.get(node._id)!.left && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.left!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.left!.node}\r\n-                  left={userMap.get(node._id)!.left!.left}\r\n-                  right={userMap.get(node._id)!.left!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-            {userMap.get(node._id)!.right && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.right!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.right!.node}\r\n-                  left={userMap.get(node._id)!.right!.left}\r\n-                  right={userMap.get(node._id)!.right!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-          </>\r\n-        )}\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n-    if (!node) return null;\r\n-\r\n-    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n-    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n-\r\n-    return (\r\n-      <div key={node._id}>\r\n-        <TreeNode\r\n-          node={node}\r\n-          left={userMap?.get(node._id)?.left || null}\r\n-          right={userMap?.get(node._id)?.right || null}\r\n-          onClick={handleNodeClick}\r\n-          onAddChild={handleAddChild}\r\n-        />\r\n-        <div className={styles.children}>\r\n-          {leftNode && renderCompleteTree(leftNode)}\r\n-          {rightNode && renderCompleteTree(rightNode)}\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      <Navbar coins={coins} />\r\n-      <div className={styles.container}>\r\n-        <div className={styles.buttonWrapper}>\r\n-          <button\r\n-            className={styles.toggleButton}\r\n-            onClick={() => setViewAll(!viewAll)}\r\n-          >\r\n-            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n-          </button>\r\n-        </div>\r\n-        <div className={styles.treeContainer}>\r\n-          {viewAll\r\n-            ? renderCompleteTree(currentNode)\r\n-            : currentNode && (\r\n-                <div key={currentNode._id}>\r\n-                  <TreeNode\r\n-                    node={currentNode}\r\n-                    left={userMap?.get(currentNode._id)?.left || null}\r\n-                    right={userMap?.get(currentNode._id)?.right || null}\r\n-                    onClick={handleNodeClick}\r\n-                    onAddChild={handleAddChild}\r\n-                  />\r\n-                  {renderInitialNodes(currentNode)}\r\n-                </div>\r\n-              )}\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Index;\r\n"
                },
                {
                    "date": 1721367953975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,8 +307,9 @@\n       </div>\r\n     );\r\n   };\r\n const coins =localStorage.getItem('userCoins')\r\n+console.log(\"coins ara hai \",coins)\r\n   return (\r\n     <div>\r\n       <Navbar coins={coins} />\r\n       <div className={styles.container}>\r\n"
                },
                {
                    "date": 1721368004116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,9 @@\n       </div>\r\n     );\r\n   };\r\n const coins =localStorage.getItem('userCoins')\r\n-console.log(\"coins ara hai \",coins)\r\n+// console.log(\"coins ara hai \",coins)\r\n   return (\r\n     <div>\r\n       <Navbar coins={coins} />\r\n       <div className={styles.container}>\r\n"
                },
                {
                    "date": 1721368041047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n \r\n   const userCoins = coinsResponse.data.Coins;\r\n \r\n   localStorage.setItem('userCoins', userCoins); \r\n- console.log(userCoins)\r\n+//  console.log(userCoins)\r\n \r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n"
                },
                {
                    "date": 1721368092520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,9 @@\n   };\r\n \r\n   const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n     if (!node) return null;\r\n-\r\n+    const coins =localStorage.getItem('userCoins')\r\n     const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n     const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n \r\n     return (\r\n@@ -306,9 +306,9 @@\n         </div>\r\n       </div>\r\n     );\r\n   };\r\n-const coins =localStorage.getItem('userCoins')\r\n+\r\n // console.log(\"coins ara hai \",coins)\r\n   return (\r\n     <div>\r\n       <Navbar coins={coins} />\r\n"
                },
                {
                    "date": 1721368105472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,9 @@\n   };\r\n \r\n   const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n     if (!node) return null;\r\n-    const coins =localStorage.getItem('userCoins')\r\n+\r\n     const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n     const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n \r\n     return (\r\n@@ -306,9 +306,9 @@\n         </div>\r\n       </div>\r\n     );\r\n   };\r\n-\r\n+const coins =localStorage.getItem('userCoins')\r\n // console.log(\"coins ara hai \",coins)\r\n   return (\r\n     <div>\r\n       <Navbar coins={coins} />\r\n"
                },
                {
                    "date": 1721368271084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n \r\n   const userCoins = coinsResponse.data.Coins;\r\n \r\n   localStorage.setItem('userCoins', userCoins); \r\n-//  console.log(userCoins)\r\n+//  console.log(user)\r\n \r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n@@ -306,13 +306,12 @@\n         </div>\r\n       </div>\r\n     );\r\n   };\r\n-const coins =localStorage.getItem('userCoins')\r\n-// console.log(\"coins ara hai \",coins)\r\n+\r\n   return (\r\n     <div>\r\n-      <Navbar coins={coins} />\r\n+      <Navbar />\r\n       <div className={styles.container}>\r\n         <div className={styles.buttonWrapper}>\r\n           <button\r\n             className={styles.toggleButton}\r\n"
                },
                {
                    "date": 1721368889019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,345 @@\n+import React, { useEffect, useState } from \"react\";\r\n+import styles from \"./index.module.scss\";\r\n+import Navbar from \"../../Components/Navbar\";\r\n+import axios from \"axios\";\r\n+\r\n+interface User {\r\n+  _id: string;\r\n+  name: string;\r\n+  email: string;\r\n+  password: string;\r\n+  createdAt: string;\r\n+  updatedAt: string;\r\n+  __v: number;\r\n+  leftChild?: string;\r\n+  rightChild?: string;\r\n+  coins?: number;\r\n+  referralCode?: string;\r\n+}\r\n+\r\n+interface TreeNodeProps {\r\n+  node: User;\r\n+  left: TreeNodeProps | null;\r\n+  right: TreeNodeProps | null;\r\n+  onClick: (node: User) => void;\r\n+  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+}\r\n+\r\n+const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n+  const userMap = new Map<string, TreeNodeProps>();\r\n+\r\n+  users.forEach((user) => {\r\n+    userMap.set(user._id, { node: user, left: null, right: null });\r\n+  });\r\n+\r\n+  users.forEach((user) => {\r\n+    const node = userMap.get(user._id);\r\n+    if (user.leftChild && userMap.has(user.leftChild)) {\r\n+      node!.left = userMap.get(user.leftChild)!;\r\n+    }\r\n+    if (user.rightChild && userMap.has(user.rightChild)) {\r\n+      node!.right = userMap.get(user.rightChild)!;\r\n+    }\r\n+  });\r\n+\r\n+  return userMap;\r\n+};\r\n+\r\n+const TreeNode: React.FC<TreeNodeProps> = ({\r\n+  node,\r\n+  left,\r\n+  right,\r\n+  onClick,\r\n+  onAddChild,\r\n+}) => {\r\n+  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n+  const [newCoins, setNewCoins] = useState(\"\");\r\n+  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n+\r\n+  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setNewCoins(e.target.value);\r\n+  };\r\n+\r\n+  const handleUpdateCoins = async () => {\r\n+    try {\r\n+      setUpdatingCoins(true);\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { coins: newCoins },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Coins updated successfully:\", response.data);\r\n+      setNewCoins(\"\");\r\n+      setShowCoinsPopup(false);\r\n+      setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error updating coins:\", error);\r\n+      setUpdatingCoins(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+    <div className={styles.node} onClick={() => onClick(node)}>\r\n+      <div className={styles.icon}>\r\n+        <i className=\"fas fa-user\"></i>\r\n+      </div>\r\n+      <div className={styles.name}>{node.name}</div>\r\n+      <div className={styles.email}>{node.email}</div>\r\n+      <div className={styles.id}>Coins: {node.coins}</div>\r\n+      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+      {!left && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Left Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {!right && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Right Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {left && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {right && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className={styles.sendCoins}>\r\n+       \r\n+        \r\n+      </div>\r\n+      \r\n+    </div>\r\n+    {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n+            <button\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n+            >\r\n+              Update Coins\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+const Index: React.FC = () => {\r\n+  const [users, setUsers] = useState<User[]>([]);\r\n+  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n+    null\r\n+  );\r\n+  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n+  const [viewAll, setViewAll] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchUsers = async () => {\r\n+      try {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+        const response = await axios.get(\r\n+          \"https://www.referback.trollsufficient.com/admin/all\",\r\n+          {\r\n+            headers: {\r\n+              Authorization: `Bearer ${token}`,\r\n+              \"Content-Type\": \"application/json\",\r\n+            },\r\n+          }\r\n+        );\r\n+        setUsers(response.data);\r\n+        const map = createBinaryTree(response.data);\r\n+        setUserMap(map);\r\n+\r\n+        const email =localStorage.getItem('emails')\r\n+        console.log(\"aaa\",email)\r\n+  // Fetch user's coins\r\n+  const coinsResponse = await axios.post(\r\n+    'https://www.referback.trollsufficient.com/admin/coins',\r\n+    { email },\r\n+  );\r\n+\r\n+  // Log the entire response to check its structure\r\n+  // console.log('coinsResponse:', coinsResponse);\r\n+\r\n+  const userCoins = coinsResponse.data.Coins;\r\n+\r\n+  localStorage.setItem('userCoins', userCoins); \r\n+//  console.log(user)\r\n+\r\n+        if (response.data.length > 0) {\r\n+          setCurrentNode(response.data[0]);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching users:\", error);\r\n+      }\r\n+    };\r\n+\r\n+    fetchUsers();\r\n+  }, []);\r\n+\r\n+  const handleNodeClick = (node: User) => {\r\n+    setCurrentNode(node);\r\n+  };\r\n+\r\n+  const handleAddChild = async (\r\n+    parentId: string,\r\n+    selectedOption: \"left\" | \"right\"\r\n+  ) => {\r\n+    try {\r\n+      // Implement add child logic here\r\n+\r\n+      // Reload the page after adding the child to reflect changes\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error handling add child:\", error);\r\n+    }\r\n+  };\r\n+\r\n+  const renderInitialNodes = (node: User | null) => {\r\n+    if (!node) return null;\r\n+\r\n+    return (\r\n+      <div className={styles.children}>\r\n+        {userMap && userMap.has(node._id) && (\r\n+          <>\r\n+            {userMap.get(node._id)!.left && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.left!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.left!.node}\r\n+                  left={userMap.get(node._id)!.left!.left}\r\n+                  right={userMap.get(node._id)!.left!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {userMap.get(node._id)!.right && (\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.right!.node._id}\r\n+              >\r\n+                <TreeNode\r\n+                  node={userMap.get(node._id)!.right!.node}\r\n+                  left={userMap.get(node._id)!.right!.left}\r\n+                  right={userMap.get(node._id)!.right!.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n+    if (!node) return null;\r\n+\r\n+    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n+    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n+\r\n+    return (\r\n+      <div key={node._id}>\r\n+        <TreeNode\r\n+          node={node}\r\n+          left={userMap?.get(node._id)?.left || null}\r\n+          right={userMap?.get(node._id)?.right || null}\r\n+          onClick={handleNodeClick}\r\n+          onAddChild={handleAddChild}\r\n+        />\r\n+        <div className={styles.children}>\r\n+          {leftNode && renderCompleteTree(leftNode)}\r\n+          {rightNode && renderCompleteTree(rightNode)}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <div>\r\n+      <Navbar />\r\n+      <div className={styles.container}>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n+        </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div key={currentNode._id}>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Index;\r\n"
                },
                {
                    "date": 1721368927014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,14 +156,14 @@\n           </button>\r\n         )}\r\n         {showCoinsPopup && (\r\n           <div className={styles.coinsPopup}>\r\n-            <input\r\n+            {/* <input\r\n               type=\"number\"\r\n               placeholder=\"Enter Coins\"\r\n               value={newCoins}\r\n               onChange={handleCoinsChange}\r\n-            />\r\n+            /> */}\r\n             <button\r\n               className={styles.updateCoinsButton}\r\n               onClick={handleUpdateCoins}\r\n             >\r\n@@ -342,348 +342,4 @@\n   );\r\n };\r\n \r\n export default Index;\r\n-import React, { useEffect, useState } from \"react\";\r\n-import styles from \"./index.module.scss\";\r\n-import Navbar from \"../../Components/Navbar\";\r\n-import axios from \"axios\";\r\n-\r\n-interface User {\r\n-  _id: string;\r\n-  name: string;\r\n-  email: string;\r\n-  password: string;\r\n-  createdAt: string;\r\n-  updatedAt: string;\r\n-  __v: number;\r\n-  leftChild?: string;\r\n-  rightChild?: string;\r\n-  coins?: number;\r\n-  referralCode?: string;\r\n-}\r\n-\r\n-interface TreeNodeProps {\r\n-  node: User;\r\n-  left: TreeNodeProps | null;\r\n-  right: TreeNodeProps | null;\r\n-  onClick: (node: User) => void;\r\n-  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-}\r\n-\r\n-const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, TreeNodeProps>();\r\n-\r\n-  users.forEach((user) => {\r\n-    userMap.set(user._id, { node: user, left: null, right: null });\r\n-  });\r\n-\r\n-  users.forEach((user) => {\r\n-    const node = userMap.get(user._id);\r\n-    if (user.leftChild && userMap.has(user.leftChild)) {\r\n-      node!.left = userMap.get(user.leftChild)!;\r\n-    }\r\n-    if (user.rightChild && userMap.has(user.rightChild)) {\r\n-      node!.right = userMap.get(user.rightChild)!;\r\n-    }\r\n-  });\r\n-\r\n-  return userMap;\r\n-};\r\n-\r\n-const TreeNode: React.FC<TreeNodeProps> = ({\r\n-  node,\r\n-  left,\r\n-  right,\r\n-  onClick,\r\n-  onAddChild,\r\n-}) => {\r\n-  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n-  const [newCoins, setNewCoins] = useState(\"\");\r\n-  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n-\r\n-  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    setNewCoins(e.target.value);\r\n-  };\r\n-\r\n-  const handleUpdateCoins = async () => {\r\n-    try {\r\n-      setUpdatingCoins(true);\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { coins: newCoins },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"Coins updated successfully:\", response.data);\r\n-      setNewCoins(\"\");\r\n-      setShowCoinsPopup(false);\r\n-      setUpdatingCoins(false);\r\n-\r\n-      // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error updating coins:\", error);\r\n-      setUpdatingCoins(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n-    onAddChild(node._id, selectedOption);\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-    <div className={styles.node} onClick={() => onClick(node)}>\r\n-      <div className={styles.icon}>\r\n-        <i className=\"fas fa-user\"></i>\r\n-      </div>\r\n-      <div className={styles.name}>{node.name}</div>\r\n-      <div className={styles.email}>{node.email}</div>\r\n-      <div className={styles.id}>Coins: {node.coins}</div>\r\n-      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n-\r\n-      {!left && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Left Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {!right && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Right Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {left && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {right && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      <div className={styles.sendCoins}>\r\n-       \r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n-            <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n-            >\r\n-              Update Coins\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n-      \r\n-    </div>\r\n-    {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-const Index: React.FC = () => {\r\n-  const [users, setUsers] = useState<User[]>([]);\r\n-  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n-    null\r\n-  );\r\n-  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n-  const [viewAll, setViewAll] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchUsers = async () => {\r\n-      try {\r\n-        const token = localStorage.getItem(\"accessToken\");\r\n-        const response = await axios.get(\r\n-          \"https://www.referback.trollsufficient.com/admin/all\",\r\n-          {\r\n-            headers: {\r\n-              Authorization: `Bearer ${token}`,\r\n-              \"Content-Type\": \"application/json\",\r\n-            },\r\n-          }\r\n-        );\r\n-        setUsers(response.data);\r\n-        const map = createBinaryTree(response.data);\r\n-        setUserMap(map);\r\n-\r\n-        const email =localStorage.getItem('emails')\r\n-        console.log(\"aaa\",email)\r\n-  // Fetch user's coins\r\n-  const coinsResponse = await axios.post(\r\n-    'https://www.referback.trollsufficient.com/admin/coins',\r\n-    { email },\r\n-  );\r\n-\r\n-  // Log the entire response to check its structure\r\n-  // console.log('coinsResponse:', coinsResponse);\r\n-\r\n-  const userCoins = coinsResponse.data.Coins;\r\n-\r\n-  localStorage.setItem('userCoins', userCoins); \r\n-//  console.log(user)\r\n-\r\n-        if (response.data.length > 0) {\r\n-          setCurrentNode(response.data[0]);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching users:\", error);\r\n-      }\r\n-    };\r\n-\r\n-    fetchUsers();\r\n-  }, []);\r\n-\r\n-  const handleNodeClick = (node: User) => {\r\n-    setCurrentNode(node);\r\n-  };\r\n-\r\n-  const handleAddChild = async (\r\n-    parentId: string,\r\n-    selectedOption: \"left\" | \"right\"\r\n-  ) => {\r\n-    try {\r\n-      // Implement add child logic here\r\n-\r\n-      // Reload the page after adding the child to reflect changes\r\n-      window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error handling add child:\", error);\r\n-    }\r\n-  };\r\n-\r\n-  const renderInitialNodes = (node: User | null) => {\r\n-    if (!node) return null;\r\n-\r\n-    return (\r\n-      <div className={styles.children}>\r\n-        {userMap && userMap.has(node._id) && (\r\n-          <>\r\n-            {userMap.get(node._id)!.left && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.left!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.left!.node}\r\n-                  left={userMap.get(node._id)!.left!.left}\r\n-                  right={userMap.get(node._id)!.left!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-            {userMap.get(node._id)!.right && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.right!.node._id}\r\n-              >\r\n-                <TreeNode\r\n-                  node={userMap.get(node._id)!.right!.node}\r\n-                  left={userMap.get(node._id)!.right!.left}\r\n-                  right={userMap.get(node._id)!.right!.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-          </>\r\n-        )}\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n-    if (!node) return null;\r\n-\r\n-    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n-    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n-\r\n-    return (\r\n-      <div key={node._id}>\r\n-        <TreeNode\r\n-          node={node}\r\n-          left={userMap?.get(node._id)?.left || null}\r\n-          right={userMap?.get(node._id)?.right || null}\r\n-          onClick={handleNodeClick}\r\n-          onAddChild={handleAddChild}\r\n-        />\r\n-        <div className={styles.children}>\r\n-          {leftNode && renderCompleteTree(leftNode)}\r\n-          {rightNode && renderCompleteTree(rightNode)}\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n-  return (\r\n-    <div>\r\n-      <Navbar />\r\n-      <div className={styles.container}>\r\n-        <div className={styles.buttonWrapper}>\r\n-          <button\r\n-            className={styles.toggleButton}\r\n-            onClick={() => setViewAll(!viewAll)}\r\n-          >\r\n-            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n-          </button>\r\n-        </div>\r\n-        <div className={styles.treeContainer}>\r\n-          {viewAll\r\n-            ? renderCompleteTree(currentNode)\r\n-            : currentNode && (\r\n-                <div key={currentNode._id}>\r\n-                  <TreeNode\r\n-                    node={currentNode}\r\n-                    left={userMap?.get(currentNode._id)?.left || null}\r\n-                    right={userMap?.get(currentNode._id)?.right || null}\r\n-                    onClick={handleNodeClick}\r\n-                    onAddChild={handleAddChild}\r\n-                  />\r\n-                  {renderInitialNodes(currentNode)}\r\n-                </div>\r\n-              )}\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Index;\r\n"
                },
                {
                    "date": 1721368938977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,14 +156,14 @@\n           </button>\r\n         )}\r\n         {showCoinsPopup && (\r\n           <div className={styles.coinsPopup}>\r\n-            {/* <input\r\n+            <input\r\n               type=\"number\"\r\n               placeholder=\"Enter Coins\"\r\n               value={newCoins}\r\n               onChange={handleCoinsChange}\r\n-            /> */}\r\n+            />\r\n             <button\r\n               className={styles.updateCoinsButton}\r\n               onClick={handleUpdateCoins}\r\n             >\r\n"
                },
                {
                    "date": 1721368991876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         \r\n       </div>\r\n       \r\n     </div>\r\n-    {!showCoinsPopup && (\r\n+    { (\r\n           <button\r\n             className={`${styles.sendCoinsButton} ${\r\n               updatingCoins ? styles.updating : \"\"\r\n             }`}\r\n"
                },
                {
                    "date": 1721369338091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,13 @@\n   left: TreeNodeProps | null;\r\n   right: TreeNodeProps | null;\r\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+  refreshKey: number; // Pass refreshKey as prop\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, TreeNodeProps>();\r\n+  const userMap = new Map<string, any>();\r\n \r\n   users.forEach((user) => {\r\n     userMap.set(user._id, { node: user, left: null, right: null });\r\n   });\r\n@@ -50,8 +51,9 @@\n   left,\r\n   right,\r\n   onClick,\r\n   onAddChild,\r\n+  refreshKey,\r\n }) => {\r\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n@@ -76,15 +78,19 @@\n           },\r\n         }\r\n       );\r\n \r\n+      if (response.status !== 200) {\r\n+        throw new Error(\"Failed to update coins\");\r\n+      }\r\n+\r\n       console.log(\"Coins updated successfully:\", response.data);\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n-      // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n+      // Trigger refresh by incrementing refreshKey\r\n+      handleRefresh();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n@@ -104,8 +110,9 @@\n       <div className={styles.email}>{node.email}</div>\r\n       <div className={styles.id}>Coins: {node.coins}</div>\r\n       <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n \r\n+      {/* Check if left child exists before rendering the button */}\r\n       {!left && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n@@ -115,8 +122,9 @@\n           </button>\r\n         </div>\r\n       )}\r\n \r\n+      {/* Check if right child exists before rendering the button */}\r\n       {!right && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n@@ -139,14 +147,9 @@\n         </div>\r\n       )}\r\n \r\n       <div className={styles.sendCoins}>\r\n-       \r\n-        \r\n-      </div>\r\n-      \r\n-    </div>\r\n-    { (\r\n+        {!showCoinsPopup && (\r\n           <button\r\n             className={`${styles.sendCoinsButton} ${\r\n               updatingCoins ? styles.updating : \"\"\r\n             }`}\r\n@@ -170,8 +173,10 @@\n               Update Coins\r\n             </button>\r\n           </div>\r\n         )}\r\n+      </div>\r\n+    </div>\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -181,8 +186,21 @@\n     null\r\n   );\r\n   const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n   const [viewAll, setViewAll] = useState(false);\r\n+  const [formData, setFormData] = useState({\r\n+    name: \"\",\r\n+    email: \"\",\r\n+    password: \"\",\r\n+  });\r\n+  const [parentId, setParentId] = useState(\"\");\r\n+  const [selectedOption, setSelectedOption] = useState<\"left\" | \"right\">(\r\n+    \"left\"\r\n+  );\r\n+  const [error, setError] = useState<Error | null>(null);\r\n+  const [success, setSuccess] = useState(false);\r\n+  const [showForm, setShowForm] = useState(false);\r\n+  const [refreshKey, setRefreshKey] = useState(0); // State to trigger re-render\r\n \r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n@@ -199,24 +217,8 @@\n         setUsers(response.data);\r\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n-        const email =localStorage.getItem('emails')\r\n-        console.log(\"aaa\",email)\r\n-  // Fetch user's coins\r\n-  const coinsResponse = await axios.post(\r\n-    'https://www.referback.trollsufficient.com/admin/coins',\r\n-    { email },\r\n-  );\r\n-\r\n-  // Log the entire response to check its structure\r\n-  // console.log('coinsResponse:', coinsResponse);\r\n-\r\n-  const userCoins = coinsResponse.data.Coins;\r\n-\r\n-  localStorage.setItem('userCoins', userCoins); \r\n-//  console.log(user)\r\n-\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n@@ -224,9 +226,9 @@\n       }\r\n     };\r\n \r\n     fetchUsers();\r\n-  }, []);\r\n+  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n \r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n@@ -235,49 +237,94 @@\n     parentId: string,\r\n     selectedOption: \"left\" | \"right\"\r\n   ) => {\r\n     try {\r\n-      // Implement add child logic here\r\n-\r\n-      // Reload the page after adding the child to reflect changes\r\n-      window.location.reload();\r\n+      setParentId(parentId);\r\n+      setSelectedOption(selectedOption);\r\n+      setShowForm(true);\r\n     } catch (error) {\r\n       console.error(\"Error handling add child:\", error);\r\n     }\r\n   };\r\n \r\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setFormData({\r\n+      ...formData,\r\n+      [e.target.name]: e.target.value,\r\n+    });\r\n+  };\r\n+\r\n+  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+    try {\r\n+      const apiEndpoint =\r\n+        selectedOption === \"left\"\r\n+          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n+          : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n+\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+\r\n+      const response = await axios.put(apiEndpoint, formData, {\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n+\r\n+      if (response.status !== 200) {\r\n+        throw new Error(\"Failed to add child\");\r\n+      }\r\n+\r\n+      console.log(\"Child added successfully:\", response.data);\r\n+      setSuccess(true);\r\n+\r\n+      // Trigger refresh by incrementing refreshKey\r\n+      setRefreshKey((prevKey) => prevKey + 1);\r\n+    } catch (error) {\r\n+      console.error(\"Error adding child:\", error);\r\n+      setError(error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCloseForm = () => {\r\n+    setShowForm(false);\r\n+    setFormData({\r\n+      name: \"\",\r\n+      email: \"\",\r\n+      password: \"\",\r\n+    });\r\n+    setError(null);\r\n+    setSuccess(false);\r\n+  };\r\n+\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n       <div className={styles.children}>\r\n         {userMap && userMap.has(node._id) && (\r\n           <>\r\n             {userMap.get(node._id)!.left && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.left!.node._id}\r\n-              >\r\n+              <div className={styles.child}>\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.left!.node}\r\n                   left={userMap.get(node._id)!.left!.left}\r\n                   right={userMap.get(node._id)!.left!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n             {userMap.get(node._id)!.right && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.right!.node._id}\r\n-              >\r\n+              <div className={styles.child}>\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.right!.node}\r\n                   left={userMap.get(node._id)!.right!.left}\r\n                   right={userMap.get(node._id)!.right!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n           </>\r\n@@ -292,15 +339,16 @@\n     const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n     const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n \r\n     return (\r\n-      <div key={node._id}>\r\n+      <div>\r\n         <TreeNode\r\n           node={node}\r\n           left={userMap?.get(node._id)?.left || null}\r\n           right={userMap?.get(node._id)?.right || null}\r\n           onClick={handleNodeClick}\r\n           onAddChild={handleAddChild}\r\n+          refreshKey={refreshKey} // Pass refreshKey\r\n         />\r\n         <div className={styles.children}>\r\n           {leftNode && renderCompleteTree(leftNode)}\r\n           {rightNode && renderCompleteTree(rightNode)}\r\n@@ -324,22 +372,71 @@\n         <div className={styles.treeContainer}>\r\n           {viewAll\r\n             ? renderCompleteTree(currentNode)\r\n             : currentNode && (\r\n-                <div key={currentNode._id}>\r\n+                <div>\r\n                   <TreeNode\r\n                     node={currentNode}\r\n                     left={userMap?.get(currentNode._id)?.left || null}\r\n                     right={userMap?.get(currentNode._id)?.right || null}\r\n                     onClick={handleNodeClick}\r\n                     onAddChild={handleAddChild}\r\n+                    refreshKey={refreshKey} // Pass refreshKey\r\n                   />\r\n                   {renderInitialNodes(currentNode)}\r\n                 </div>\r\n               )}\r\n         </div>\r\n       </div>\r\n+\r\n+      {showForm && (\r\n+        <div className={styles.modal}>\r\n+          <div className={styles.modalContent}>\r\n+            <span className={styles.close} onClick={handleCloseForm}>\r\n+              &times;\r\n+            </span>\r\n+            <form onSubmit={handleSubmit} className={styles.form}>\r\n+              <label>\r\n+                Name:\r\n+                <input\r\n+                  type=\"text\"\r\n+                  name=\"name\"\r\n+                  value={formData.name}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Email:\r\n+                <input\r\n+                  type=\"email\"\r\n+                  name=\"email\"\r\n+                  value={formData.email}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Password:\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={formData.password}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <button type=\"submit\">Add Child</button>\r\n+            </form>\r\n+            {error && (\r\n+              <div className={styles.error}>Error: {error.message}</div>\r\n+            )}\r\n+            {success && (\r\n+              <div className={styles.success}>\r\n+                Child added successfully!\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\r\n+export default Index;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721369485566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n           : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n \r\n       const token = localStorage.getItem(\"accessToken\");\r\n \r\n-      const response = await axios.put(apiEndpoint, formData, {\r\n+      const response = await axios.post(apiEndpoint, formData, {\r\n         headers: {\r\n           \"Content-Type\": \"application/json\",\r\n           Authorization: `Bearer ${token}`,\r\n         },\r\n"
                },
                {
                    "date": 1721369527672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,9 +262,9 @@\n           : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n \r\n       const token = localStorage.getItem(\"accessToken\");\r\n \r\n-      const response = await axios.post(apiEndpoint, formData, {\r\n+      const response = await axios.put(apiEndpoint, formData, {\r\n         headers: {\r\n           \"Content-Type\": \"application/json\",\r\n           Authorization: `Bearer ${token}`,\r\n         },\r\n"
                },
                {
                    "date": 1721369982745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import React, { useEffect, useState } from \"react\";\r\n import styles from \"./index.module.scss\";\r\n-import Navbar from \"../../Components/Navbar\";\r\n import axios from \"axios\";\r\n \r\n interface User {\r\n   _id: string;\r\n@@ -22,185 +21,20 @@\n   left: TreeNodeProps | null;\r\n   right: TreeNodeProps | null;\r\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-  refreshKey: number; // Pass refreshKey as prop\r\n }\r\n \r\n-const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, any>();\r\n-\r\n-  users.forEach((user) => {\r\n-    userMap.set(user._id, { node: user, left: null, right: null });\r\n-  });\r\n-\r\n-  users.forEach((user) => {\r\n-    const node = userMap.get(user._id);\r\n-    if (user.leftChild && userMap.has(user.leftChild)) {\r\n-      node!.left = userMap.get(user.leftChild)!;\r\n-    }\r\n-    if (user.rightChild && userMap.has(user.rightChild)) {\r\n-      node!.right = userMap.get(user.rightChild)!;\r\n-    }\r\n-  });\r\n-\r\n-  return userMap;\r\n-};\r\n-\r\n-const TreeNode: React.FC<TreeNodeProps> = ({\r\n-  node,\r\n-  left,\r\n-  right,\r\n-  onClick,\r\n-  onAddChild,\r\n-  refreshKey,\r\n-}) => {\r\n-  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n-  const [newCoins, setNewCoins] = useState(\"\");\r\n-  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n-\r\n-  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    setNewCoins(e.target.value);\r\n-  };\r\n-\r\n-  const handleUpdateCoins = async () => {\r\n-    try {\r\n-      setUpdatingCoins(true);\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { coins: newCoins },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      if (response.status !== 200) {\r\n-        throw new Error(\"Failed to update coins\");\r\n-      }\r\n-\r\n-      console.log(\"Coins updated successfully:\", response.data);\r\n-      setNewCoins(\"\");\r\n-      setShowCoinsPopup(false);\r\n-      setUpdatingCoins(false);\r\n-\r\n-      // Trigger refresh by incrementing refreshKey\r\n-      handleRefresh();\r\n-    } catch (error) {\r\n-      console.error(\"Error updating coins:\", error);\r\n-      setUpdatingCoins(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n-    onAddChild(node._id, selectedOption);\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-    <div className={styles.node} onClick={() => onClick(node)}>\r\n-      <div className={styles.icon}>\r\n-        <i className=\"fas fa-user\"></i>\r\n-      </div>\r\n-      <div className={styles.name}>{node.name}</div>\r\n-      <div className={styles.email}>{node.email}</div>\r\n-      <div className={styles.id}>Coins: {node.coins}</div>\r\n-      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n-\r\n-      {/* Check if left child exists before rendering the button */}\r\n-      {!left && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Left Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {/* Check if right child exists before rendering the button */}\r\n-      {!right && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Right Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {left && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      {right && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-        </div>\r\n-      )}\r\n-\r\n-      <div className={styles.sendCoins}>\r\n-        {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n-            <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n-            >\r\n-              Update Coins\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n-    </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n const Index: React.FC = () => {\r\n   const [users, setUsers] = useState<User[]>([]);\r\n   const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n     null\r\n   );\r\n   const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n   const [viewAll, setViewAll] = useState(false);\r\n-  const [formData, setFormData] = useState({\r\n-    name: \"\",\r\n-    email: \"\",\r\n-    password: \"\",\r\n-  });\r\n-  const [parentId, setParentId] = useState(\"\");\r\n-  const [selectedOption, setSelectedOption] = useState<\"left\" | \"right\">(\r\n-    \"left\"\r\n-  );\r\n-  const [error, setError] = useState<Error | null>(null);\r\n-  const [success, setSuccess] = useState(false);\r\n-  const [showForm, setShowForm] = useState(false);\r\n-  const [refreshKey, setRefreshKey] = useState(0); // State to trigger re-render\r\n+  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n+  const [newCoins, setNewCoins] = useState(\"\");\r\n+  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n \r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n@@ -226,10 +60,30 @@\n       }\r\n     };\r\n \r\n     fetchUsers();\r\n-  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n+  }, []);\r\n \r\n+  const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n+    const userMap = new Map<string, TreeNodeProps>();\r\n+\r\n+    users.forEach((user) => {\r\n+      userMap.set(user._id, { node: user, left: null, right: null });\r\n+    });\r\n+\r\n+    users.forEach((user) => {\r\n+      const node = userMap.get(user._id);\r\n+      if (user.leftChild && userMap.has(user.leftChild)) {\r\n+        node!.left = userMap.get(user.leftChild)!;\r\n+      }\r\n+      if (user.rightChild && userMap.has(user.rightChild)) {\r\n+        node!.right = userMap.get(user.rightChild)!;\r\n+      }\r\n+    });\r\n+\r\n+    return userMap;\r\n+  };\r\n+\r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n \r\n@@ -237,94 +91,98 @@\n     parentId: string,\r\n     selectedOption: \"left\" | \"right\"\r\n   ) => {\r\n     try {\r\n-      setParentId(parentId);\r\n-      setSelectedOption(selectedOption);\r\n-      setShowForm(true);\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const childResponse = await axios.post(\r\n+        \"https://www.referback.trollsufficient.com/admin/add\",\r\n+        {\r\n+          parentId,\r\n+          selectedOption,\r\n+        },\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+            \"Content-Type\": \"application/json\",\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Child added successfully:\", childResponse.data);\r\n+\r\n+      // Reload the page after adding the child to reflect changes\r\n+      window.location.reload();\r\n     } catch (error) {\r\n-      console.error(\"Error handling add child:\", error);\r\n+      console.error(\"Error adding child:\", error);\r\n     }\r\n   };\r\n \r\n-  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    setFormData({\r\n-      ...formData,\r\n-      [e.target.name]: e.target.value,\r\n-    });\r\n+  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setNewCoins(e.target.value);\r\n   };\r\n \r\n-  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n+  const handleUpdateCoins = async () => {\r\n     try {\r\n-      const apiEndpoint =\r\n-        selectedOption === \"left\"\r\n-          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n-          : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n-\r\n+      setUpdatingCoins(true);\r\n       const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${currentNode?.referralCode}`;\r\n \r\n-      const response = await axios.put(apiEndpoint, formData, {\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n-      });\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { coins: newCoins },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n \r\n-      if (response.status !== 200) {\r\n-        throw new Error(\"Failed to add child\");\r\n-      }\r\n+      console.log(\"Coins updated successfully:\", response.data);\r\n+      setNewCoins(\"\");\r\n+      setShowCoinsPopup(false);\r\n+      setUpdatingCoins(false);\r\n \r\n-      console.log(\"Child added successfully:\", response.data);\r\n-      setSuccess(true);\r\n-\r\n-      // Trigger refresh by incrementing refreshKey\r\n-      setRefreshKey((prevKey) => prevKey + 1);\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n     } catch (error) {\r\n-      console.error(\"Error adding child:\", error);\r\n-      setError(error);\r\n+      console.error(\"Error updating coins:\", error);\r\n+      setUpdatingCoins(false);\r\n     }\r\n   };\r\n \r\n-  const handleCloseForm = () => {\r\n-    setShowForm(false);\r\n-    setFormData({\r\n-      name: \"\",\r\n-      email: \"\",\r\n-      password: \"\",\r\n-    });\r\n-    setError(null);\r\n-    setSuccess(false);\r\n-  };\r\n-\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n       <div className={styles.children}>\r\n         {userMap && userMap.has(node._id) && (\r\n           <>\r\n             {userMap.get(node._id)!.left && (\r\n-              <div className={styles.child}>\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.left!.node._id}\r\n+              >\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.left!.node}\r\n                   left={userMap.get(node._id)!.left!.left}\r\n                   right={userMap.get(node._id)!.left!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n-                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n             {userMap.get(node._id)!.right && (\r\n-              <div className={styles.child}>\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.right!.node._id}\r\n+              >\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.right!.node}\r\n                   left={userMap.get(node._id)!.right!.left}\r\n                   right={userMap.get(node._id)!.right!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n-                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n           </>\r\n@@ -339,16 +197,15 @@\n     const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n     const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n \r\n     return (\r\n-      <div>\r\n+      <div key={node._id}>\r\n         <TreeNode\r\n           node={node}\r\n           left={userMap?.get(node._id)?.left || null}\r\n           right={userMap?.get(node._id)?.right || null}\r\n           onClick={handleNodeClick}\r\n           onAddChild={handleAddChild}\r\n-          refreshKey={refreshKey} // Pass refreshKey\r\n         />\r\n         <div className={styles.children}>\r\n           {leftNode && renderCompleteTree(leftNode)}\r\n           {rightNode && renderCompleteTree(rightNode)}\r\n@@ -358,9 +215,8 @@\n   };\r\n \r\n   return (\r\n     <div>\r\n-      <Navbar />\r\n       <div className={styles.container}>\r\n         <div className={styles.buttonWrapper}>\r\n           <button\r\n             className={styles.toggleButton}\r\n@@ -372,71 +228,54 @@\n         <div className={styles.treeContainer}>\r\n           {viewAll\r\n             ? renderCompleteTree(currentNode)\r\n             : currentNode && (\r\n-                <div>\r\n+                <div key={currentNode._id}>\r\n                   <TreeNode\r\n                     node={currentNode}\r\n                     left={userMap?.get(currentNode._id)?.left || null}\r\n                     right={userMap?.get(currentNode._id)?.right || null}\r\n                     onClick={handleNodeClick}\r\n                     onAddChild={handleAddChild}\r\n-                    refreshKey={refreshKey} // Pass refreshKey\r\n                   />\r\n                   {renderInitialNodes(currentNode)}\r\n                 </div>\r\n               )}\r\n         </div>\r\n       </div>\r\n \r\n-      {showForm && (\r\n-        <div className={styles.modal}>\r\n-          <div className={styles.modalContent}>\r\n-            <span className={styles.close} onClick={handleCloseForm}>\r\n-              &times;\r\n-            </span>\r\n-            <form onSubmit={handleSubmit} className={styles.form}>\r\n-              <label>\r\n-                Name:\r\n-                <input\r\n-                  type=\"text\"\r\n-                  name=\"name\"\r\n-                  value={formData.name}\r\n-                  onChange={handleChange}\r\n-                />\r\n-              </label>\r\n-              <label>\r\n-                Email:\r\n-                <input\r\n-                  type=\"email\"\r\n-                  name=\"email\"\r\n-                  value={formData.email}\r\n-                  onChange={handleChange}\r\n-                />\r\n-              </label>\r\n-              <label>\r\n-                Password:\r\n-                <input\r\n-                  type=\"password\"\r\n-                  name=\"password\"\r\n-                  value={formData.password}\r\n-                  onChange={handleChange}\r\n-                />\r\n-              </label>\r\n-              <button type=\"submit\">Add Child</button>\r\n-            </form>\r\n-            {error && (\r\n-              <div className={styles.error}>Error: {error.message}</div>\r\n-            )}\r\n-            {success && (\r\n-              <div className={styles.success}>\r\n-                Child added successfully!\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n+      {currentNode && (\r\n+        <div className={styles.sendCoins}>\r\n+          {!showCoinsPopup && (\r\n+            <button\r\n+              className={`${styles.sendCoinsButton} ${\r\n+                updatingCoins ? styles.updating : \"\"\r\n\\ No newline at end of file\n+              }`}\r\n+              onClick={() => setShowCoinsPopup(true)}\r\n+            >\r\n+              Send Coins\r\n+            </button>\r\n+          )}\r\n+          {showCoinsPopup && (\r\n+            <div className={styles.coinsPopup}>\r\n+              <input\r\n+                type=\"number\"\r\n+                placeholder=\"Enter Coins\"\r\n+                value={newCoins}\r\n+                onChange={handleCoinsChange}\r\n+              />\r\n+              <button\r\n+                className={styles.updateCoinsButton}\r\n+                onClick={handleUpdateCoins}\r\n+              >\r\n+                Update Coins\r\n+              </button>\r\n+            </div>\r\n+          )}\r\n         </div>\r\n       )}\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\n+export default Index;\r\n+\r\n"
                },
                {
                    "date": 1721369989260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useEffect, useState } from \"react\";\r\n import styles from \"./index.module.scss\";\r\n+import Navbar from \"../../Components/Navbar\";\r\n import axios from \"axios\";\r\n \r\n interface User {\r\n   _id: string;\r\n@@ -23,18 +24,165 @@\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n }\r\n \r\n+const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n+  const userMap = new Map<string, TreeNodeProps>();\r\n+\r\n+  users.forEach((user) => {\r\n+    userMap.set(user._id, { node: user, left: null, right: null });\r\n+  });\r\n+\r\n+  users.forEach((user) => {\r\n+    const node = userMap.get(user._id);\r\n+    if (user.leftChild && userMap.has(user.leftChild)) {\r\n+      node!.left = userMap.get(user.leftChild)!;\r\n+    }\r\n+    if (user.rightChild && userMap.has(user.rightChild)) {\r\n+      node!.right = userMap.get(user.rightChild)!;\r\n+    }\r\n+  });\r\n+\r\n+  return userMap;\r\n+};\r\n+\r\n+const TreeNode: React.FC<TreeNodeProps> = ({\r\n+  node,\r\n+  left,\r\n+  right,\r\n+  onClick,\r\n+  onAddChild,\r\n+}) => {\r\n+  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n+  const [newCoins, setNewCoins] = useState(\"\");\r\n+  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n+\r\n+  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setNewCoins(e.target.value);\r\n+  };\r\n+\r\n+  const handleUpdateCoins = async () => {\r\n+    try {\r\n+      setUpdatingCoins(true);\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n+\r\n+      const response = await axios.post(\r\n+        apiEndpoint,\r\n+        { coins: newCoins },\r\n+        {\r\n+          headers: {\r\n+            \"Content-Type\": \"application/json\",\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      console.log(\"Coins updated successfully:\", response.data);\r\n+      setNewCoins(\"\");\r\n+      setShowCoinsPopup(false);\r\n+      setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n+    } catch (error) {\r\n+      console.error(\"Error updating coins:\", error);\r\n+      setUpdatingCoins(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n+    onAddChild(node._id, selectedOption);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+    <div className={styles.node} onClick={() => onClick(node)}>\r\n+      <div className={styles.icon}>\r\n+        <i className=\"fas fa-user\"></i>\r\n+      </div>\r\n+      <div className={styles.name}>{node.name}</div>\r\n+      <div className={styles.email}>{node.email}</div>\r\n+      <div className={styles.id}>Coins: {node.coins}</div>\r\n+      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+      {!left && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Left Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {!right && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Right Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {left && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      {right && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div className={styles.sendCoins}>\r\n+       \r\n+        \r\n+      </div>\r\n+      \r\n+    </div>\r\n+    {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n+            <button\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n+            >\r\n+              Update Coins\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n const Index: React.FC = () => {\r\n   const [users, setUsers] = useState<User[]>([]);\r\n   const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n     null\r\n   );\r\n   const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n   const [viewAll, setViewAll] = useState(false);\r\n-  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n-  const [newCoins, setNewCoins] = useState(\"\");\r\n-  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n \r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n@@ -51,8 +199,24 @@\n         setUsers(response.data);\r\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n+        const email =localStorage.getItem('emails')\r\n+        console.log(\"aaa\",email)\r\n+  // Fetch user's coins\r\n+  const coinsResponse = await axios.post(\r\n+    'https://www.referback.trollsufficient.com/admin/coins',\r\n+    { email },\r\n+  );\r\n+\r\n+  // Log the entire response to check its structure\r\n+  // console.log('coinsResponse:', coinsResponse);\r\n+\r\n+  const userCoins = coinsResponse.data.Coins;\r\n+\r\n+  localStorage.setItem('userCoins', userCoins); \r\n+//  console.log(user)\r\n+\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n@@ -62,28 +226,8 @@\n \r\n     fetchUsers();\r\n   }, []);\r\n \r\n-  const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-    const userMap = new Map<string, TreeNodeProps>();\r\n-\r\n-    users.forEach((user) => {\r\n-      userMap.set(user._id, { node: user, left: null, right: null });\r\n-    });\r\n-\r\n-    users.forEach((user) => {\r\n-      const node = userMap.get(user._id);\r\n-      if (user.leftChild && userMap.has(user.leftChild)) {\r\n-        node!.left = userMap.get(user.leftChild)!;\r\n-      }\r\n-      if (user.rightChild && userMap.has(user.rightChild)) {\r\n-        node!.right = userMap.get(user.rightChild)!;\r\n-      }\r\n-    });\r\n-\r\n-    return userMap;\r\n-  };\r\n-\r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n \r\n@@ -91,66 +235,17 @@\n     parentId: string,\r\n     selectedOption: \"left\" | \"right\"\r\n   ) => {\r\n     try {\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const childResponse = await axios.post(\r\n-        \"https://www.referback.trollsufficient.com/admin/add\",\r\n-        {\r\n-          parentId,\r\n-          selectedOption,\r\n-        },\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-            \"Content-Type\": \"application/json\",\r\n-          },\r\n-        }\r\n-      );\r\n+      // Implement add child logic here\r\n \r\n-      console.log(\"Child added successfully:\", childResponse.data);\r\n-\r\n       // Reload the page after adding the child to reflect changes\r\n       window.location.reload();\r\n     } catch (error) {\r\n-      console.error(\"Error adding child:\", error);\r\n+      console.error(\"Error handling add child:\", error);\r\n     }\r\n   };\r\n \r\n-  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    setNewCoins(e.target.value);\r\n-  };\r\n-\r\n-  const handleUpdateCoins = async () => {\r\n-    try {\r\n-      setUpdatingCoins(true);\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${currentNode?.referralCode}`;\r\n-\r\n-      const response = await axios.post(\r\n-        apiEndpoint,\r\n-        { coins: newCoins },\r\n-        {\r\n-          headers: {\r\n-            \"Content-Type\": \"application/json\",\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n-      );\r\n-\r\n-      console.log(\"Coins updated successfully:\", response.data);\r\n-      setNewCoins(\"\");\r\n-      setShowCoinsPopup(false);\r\n-      setUpdatingCoins(false);\r\n-\r\n-      // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n-    } catch (error) {\r\n-      console.error(\"Error updating coins:\", error);\r\n-      setUpdatingCoins(false);\r\n-    }\r\n-  };\r\n-\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n@@ -215,8 +310,9 @@\n   };\r\n \r\n   return (\r\n     <div>\r\n+      <Navbar />\r\n       <div className={styles.container}>\r\n         <div className={styles.buttonWrapper}>\r\n           <button\r\n             className={styles.toggleButton}\r\n@@ -241,40 +337,9 @@\n                 </div>\r\n               )}\r\n         </div>\r\n       </div>\r\n-\r\n-      {currentNode && (\r\n-        <div className={styles.sendCoins}>\r\n-          {!showCoinsPopup && (\r\n-            <button\r\n-              className={`${styles.sendCoinsButton} ${\r\n-                updatingCoins ? styles.updating : \"\"\r\n-              }`}\r\n-              onClick={() => setShowCoinsPopup(true)}\r\n-            >\r\n-              Send Coins\r\n-            </button>\r\n-          )}\r\n-          {showCoinsPopup && (\r\n-            <div className={styles.coinsPopup}>\r\n-              <input\r\n-                type=\"number\"\r\n-                placeholder=\"Enter Coins\"\r\n-                value={newCoins}\r\n-                onChange={handleCoinsChange}\r\n-              />\r\n-              <button\r\n-                className={styles.updateCoinsButton}\r\n-                onClick={handleUpdateCoins}\r\n-              >\r\n-                Update Coins\r\n-              </button>\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n-      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\n\\ No newline at end of file\n+export default Index;\r\n"
                },
                {
                    "date": 1721370190708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,8 @@\n     onAddChild(node._id, selectedOption);\r\n   };\r\n \r\n   return (\r\n-    <>\r\n     <div className={styles.node} onClick={() => onClick(node)}>\r\n       <div className={styles.icon}>\r\n         <i className=\"fas fa-user\"></i>\r\n       </div>\r\n@@ -139,14 +138,9 @@\n         </div>\r\n       )}\r\n \r\n       <div className={styles.sendCoins}>\r\n-       \r\n-        \r\n-      </div>\r\n-      \r\n-    </div>\r\n-    {!showCoinsPopup && (\r\n+        {!showCoinsPopup && (\r\n           <button\r\n             className={`${styles.sendCoinsButton} ${\r\n               updatingCoins ? styles.updating : \"\"\r\n             }`}\r\n@@ -170,9 +164,10 @@\n               Update Coins\r\n             </button>\r\n           </div>\r\n         )}\r\n-    </>\r\n+      </div>\r\n+    </div>\r\n   );\r\n };\r\n \r\n const Index: React.FC = () => {\r\n@@ -199,24 +194,8 @@\n         setUsers(response.data);\r\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n-        const email =localStorage.getItem('emails')\r\n-        console.log(\"aaa\",email)\r\n-  // Fetch user's coins\r\n-  const coinsResponse = await axios.post(\r\n-    'https://www.referback.trollsufficient.com/admin/coins',\r\n-    { email },\r\n-  );\r\n-\r\n-  // Log the entire response to check its structure\r\n-  // console.log('coinsResponse:', coinsResponse);\r\n-\r\n-  const userCoins = coinsResponse.data.Coins;\r\n-\r\n-  localStorage.setItem('userCoins', userCoins); \r\n-//  console.log(user)\r\n-\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n@@ -235,14 +214,40 @@\n     parentId: string,\r\n     selectedOption: \"left\" | \"right\"\r\n   ) => {\r\n     try {\r\n-      // Implement add child logic here\r\n+      const apiEndpoint =\r\n+        selectedOption === \"left\"\r\n+          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n+          : `https://www.referback.trollsufficient.com/admin/add-right-child/${parentId}`;\r\n \r\n-      // Reload the page after adding the child to reflect changes\r\n-      window.location.reload();\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+\r\n+      const response = await axios.put(apiEndpoint, {}, {\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n+\r\n+      if (response.status !== 200) {\r\n+        throw new Error(\"Failed to add child\");\r\n+      }\r\n+\r\n+      console.log(\"Child added successfully:\", response.data);\r\n+\r\n+      // Update state to reflect changes without page reload\r\n+      const updatedUsers = [...users, response.data];\r\n+      setUsers(updatedUsers);\r\n+      const updatedMap = createBinaryTree(updatedUsers);\r\n+      setUserMap(updatedMap);\r\n+\r\n+      // Update currentNode if the added child belongs to it\r\n+      if (currentNode?._id === parentId) {\r\n+        setCurrentNode(response.data);\r\n+      }\r\n     } catch (error) {\r\n-      console.error(\"Error handling add child:\", error);\r\n+      console.error(\"Error adding child:\", error);\r\n     }\r\n   };\r\n \r\n   const renderInitialNodes = (node: User | null) => {\r\n@@ -285,61 +290,31 @@\n       </div>\r\n     );\r\n   };\r\n \r\n-  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n-    if (!node) return null;\r\n-\r\n-    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n-    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n-\r\n-    return (\r\n-      <div key={node._id}>\r\n-        <TreeNode\r\n-          node={node}\r\n-          left={userMap?.get(node._id)?.left || null}\r\n-          right={userMap?.get(node._id)?.right || null}\r\n-          onClick={handleNodeClick}\r\n-          onAddChild={handleAddChild}\r\n-        />\r\n-        <div className={styles.children}>\r\n-          {leftNode && renderCompleteTree(leftNode)}\r\n-          {rightNode && renderCompleteTree(rightNode)}\r\n-        </div>\r\n-      </div>\r\n-    );\r\n-  };\r\n-\r\n   return (\r\n-    <div>\r\n+    <>\r\n       <Navbar />\r\n       <div className={styles.container}>\r\n-        <div className={styles.buttonWrapper}>\r\n-          <button\r\n-            className={styles.toggleButton}\r\n-            onClick={() => setViewAll(!viewAll)}\r\n-          >\r\n-            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n-          </button>\r\n+        <div className={styles.tree}>\r\n+          <div className={styles.title}>Binary Tree</div>\r\n+          <div className={styles.treeContainer}>\r\n+            {currentNode && (\r\n+              <div className={styles.currentNode}>\r\n+                <TreeNode\r\n+                  node={currentNode}\r\n+                  left={userMap?.get(currentNode._id)?.left}\r\n+                  right={userMap?.get(currentNode._id)?.right}\r\n+                  onClick={handleNodeClick}\r\n+                  onAddChild={handleAddChild}\r\n+                />\r\n+              </div>\r\n+            )}\r\n+            {renderInitialNodes(currentNode)}\r\n+          </div>\r\n         </div>\r\n-        <div className={styles.treeContainer}>\r\n-          {viewAll\r\n-            ? renderCompleteTree(currentNode)\r\n-            : currentNode && (\r\n-                <div key={currentNode._id}>\r\n-                  <TreeNode\r\n-                    node={currentNode}\r\n-                    left={userMap?.get(currentNode._id)?.left || null}\r\n-                    right={userMap?.get(currentNode._id)?.right || null}\r\n-                    onClick={handleNodeClick}\r\n-                    onAddChild={handleAddChild}\r\n-                  />\r\n-                  {renderInitialNodes(currentNode)}\r\n-                </div>\r\n-              )}\r\n-        </div>\r\n       </div>\r\n-    </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n export default Index;\r\n"
                },
                {
                    "date": 1721370206861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,9 @@\n     onAddChild(node._id, selectedOption);\r\n   };\r\n \r\n   return (\r\n+    <>\r\n     <div className={styles.node} onClick={() => onClick(node)}>\r\n       <div className={styles.icon}>\r\n         <i className=\"fas fa-user\"></i>\r\n       </div>\r\n@@ -138,9 +139,14 @@\n         </div>\r\n       )}\r\n \r\n       <div className={styles.sendCoins}>\r\n-        {!showCoinsPopup && (\r\n+       \r\n+        \r\n+      </div>\r\n+      \r\n+    </div>\r\n+    {!showCoinsPopup && (\r\n           <button\r\n             className={`${styles.sendCoinsButton} ${\r\n               updatingCoins ? styles.updating : \"\"\r\n             }`}\r\n@@ -164,10 +170,9 @@\n               Update Coins\r\n             </button>\r\n           </div>\r\n         )}\r\n-      </div>\r\n-    </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n const Index: React.FC = () => {\r\n@@ -194,8 +199,24 @@\n         setUsers(response.data);\r\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n+        const email =localStorage.getItem('emails')\r\n+        console.log(\"aaa\",email)\r\n+  // Fetch user's coins\r\n+  const coinsResponse = await axios.post(\r\n+    'https://www.referback.trollsufficient.com/admin/coins',\r\n+    { email },\r\n+  );\r\n+\r\n+  // Log the entire response to check its structure\r\n+  // console.log('coinsResponse:', coinsResponse);\r\n+\r\n+  const userCoins = coinsResponse.data.Coins;\r\n+\r\n+  localStorage.setItem('userCoins', userCoins); \r\n+//  console.log(user)\r\n+\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n@@ -214,40 +235,14 @@\n     parentId: string,\r\n     selectedOption: \"left\" | \"right\"\r\n   ) => {\r\n     try {\r\n-      const apiEndpoint =\r\n-        selectedOption === \"left\"\r\n-          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n-          : `https://www.referback.trollsufficient.com/admin/add-right-child/${parentId}`;\r\n+      // Implement add child logic here\r\n \r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-\r\n-      const response = await axios.put(apiEndpoint, {}, {\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n-      });\r\n-\r\n-      if (response.status !== 200) {\r\n-        throw new Error(\"Failed to add child\");\r\n-      }\r\n-\r\n-      console.log(\"Child added successfully:\", response.data);\r\n-\r\n-      // Update state to reflect changes without page reload\r\n-      const updatedUsers = [...users, response.data];\r\n-      setUsers(updatedUsers);\r\n-      const updatedMap = createBinaryTree(updatedUsers);\r\n-      setUserMap(updatedMap);\r\n-\r\n-      // Update currentNode if the added child belongs to it\r\n-      if (currentNode?._id === parentId) {\r\n-        setCurrentNode(response.data);\r\n-      }\r\n+      // Reload the page after adding the child to reflect changes\r\n+      window.location.reload();\r\n     } catch (error) {\r\n-      console.error(\"Error adding child:\", error);\r\n+      console.error(\"Error handling add child:\", error);\r\n     }\r\n   };\r\n \r\n   const renderInitialNodes = (node: User | null) => {\r\n@@ -290,31 +285,61 @@\n       </div>\r\n     );\r\n   };\r\n \r\n+  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n+    if (!node) return null;\r\n+\r\n+    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n+    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n+\r\n+    return (\r\n+      <div key={node._id}>\r\n+        <TreeNode\r\n+          node={node}\r\n+          left={userMap?.get(node._id)?.left || null}\r\n+          right={userMap?.get(node._id)?.right || null}\r\n+          onClick={handleNodeClick}\r\n+          onAddChild={handleAddChild}\r\n+        />\r\n+        <div className={styles.children}>\r\n+          {leftNode && renderCompleteTree(leftNode)}\r\n+          {rightNode && renderCompleteTree(rightNode)}\r\n+        </div>\r\n+      </div>\r\n+    );\r\n+  };\r\n+\r\n   return (\r\n-    <>\r\n+    <div>\r\n       <Navbar />\r\n       <div className={styles.container}>\r\n-        <div className={styles.tree}>\r\n-          <div className={styles.title}>Binary Tree</div>\r\n-          <div className={styles.treeContainer}>\r\n-            {currentNode && (\r\n-              <div className={styles.currentNode}>\r\n-                <TreeNode\r\n-                  node={currentNode}\r\n-                  left={userMap?.get(currentNode._id)?.left}\r\n-                  right={userMap?.get(currentNode._id)?.right}\r\n-                  onClick={handleNodeClick}\r\n-                  onAddChild={handleAddChild}\r\n-                />\r\n-              </div>\r\n-            )}\r\n-            {renderInitialNodes(currentNode)}\r\n-          </div>\r\n+        <div className={styles.buttonWrapper}>\r\n+          <button\r\n+            className={styles.toggleButton}\r\n+            onClick={() => setViewAll(!viewAll)}\r\n+          >\r\n+            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n+          </button>\r\n         </div>\r\n+        <div className={styles.treeContainer}>\r\n+          {viewAll\r\n+            ? renderCompleteTree(currentNode)\r\n+            : currentNode && (\r\n+                <div key={currentNode._id}>\r\n+                  <TreeNode\r\n+                    node={currentNode}\r\n+                    left={userMap?.get(currentNode._id)?.left || null}\r\n+                    right={userMap?.get(currentNode._id)?.right || null}\r\n+                    onClick={handleNodeClick}\r\n+                    onAddChild={handleAddChild}\r\n+                  />\r\n+                  {renderInitialNodes(currentNode)}\r\n+                </div>\r\n+              )}\r\n+        </div>\r\n       </div>\r\n-    </>\r\n+    </div>\r\n   );\r\n };\r\n \r\n export default Index;\r\n"
                },
                {
                    "date": 1721370263478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,13 @@\n   left: TreeNodeProps | null;\r\n   right: TreeNodeProps | null;\r\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+  refreshKey: number; // Pass refreshKey as prop\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, TreeNodeProps>();\r\n+  const userMap = new Map<string, any>();\r\n \r\n   users.forEach((user) => {\r\n     userMap.set(user._id, { node: user, left: null, right: null });\r\n   });\r\n@@ -50,8 +51,9 @@\n   left,\r\n   right,\r\n   onClick,\r\n   onAddChild,\r\n+  refreshKey,\r\n }) => {\r\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n@@ -76,15 +78,19 @@\n           },\r\n         }\r\n       );\r\n \r\n+      if (response.status !== 200) {\r\n+        throw new Error(\"Failed to update coins\");\r\n+      }\r\n+\r\n       console.log(\"Coins updated successfully:\", response.data);\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n-      // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n+      // Trigger refresh by incrementing refreshKey\r\n+      handleRefresh();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n@@ -104,8 +110,9 @@\n       <div className={styles.email}>{node.email}</div>\r\n       <div className={styles.id}>Coins: {node.coins}</div>\r\n       <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n \r\n+      {/* Check if left child exists before rendering the button */}\r\n       {!left && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n@@ -115,8 +122,9 @@\n           </button>\r\n         </div>\r\n       )}\r\n \r\n+      {/* Check if right child exists before rendering the button */}\r\n       {!right && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n@@ -139,14 +147,9 @@\n         </div>\r\n       )}\r\n \r\n       <div className={styles.sendCoins}>\r\n-       \r\n-        \r\n-      </div>\r\n-      \r\n-    </div>\r\n-    {!showCoinsPopup && (\r\n+        {!showCoinsPopup && (\r\n           <button\r\n             className={`${styles.sendCoinsButton} ${\r\n               updatingCoins ? styles.updating : \"\"\r\n             }`}\r\n@@ -170,8 +173,10 @@\n               Update Coins\r\n             </button>\r\n           </div>\r\n         )}\r\n+      </div>\r\n+    </div>\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -181,8 +186,21 @@\n     null\r\n   );\r\n   const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n   const [viewAll, setViewAll] = useState(false);\r\n+  const [formData, setFormData] = useState({\r\n+    name: \"\",\r\n+    email: \"\",\r\n+    password: \"\",\r\n+  });\r\n+  const [parentId, setParentId] = useState(\"\");\r\n+  const [selectedOption, setSelectedOption] = useState<\"left\" | \"right\">(\r\n+    \"left\"\r\n+  );\r\n+  const [error, setError] = useState<Error | null>(null);\r\n+  const [success, setSuccess] = useState(false);\r\n+  const [showForm, setShowForm] = useState(false);\r\n+  const [refreshKey, setRefreshKey] = useState(0); // State to trigger re-render\r\n \r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n@@ -199,24 +217,8 @@\n         setUsers(response.data);\r\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n-        const email =localStorage.getItem('emails')\r\n-        console.log(\"aaa\",email)\r\n-  // Fetch user's coins\r\n-  const coinsResponse = await axios.post(\r\n-    'https://www.referback.trollsufficient.com/admin/coins',\r\n-    { email },\r\n-  );\r\n-\r\n-  // Log the entire response to check its structure\r\n-  // console.log('coinsResponse:', coinsResponse);\r\n-\r\n-  const userCoins = coinsResponse.data.Coins;\r\n-\r\n-  localStorage.setItem('userCoins', userCoins); \r\n-//  console.log(user)\r\n-\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n@@ -224,9 +226,9 @@\n       }\r\n     };\r\n \r\n     fetchUsers();\r\n-  }, []);\r\n+  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n \r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n@@ -235,49 +237,94 @@\n     parentId: string,\r\n     selectedOption: \"left\" | \"right\"\r\n   ) => {\r\n     try {\r\n-      // Implement add child logic here\r\n-\r\n-      // Reload the page after adding the child to reflect changes\r\n-      window.location.reload();\r\n+      setParentId(parentId);\r\n+      setSelectedOption(selectedOption);\r\n+      setShowForm(true);\r\n     } catch (error) {\r\n       console.error(\"Error handling add child:\", error);\r\n     }\r\n   };\r\n \r\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setFormData({\r\n+      ...formData,\r\n+      [e.target.name]: e.target.value,\r\n+    });\r\n+  };\r\n+\r\n+  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+    try {\r\n+      const apiEndpoint =\r\n+        selectedOption === \"left\"\r\n+          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n+          : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n+\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+\r\n+      const response = await axios.put(apiEndpoint, formData, {\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n+\r\n+      if (response.status !== 200) {\r\n+        throw new Error(\"Failed to add child\");\r\n+      }\r\n+\r\n+      console.log(\"Child added successfully:\", response.data);\r\n+      setSuccess(true);\r\n+\r\n+      // Trigger refresh by incrementing refreshKey\r\n+      setRefreshKey((prevKey) => prevKey + 1);\r\n+    } catch (error) {\r\n+      console.error(\"Error adding child:\", error);\r\n+      setError(error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCloseForm = () => {\r\n+    setShowForm(false);\r\n+    setFormData({\r\n+      name: \"\",\r\n+      email: \"\",\r\n+      password: \"\",\r\n+    });\r\n+    setError(null);\r\n+    setSuccess(false);\r\n+  };\r\n+\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n       <div className={styles.children}>\r\n         {userMap && userMap.has(node._id) && (\r\n           <>\r\n             {userMap.get(node._id)!.left && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.left!.node._id}\r\n-              >\r\n+              <div className={styles.child}>\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.left!.node}\r\n                   left={userMap.get(node._id)!.left!.left}\r\n                   right={userMap.get(node._id)!.left!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n             {userMap.get(node._id)!.right && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.right!.node._id}\r\n-              >\r\n+              <div className={styles.child}>\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.right!.node}\r\n                   left={userMap.get(node._id)!.right!.left}\r\n                   right={userMap.get(node._id)!.right!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n           </>\r\n@@ -292,15 +339,16 @@\n     const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n     const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n \r\n     return (\r\n-      <div key={node._id}>\r\n+      <div>\r\n         <TreeNode\r\n           node={node}\r\n           left={userMap?.get(node._id)?.left || null}\r\n           right={userMap?.get(node._id)?.right || null}\r\n           onClick={handleNodeClick}\r\n           onAddChild={handleAddChild}\r\n+          refreshKey={refreshKey} // Pass refreshKey\r\n         />\r\n         <div className={styles.children}>\r\n           {leftNode && renderCompleteTree(leftNode)}\r\n           {rightNode && renderCompleteTree(rightNode)}\r\n@@ -324,22 +372,71 @@\n         <div className={styles.treeContainer}>\r\n           {viewAll\r\n             ? renderCompleteTree(currentNode)\r\n             : currentNode && (\r\n-                <div key={currentNode._id}>\r\n+                <div>\r\n                   <TreeNode\r\n                     node={currentNode}\r\n                     left={userMap?.get(currentNode._id)?.left || null}\r\n                     right={userMap?.get(currentNode._id)?.right || null}\r\n                     onClick={handleNodeClick}\r\n                     onAddChild={handleAddChild}\r\n+                    refreshKey={refreshKey} // Pass refreshKey\r\n                   />\r\n                   {renderInitialNodes(currentNode)}\r\n                 </div>\r\n               )}\r\n         </div>\r\n       </div>\r\n+\r\n+      {showForm && (\r\n+        <div className={styles.modal}>\r\n+          <div className={styles.modalContent}>\r\n+            <span className={styles.close} onClick={handleCloseForm}>\r\n+              &times;\r\n+            </span>\r\n+            <form onSubmit={handleSubmit} className={styles.form}>\r\n+              <label>\r\n+                Name:\r\n+                <input\r\n+                  type=\"text\"\r\n+                  name=\"name\"\r\n+                  value={formData.name}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Email:\r\n+                <input\r\n+                  type=\"email\"\r\n+                  name=\"email\"\r\n+                  value={formData.email}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Password:\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={formData.password}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <button type=\"submit\">Add Child</button>\r\n+            </form>\r\n+            {error && (\r\n+              <div className={styles.error}>Error: {error.message}</div>\r\n+            )}\r\n+            {success && (\r\n+              <div className={styles.success}>\r\n+                Child added successfully!\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\r\n+export default Index;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721370462707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n }) => {\r\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n+  const [refreshKey, setRefreshKey] = useState(0);\r\n \r\n   const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     setNewCoins(e.target.value);\r\n   };\r\n@@ -88,9 +89,10 @@\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n       // Trigger refresh by incrementing refreshKey\r\n-      handleRefresh();\r\n+      // handleRefresh();\r\n+      setRefreshKey((prevKey) => prevKey + 1);\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n"
                },
                {
                    "date": 1721370648500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   refreshKey: number; // Pass refreshKey as prop\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, any>();\r\n+  const userMap = new Map<string, TreeNodeProps>();\r\n \r\n   users.forEach((user) => {\r\n     userMap.set(user._id, { node: user, left: null, right: null });\r\n   });\r\n@@ -56,9 +56,8 @@\n }) => {\r\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n-  const [refreshKey, setRefreshKey] = useState(0);\r\n \r\n   const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     setNewCoins(e.target.value);\r\n   };\r\n@@ -89,96 +88,99 @@\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n       // Trigger refresh by incrementing refreshKey\r\n-      // handleRefresh();\r\n-      setRefreshKey((prevKey) => prevKey + 1);\r\n+      refreshKeyFunc();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n   };\r\n \r\n+  const refreshKeyFunc = () => {\r\n+    refreshKeyFunc(prev => prev + 1);\r\n+  };\r\n+\r\n   const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n     onAddChild(node._id, selectedOption);\r\n   };\r\n \r\n   return (\r\n     <>\r\n-    <div className={styles.node} onClick={() => onClick(node)}>\r\n-      <div className={styles.icon}>\r\n-        <i className=\"fas fa-user\"></i>\r\n-      </div>\r\n-      <div className={styles.name}>{node.name}</div>\r\n-      <div className={styles.email}>{node.email}</div>\r\n-      <div className={styles.id}>Coins: {node.coins}</div>\r\n-      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n-\r\n-      {/* Check if left child exists before rendering the button */}\r\n-      {!left && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Left Child\r\n-          </button>\r\n+      <div className={styles.node} onClick={() => onClick(node)}>\r\n+        <div className={styles.icon}>\r\n+          <i className=\"fas fa-user\"></i>\r\n         </div>\r\n-      )}\r\n+        <div className={styles.name}>{node.name}</div>\r\n+        <div className={styles.email}>{node.email}</div>\r\n+        <div className={styles.id}>Coins: {node.coins}</div>\r\n+        <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n \r\n-      {/* Check if right child exists before rendering the button */}\r\n-      {!right && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Right Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n+        {/* Check if left child exists before rendering the button */}\r\n+        {!left && (\r\n+          <div className={styles.addChild}>\r\n+            <button\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"left\")}\r\n+            >\r\n+              <i className=\"fas fa-plus\"></i> Add Left Child\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n \r\n-      {left && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-        </div>\r\n-      )}\r\n+        {/* Check if right child exists before rendering the button */}\r\n+        {!right && (\r\n+          <div className={styles.addChild}>\r\n+            <button\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"right\")}\r\n+            >\r\n+              <i className=\"fas fa-plus\"></i> Add Right Child\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n \r\n-      {right && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-        </div>\r\n-      )}\r\n+        {left && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+          </div>\r\n+        )}\r\n \r\n-      <div className={styles.sendCoins}>\r\n-        {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n+        {right && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+          </div>\r\n         )}\r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n+\r\n+        <div className={styles.sendCoins}>\r\n+          {!showCoinsPopup && (\r\n             <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n+              className={`${styles.sendCoinsButton} ${\r\n+                updatingCoins ? styles.updating : \"\"\r\n+              }`}\r\n+              onClick={() => setShowCoinsPopup(true)}\r\n             >\r\n-              Update Coins\r\n+              Send Coins\r\n             </button>\r\n-          </div>\r\n-        )}\r\n+          )}\r\n+          {showCoinsPopup && (\r\n+            <div className={styles.coinsPopup}>\r\n+              <input\r\n+                type=\"number\"\r\n+                placeholder=\"Enter Coins\"\r\n+                value={newCoins}\r\n+                onChange={handleCoinsChange}\r\n+              />\r\n+              <button\r\n+                className={styles.updateCoinsButton}\r\n+                onClick={handleUpdateCoins}\r\n+              >\r\n+                Update Coins\r\n+              </button>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n-    </div>\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -440,5 +442,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\n\\ No newline at end of file\n+export default Index;\r\n"
                },
                {
                    "date": 1721370769455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n   refreshKey: number; // Pass refreshKey as prop\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, TreeNodeProps>();\r\n+  const userMap = new Map<string, any>();\r\n \r\n   users.forEach((user) => {\r\n     userMap.set(user._id, { node: user, left: null, right: null });\r\n   });\r\n@@ -88,99 +88,96 @@\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n       // Trigger refresh by incrementing refreshKey\r\n-      refreshKeyFunc();\r\n+      // handleRefresh();\r\n+       window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n   };\r\n \r\n-  const refreshKeyFunc = () => {\r\n-    refreshKeyFunc(prev => prev + 1);\r\n-  };\r\n-\r\n   const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n     onAddChild(node._id, selectedOption);\r\n   };\r\n \r\n   return (\r\n     <>\r\n-      <div className={styles.node} onClick={() => onClick(node)}>\r\n-        <div className={styles.icon}>\r\n-          <i className=\"fas fa-user\"></i>\r\n+    <div className={styles.node} onClick={() => onClick(node)}>\r\n+      <div className={styles.icon}>\r\n+        <i className=\"fas fa-user\"></i>\r\n+      </div>\r\n+      <div className={styles.name}>{node.name}</div>\r\n+      <div className={styles.email}>{node.email}</div>\r\n+      <div className={styles.id}>Coins: {node.coins}</div>\r\n+      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+      {/* Check if left child exists before rendering the button */}\r\n+      {!left && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Left Child\r\n+          </button>\r\n         </div>\r\n-        <div className={styles.name}>{node.name}</div>\r\n-        <div className={styles.email}>{node.email}</div>\r\n-        <div className={styles.id}>Coins: {node.coins}</div>\r\n-        <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+      )}\r\n \r\n-        {/* Check if left child exists before rendering the button */}\r\n-        {!left && (\r\n-          <div className={styles.addChild}>\r\n-            <button\r\n-              className={styles.addChildButton}\r\n-              onClick={() => handleAddChild(\"left\")}\r\n-            >\r\n-              <i className=\"fas fa-plus\"></i> Add Left Child\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n+      {/* Check if right child exists before rendering the button */}\r\n+      {!right && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Right Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n \r\n-        {/* Check if right child exists before rendering the button */}\r\n-        {!right && (\r\n-          <div className={styles.addChild}>\r\n-            <button\r\n-              className={styles.addChildButton}\r\n-              onClick={() => handleAddChild(\"right\")}\r\n-            >\r\n-              <i className=\"fas fa-plus\"></i> Add Right Child\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n+      {left && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+        </div>\r\n+      )}\r\n \r\n-        {left && (\r\n-          <div className={styles.lineWrapper}>\r\n-            <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-          </div>\r\n-        )}\r\n+      {right && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+        </div>\r\n+      )}\r\n \r\n-        {right && (\r\n-          <div className={styles.lineWrapper}>\r\n-            <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-          </div>\r\n+      <div className={styles.sendCoins}>\r\n+        {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n         )}\r\n-\r\n-        <div className={styles.sendCoins}>\r\n-          {!showCoinsPopup && (\r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n             <button\r\n-              className={`${styles.sendCoinsButton} ${\r\n-                updatingCoins ? styles.updating : \"\"\r\n-              }`}\r\n-              onClick={() => setShowCoinsPopup(true)}\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n             >\r\n-              Send Coins\r\n+              Update Coins\r\n             </button>\r\n-          )}\r\n-          {showCoinsPopup && (\r\n-            <div className={styles.coinsPopup}>\r\n-              <input\r\n-                type=\"number\"\r\n-                placeholder=\"Enter Coins\"\r\n-                value={newCoins}\r\n-                onChange={handleCoinsChange}\r\n-              />\r\n-              <button\r\n-                className={styles.updateCoinsButton}\r\n-                onClick={handleUpdateCoins}\r\n-              >\r\n-                Update Coins\r\n-              </button>\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n+          </div>\r\n+        )}\r\n       </div>\r\n+    </div>\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -442,5 +439,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\r\n+export default Index;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721370805964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,13 +22,12 @@\n   left: TreeNodeProps | null;\r\n   right: TreeNodeProps | null;\r\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-  refreshKey: number; // Pass refreshKey as prop\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, any>();\r\n+  const userMap = new Map<string, TreeNodeProps>();\r\n \r\n   users.forEach((user) => {\r\n     userMap.set(user._id, { node: user, left: null, right: null });\r\n   });\r\n@@ -51,9 +50,8 @@\n   left,\r\n   right,\r\n   onClick,\r\n   onAddChild,\r\n-  refreshKey,\r\n }) => {\r\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n@@ -78,20 +76,15 @@\n           },\r\n         }\r\n       );\r\n \r\n-      if (response.status !== 200) {\r\n-        throw new Error(\"Failed to update coins\");\r\n-      }\r\n-\r\n       console.log(\"Coins updated successfully:\", response.data);\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n-      // Trigger refresh by incrementing refreshKey\r\n-      // handleRefresh();\r\n-       window.location.reload();\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n@@ -111,9 +104,8 @@\n       <div className={styles.email}>{node.email}</div>\r\n       <div className={styles.id}>Coins: {node.coins}</div>\r\n       <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n \r\n-      {/* Check if left child exists before rendering the button */}\r\n       {!left && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n@@ -123,9 +115,8 @@\n           </button>\r\n         </div>\r\n       )}\r\n \r\n-      {/* Check if right child exists before rendering the button */}\r\n       {!right && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n@@ -148,18 +139,9 @@\n         </div>\r\n       )}\r\n \r\n       <div className={styles.sendCoins}>\r\n-        {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n+       \r\n         {showCoinsPopup && (\r\n           <div className={styles.coinsPopup}>\r\n             <input\r\n               type=\"number\"\r\n@@ -175,9 +157,20 @@\n             </button>\r\n           </div>\r\n         )}\r\n       </div>\r\n+      \r\n     </div>\r\n+    {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -187,21 +180,8 @@\n     null\r\n   );\r\n   const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n   const [viewAll, setViewAll] = useState(false);\r\n-  const [formData, setFormData] = useState({\r\n-    name: \"\",\r\n-    email: \"\",\r\n-    password: \"\",\r\n-  });\r\n-  const [parentId, setParentId] = useState(\"\");\r\n-  const [selectedOption, setSelectedOption] = useState<\"left\" | \"right\">(\r\n-    \"left\"\r\n-  );\r\n-  const [error, setError] = useState<Error | null>(null);\r\n-  const [success, setSuccess] = useState(false);\r\n-  const [showForm, setShowForm] = useState(false);\r\n-  const [refreshKey, setRefreshKey] = useState(0); // State to trigger re-render\r\n \r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n@@ -218,8 +198,24 @@\n         setUsers(response.data);\r\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n+        const email =localStorage.getItem('emails')\r\n+        console.log(\"aaa\",email)\r\n+  // Fetch user's coins\r\n+  const coinsResponse = await axios.post(\r\n+    'https://www.referback.trollsufficient.com/admin/coins',\r\n+    { email },\r\n+  );\r\n+\r\n+  // Log the entire response to check its structure\r\n+  // console.log('coinsResponse:', coinsResponse);\r\n+\r\n+  const userCoins = coinsResponse.data.Coins;\r\n+\r\n+  localStorage.setItem('userCoins', userCoins); \r\n+ console.log\r\n+\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n@@ -227,9 +223,9 @@\n       }\r\n     };\r\n \r\n     fetchUsers();\r\n-  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n+  }, []);\r\n \r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n@@ -238,94 +234,49 @@\n     parentId: string,\r\n     selectedOption: \"left\" | \"right\"\r\n   ) => {\r\n     try {\r\n-      setParentId(parentId);\r\n-      setSelectedOption(selectedOption);\r\n-      setShowForm(true);\r\n+      // Implement add child logic here\r\n+\r\n+      // Reload the page after adding the child to reflect changes\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error handling add child:\", error);\r\n     }\r\n   };\r\n \r\n-  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    setFormData({\r\n-      ...formData,\r\n-      [e.target.name]: e.target.value,\r\n-    });\r\n-  };\r\n-\r\n-  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n-    e.preventDefault();\r\n-    try {\r\n-      const apiEndpoint =\r\n-        selectedOption === \"left\"\r\n-          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n-          : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n-\r\n-      const token = localStorage.getItem(\"accessToken\");\r\n-\r\n-      const response = await axios.put(apiEndpoint, formData, {\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n-      });\r\n-\r\n-      if (response.status !== 200) {\r\n-        throw new Error(\"Failed to add child\");\r\n-      }\r\n-\r\n-      console.log(\"Child added successfully:\", response.data);\r\n-      setSuccess(true);\r\n-\r\n-      // Trigger refresh by incrementing refreshKey\r\n-      setRefreshKey((prevKey) => prevKey + 1);\r\n-    } catch (error) {\r\n-      console.error(\"Error adding child:\", error);\r\n-      setError(error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCloseForm = () => {\r\n-    setShowForm(false);\r\n-    setFormData({\r\n-      name: \"\",\r\n-      email: \"\",\r\n-      password: \"\",\r\n-    });\r\n-    setError(null);\r\n-    setSuccess(false);\r\n-  };\r\n-\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n       <div className={styles.children}>\r\n         {userMap && userMap.has(node._id) && (\r\n           <>\r\n             {userMap.get(node._id)!.left && (\r\n-              <div className={styles.child}>\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.left!.node._id}\r\n+              >\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.left!.node}\r\n                   left={userMap.get(node._id)!.left!.left}\r\n                   right={userMap.get(node._id)!.left!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n-                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n             {userMap.get(node._id)!.right && (\r\n-              <div className={styles.child}>\r\n+              <div\r\n+                className={styles.child}\r\n+                key={userMap.get(node._id)!.right!.node._id}\r\n+              >\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.right!.node}\r\n                   left={userMap.get(node._id)!.right!.left}\r\n                   right={userMap.get(node._id)!.right!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n-                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n           </>\r\n@@ -340,16 +291,15 @@\n     const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n     const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n \r\n     return (\r\n-      <div>\r\n+      <div key={node._id}>\r\n         <TreeNode\r\n           node={node}\r\n           left={userMap?.get(node._id)?.left || null}\r\n           right={userMap?.get(node._id)?.right || null}\r\n           onClick={handleNodeClick}\r\n           onAddChild={handleAddChild}\r\n-          refreshKey={refreshKey} // Pass refreshKey\r\n         />\r\n         <div className={styles.children}>\r\n           {leftNode && renderCompleteTree(leftNode)}\r\n           {rightNode && renderCompleteTree(rightNode)}\r\n@@ -373,71 +323,22 @@\n         <div className={styles.treeContainer}>\r\n           {viewAll\r\n             ? renderCompleteTree(currentNode)\r\n             : currentNode && (\r\n-                <div>\r\n+                <div key={currentNode._id}>\r\n                   <TreeNode\r\n                     node={currentNode}\r\n                     left={userMap?.get(currentNode._id)?.left || null}\r\n                     right={userMap?.get(currentNode._id)?.right || null}\r\n                     onClick={handleNodeClick}\r\n                     onAddChild={handleAddChild}\r\n-                    refreshKey={refreshKey} // Pass refreshKey\r\n                   />\r\n                   {renderInitialNodes(currentNode)}\r\n                 </div>\r\n               )}\r\n         </div>\r\n       </div>\r\n-\r\n-      {showForm && (\r\n-        <div className={styles.modal}>\r\n-          <div className={styles.modalContent}>\r\n-            <span className={styles.close} onClick={handleCloseForm}>\r\n-              &times;\r\n-            </span>\r\n-            <form onSubmit={handleSubmit} className={styles.form}>\r\n-              <label>\r\n-                Name:\r\n-                <input\r\n-                  type=\"text\"\r\n-                  name=\"name\"\r\n-                  value={formData.name}\r\n-                  onChange={handleChange}\r\n-                />\r\n-              </label>\r\n-              <label>\r\n-                Email:\r\n-                <input\r\n-                  type=\"email\"\r\n-                  name=\"email\"\r\n-                  value={formData.email}\r\n-                  onChange={handleChange}\r\n-                />\r\n-              </label>\r\n-              <label>\r\n-                Password:\r\n-                <input\r\n-                  type=\"password\"\r\n-                  name=\"password\"\r\n-                  value={formData.password}\r\n-                  onChange={handleChange}\r\n-                />\r\n-              </label>\r\n-              <button type=\"submit\">Add Child</button>\r\n-            </form>\r\n-            {error && (\r\n-              <div className={styles.error}>Error: {error.message}</div>\r\n-            )}\r\n-            {success && (\r\n-              <div className={styles.success}>\r\n-                Child added successfully!\r\n-              </div>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n\\ No newline at end of file\n-export default Index;\n+export default Index;\r\n"
                },
                {
                    "date": 1721370825663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n       // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n+      // window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n@@ -340,5 +340,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\n\\ No newline at end of file\n+export default Index;\r\n"
                },
                {
                    "date": 1721370841311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n       // Reload the page to reflect updated coins\r\n-      // window.location.reload();\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n"
                },
                {
                    "date": 1721370852763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n       // Reload the page to reflect updated coins\r\n-      window.location.reload();\r\n+      // window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n"
                },
                {
                    "date": 1721370867658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n       // Reload the page to reflect updated coins\r\n-      // window.location.reload();\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n"
                },
                {
                    "date": 1721370921386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,13 @@\n   left: TreeNodeProps | null;\r\n   right: TreeNodeProps | null;\r\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n+  refreshKey: number; // Pass refreshKey as prop\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n-  const userMap = new Map<string, TreeNodeProps>();\r\n+  const userMap = new Map<string, any>();\r\n \r\n   users.forEach((user) => {\r\n     userMap.set(user._id, { node: user, left: null, right: null });\r\n   });\r\n@@ -50,8 +51,9 @@\n   left,\r\n   right,\r\n   onClick,\r\n   onAddChild,\r\n+  refreshKey,\r\n }) => {\r\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n@@ -76,14 +78,19 @@\n           },\r\n         }\r\n       );\r\n \r\n+      if (response.status !== 200) {\r\n+        throw new Error(\"Failed to update coins\");\r\n+      }\r\n+\r\n       console.log(\"Coins updated successfully:\", response.data);\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n \r\n-      // Reload the page to reflect updated coins\r\n+      // Trigger refresh by incrementing refreshKey\r\n+      // handleRefresh();\r\n       window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n@@ -104,8 +111,9 @@\n       <div className={styles.email}>{node.email}</div>\r\n       <div className={styles.id}>Coins: {node.coins}</div>\r\n       <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n \r\n+      {/* Check if left child exists before rendering the button */}\r\n       {!left && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n@@ -115,8 +123,9 @@\n           </button>\r\n         </div>\r\n       )}\r\n \r\n+      {/* Check if right child exists before rendering the button */}\r\n       {!right && (\r\n         <div className={styles.addChild}>\r\n           <button\r\n             className={styles.addChildButton}\r\n@@ -139,9 +148,18 @@\n         </div>\r\n       )}\r\n \r\n       <div className={styles.sendCoins}>\r\n-       \r\n+        {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n         {showCoinsPopup && (\r\n           <div className={styles.coinsPopup}>\r\n             <input\r\n               type=\"number\"\r\n@@ -157,20 +175,9 @@\n             </button>\r\n           </div>\r\n         )}\r\n       </div>\r\n-      \r\n     </div>\r\n-    {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -180,8 +187,21 @@\n     null\r\n   );\r\n   const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n   const [viewAll, setViewAll] = useState(false);\r\n+  const [formData, setFormData] = useState({\r\n+    name: \"\",\r\n+    email: \"\",\r\n+    password: \"\",\r\n+  });\r\n+  const [parentId, setParentId] = useState(\"\");\r\n+  const [selectedOption, setSelectedOption] = useState<\"left\" | \"right\">(\r\n+    \"left\"\r\n+  );\r\n+  const [error, setError] = useState<Error | null>(null);\r\n+  const [success, setSuccess] = useState(false);\r\n+  const [showForm, setShowForm] = useState(false);\r\n+  const [refreshKey, setRefreshKey] = useState(0); // State to trigger re-render\r\n \r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n@@ -198,24 +218,8 @@\n         setUsers(response.data);\r\n         const map = createBinaryTree(response.data);\r\n         setUserMap(map);\r\n \r\n-        const email =localStorage.getItem('emails')\r\n-        console.log(\"aaa\",email)\r\n-  // Fetch user's coins\r\n-  const coinsResponse = await axios.post(\r\n-    'https://www.referback.trollsufficient.com/admin/coins',\r\n-    { email },\r\n-  );\r\n-\r\n-  // Log the entire response to check its structure\r\n-  // console.log('coinsResponse:', coinsResponse);\r\n-\r\n-  const userCoins = coinsResponse.data.Coins;\r\n-\r\n-  localStorage.setItem('userCoins', userCoins); \r\n- console.log\r\n-\r\n         if (response.data.length > 0) {\r\n           setCurrentNode(response.data[0]);\r\n         }\r\n       } catch (error) {\r\n@@ -223,9 +227,9 @@\n       }\r\n     };\r\n \r\n     fetchUsers();\r\n-  }, []);\r\n+  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n \r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n@@ -234,49 +238,94 @@\n     parentId: string,\r\n     selectedOption: \"left\" | \"right\"\r\n   ) => {\r\n     try {\r\n-      // Implement add child logic here\r\n-\r\n-      // Reload the page after adding the child to reflect changes\r\n-      window.location.reload();\r\n+      setParentId(parentId);\r\n+      setSelectedOption(selectedOption);\r\n+      setShowForm(true);\r\n     } catch (error) {\r\n       console.error(\"Error handling add child:\", error);\r\n     }\r\n   };\r\n \r\n+  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    setFormData({\r\n+      ...formData,\r\n+      [e.target.name]: e.target.value,\r\n+    });\r\n+  };\r\n+\r\n+  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n+    e.preventDefault();\r\n+    try {\r\n+      const apiEndpoint =\r\n+        selectedOption === \"left\"\r\n+          ? `https://www.referback.trollsufficient.com/admin/add-left-child/${parentId}`\r\n+          : `https://www.referback.trollsufficient.com/add-right-child/${parentId}`;\r\n+\r\n+      const token = localStorage.getItem(\"accessToken\");\r\n+\r\n+      const response = await axios.put(apiEndpoint, formData, {\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n+\r\n+      if (response.status !== 200) {\r\n+        throw new Error(\"Failed to add child\");\r\n+      }\r\n+\r\n+      console.log(\"Child added successfully:\", response.data);\r\n+      setSuccess(true);\r\n+\r\n+      // Trigger refresh by incrementing refreshKey\r\n+      setRefreshKey((prevKey) => prevKey + 1);\r\n+    } catch (error) {\r\n+      console.error(\"Error adding child:\", error);\r\n+      setError(error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCloseForm = () => {\r\n+    setShowForm(false);\r\n+    setFormData({\r\n+      name: \"\",\r\n+      email: \"\",\r\n+      password: \"\",\r\n+    });\r\n+    setError(null);\r\n+    setSuccess(false);\r\n+  };\r\n+\r\n   const renderInitialNodes = (node: User | null) => {\r\n     if (!node) return null;\r\n \r\n     return (\r\n       <div className={styles.children}>\r\n         {userMap && userMap.has(node._id) && (\r\n           <>\r\n             {userMap.get(node._id)!.left && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.left!.node._id}\r\n-              >\r\n+              <div className={styles.child}>\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.left!.node}\r\n                   left={userMap.get(node._id)!.left!.left}\r\n                   right={userMap.get(node._id)!.left!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n             {userMap.get(node._id)!.right && (\r\n-              <div\r\n-                className={styles.child}\r\n-                key={userMap.get(node._id)!.right!.node._id}\r\n-              >\r\n+              <div className={styles.child}>\r\n                 <TreeNode\r\n                   node={userMap.get(node._id)!.right!.node}\r\n                   left={userMap.get(node._id)!.right!.left}\r\n                   right={userMap.get(node._id)!.right!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n           </>\r\n@@ -291,15 +340,16 @@\n     const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n     const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n \r\n     return (\r\n-      <div key={node._id}>\r\n+      <div>\r\n         <TreeNode\r\n           node={node}\r\n           left={userMap?.get(node._id)?.left || null}\r\n           right={userMap?.get(node._id)?.right || null}\r\n           onClick={handleNodeClick}\r\n           onAddChild={handleAddChild}\r\n+          refreshKey={refreshKey} // Pass refreshKey\r\n         />\r\n         <div className={styles.children}>\r\n           {leftNode && renderCompleteTree(leftNode)}\r\n           {rightNode && renderCompleteTree(rightNode)}\r\n@@ -323,22 +373,71 @@\n         <div className={styles.treeContainer}>\r\n           {viewAll\r\n             ? renderCompleteTree(currentNode)\r\n             : currentNode && (\r\n-                <div key={currentNode._id}>\r\n+                <div>\r\n                   <TreeNode\r\n                     node={currentNode}\r\n                     left={userMap?.get(currentNode._id)?.left || null}\r\n                     right={userMap?.get(currentNode._id)?.right || null}\r\n                     onClick={handleNodeClick}\r\n                     onAddChild={handleAddChild}\r\n+                    refreshKey={refreshKey} // Pass refreshKey\r\n                   />\r\n                   {renderInitialNodes(currentNode)}\r\n                 </div>\r\n               )}\r\n         </div>\r\n       </div>\r\n+\r\n+      {showForm && (\r\n+        <div className={styles.modal}>\r\n+          <div className={styles.modalContent}>\r\n+            <span className={styles.close} onClick={handleCloseForm}>\r\n+              &times;\r\n+            </span>\r\n+            <form onSubmit={handleSubmit} className={styles.form}>\r\n+              <label>\r\n+                Name:\r\n+                <input\r\n+                  type=\"text\"\r\n+                  name=\"name\"\r\n+                  value={formData.name}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Email:\r\n+                <input\r\n+                  type=\"email\"\r\n+                  name=\"email\"\r\n+                  value={formData.email}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <label>\r\n+                Password:\r\n+                <input\r\n+                  type=\"password\"\r\n+                  name=\"password\"\r\n+                  value={formData.password}\r\n+                  onChange={handleChange}\r\n+                />\r\n+              </label>\r\n+              <button type=\"submit\">Add Child</button>\r\n+            </form>\r\n+            {error && (\r\n+              <div className={styles.error}>Error: {error.message}</div>\r\n+            )}\r\n+            {success && (\r\n+              <div className={styles.success}>\r\n+                Child added successfully!\r\n+              </div>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\r\n+export default Index;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721371373387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,15 +83,15 @@\n         throw new Error(\"Failed to update coins\");\r\n       }\r\n \r\n       console.log(\"Coins updated successfully:\", response.data);\r\n+\r\n+      // Update local state without reloading page\r\n+      const updatedUser = { ...node, coins: response.data.coins };\r\n+      onClick(updatedUser); // Trigger parent component update\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n-\r\n-      // Trigger refresh by incrementing refreshKey\r\n-      // handleRefresh();\r\n-      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n@@ -102,82 +102,82 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-    <div className={styles.node} onClick={() => onClick(node)}>\r\n-      <div className={styles.icon}>\r\n-        <i className=\"fas fa-user\"></i>\r\n-      </div>\r\n-      <div className={styles.name}>{node.name}</div>\r\n-      <div className={styles.email}>{node.email}</div>\r\n-      <div className={styles.id}>Coins: {node.coins}</div>\r\n-      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n-\r\n-      {/* Check if left child exists before rendering the button */}\r\n-      {!left && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"left\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Left Child\r\n-          </button>\r\n+      <div className={styles.node} onClick={() => onClick(node)}>\r\n+        <div className={styles.icon}>\r\n+          <i className=\"fas fa-user\"></i>\r\n         </div>\r\n-      )}\r\n+        <div className={styles.name}>{node.name}</div>\r\n+        <div className={styles.email}>{node.email}</div>\r\n+        <div className={styles.id}>Coins: {node.coins}</div>\r\n+        <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n \r\n-      {/* Check if right child exists before rendering the button */}\r\n-      {!right && (\r\n-        <div className={styles.addChild}>\r\n-          <button\r\n-            className={styles.addChildButton}\r\n-            onClick={() => handleAddChild(\"right\")}\r\n-          >\r\n-            <i className=\"fas fa-plus\"></i> Add Right Child\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n+        {/* Check if left child exists before rendering the button */}\r\n+        {!left && (\r\n+          <div className={styles.addChild}>\r\n+            <button\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"left\")}\r\n+            >\r\n+              <i className=\"fas fa-plus\"></i> Add Left Child\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n \r\n-      {left && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-        </div>\r\n-      )}\r\n+        {/* Check if right child exists before rendering the button */}\r\n+        {!right && (\r\n+          <div className={styles.addChild}>\r\n+            <button\r\n+              className={styles.addChildButton}\r\n+              onClick={() => handleAddChild(\"right\")}\r\n+            >\r\n+              <i className=\"fas fa-plus\"></i> Add Right Child\r\n+            </button>\r\n+          </div>\r\n+        )}\r\n \r\n-      {right && (\r\n-        <div className={styles.lineWrapper}>\r\n-          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-        </div>\r\n-      )}\r\n+        {left && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+          </div>\r\n+        )}\r\n \r\n-      <div className={styles.sendCoins}>\r\n-        {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n+        {right && (\r\n+          <div className={styles.lineWrapper}>\r\n+            <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+          </div>\r\n         )}\r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n+\r\n+        <div className={styles.sendCoins}>\r\n+          {!showCoinsPopup && (\r\n             <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n+              className={`${styles.sendCoinsButton} ${\r\n+                updatingCoins ? styles.updating : \"\"\r\n+              }`}\r\n+              onClick={() => setShowCoinsPopup(true)}\r\n             >\r\n-              Update Coins\r\n+              Send Coins\r\n             </button>\r\n-          </div>\r\n-        )}\r\n+          )}\r\n+          {showCoinsPopup && (\r\n+            <div className={styles.coinsPopup}>\r\n+              <input\r\n+                type=\"number\"\r\n+                placeholder=\"Enter Coins\"\r\n+                value={newCoins}\r\n+                onChange={handleCoinsChange}\r\n+              />\r\n+              <button\r\n+                className={styles.updateCoinsButton}\r\n+                onClick={handleUpdateCoins}\r\n+              >\r\n+                Update Coins\r\n+              </button>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n       </div>\r\n-    </div>\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -439,5 +439,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\n\\ No newline at end of file\n+export default Index;\r\n"
                },
                {
                    "date": 1721371510050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   left: TreeNodeProps | null;\r\n   right: TreeNodeProps | null;\r\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-  refreshKey: number; // Pass refreshKey as prop\r\n+  refreshTree: () => void; // Function to refresh the entire tree\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n   const userMap = new Map<string, any>();\r\n@@ -51,9 +51,9 @@\n   left,\r\n   right,\r\n   onClick,\r\n   onAddChild,\r\n-  refreshKey,\r\n+  refreshTree,\r\n }) => {\r\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n@@ -199,9 +199,8 @@\n   );\r\n   const [error, setError] = useState<Error | null>(null);\r\n   const [success, setSuccess] = useState(false);\r\n   const [showForm, setShowForm] = useState(false);\r\n-  const [refreshKey, setRefreshKey] = useState(0); // State to trigger re-render\r\n \r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n@@ -227,9 +226,9 @@\n       }\r\n     };\r\n \r\n     fetchUsers();\r\n-  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n+  }, []); // Fetch data only once on component mount\r\n \r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n@@ -277,10 +276,10 @@\n \r\n       console.log(\"Child added successfully:\", response.data);\r\n       setSuccess(true);\r\n \r\n-      // Trigger refresh by incrementing refreshKey\r\n-      setRefreshKey((prevKey) => prevKey + 1);\r\n+      // Fetch updated users after adding child\r\n+      fetchUsers();\r\n     } catch (error) {\r\n       console.error(\"Error adding child:\", error);\r\n       setError(error);\r\n     }\r\n@@ -311,9 +310,9 @@\n                   left={userMap.get(node._id)!.left!.left}\r\n                   right={userMap.get(node._id)!.left!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n-                  refreshKey={refreshKey} // Pass refreshKey\r\n+                  refreshTree={fetchUsers} // Pass function to refresh tree\r\n                 />\r\n               </div>\r\n             )}\r\n             {userMap.get(node._id)!.right && (\r\n@@ -323,9 +322,9 @@\n                   left={userMap.get(node._id)!.right!.left}\r\n                   right={userMap.get(node._id)!.right!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n-                  refreshKey={refreshKey} // Pass refreshKey\r\n+                  refreshTree={fetchUsers} // Pass function to refresh tree\r\n                 />\r\n               </div>\r\n             )}\r\n           </>\r\n@@ -347,9 +346,9 @@\n           left={userMap?.get(node._id)?.left || null}\r\n           right={userMap?.get(node._id)?.right || null}\r\n           onClick={handleNodeClick}\r\n           onAddChild={handleAddChild}\r\n-          refreshKey={refreshKey} // Pass refreshKey\r\n+          refreshTree={fetchUsers} // Pass function to refresh tree\r\n         />\r\n         <div className={styles.children}>\r\n           {leftNode && renderCompleteTree(leftNode)}\r\n           {rightNode && renderCompleteTree(rightNode)}\r\n@@ -380,9 +379,9 @@\n                     left={userMap?.get(currentNode._id)?.left || null}\r\n                     right={userMap?.get(currentNode._id)?.right || null}\r\n                     onClick={handleNodeClick}\r\n                     onAddChild={handleAddChild}\r\n-                    refreshKey={refreshKey} // Pass refreshKey\r\n+                    refreshTree={fetchUsers} // Pass function to refresh tree\r\n                   />\r\n                   {renderInitialNodes(currentNode)}\r\n                 </div>\r\n               )}\r\n"
                },
                {
                    "date": 1721371520115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   left: TreeNodeProps | null;\r\n   right: TreeNodeProps | null;\r\n   onClick: (node: User) => void;\r\n   onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n-  refreshTree: () => void; // Function to refresh the entire tree\r\n+  refreshKey: number; // Pass refreshKey as prop\r\n }\r\n \r\n const createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n   const userMap = new Map<string, any>();\r\n@@ -51,9 +51,9 @@\n   left,\r\n   right,\r\n   onClick,\r\n   onAddChild,\r\n-  refreshTree,\r\n+  refreshKey,\r\n }) => {\r\n   const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n   const [newCoins, setNewCoins] = useState(\"\");\r\n   const [updatingCoins, setUpdatingCoins] = useState(false);\r\n@@ -199,8 +199,9 @@\n   );\r\n   const [error, setError] = useState<Error | null>(null);\r\n   const [success, setSuccess] = useState(false);\r\n   const [showForm, setShowForm] = useState(false);\r\n+  const [refreshKey, setRefreshKey] = useState(0); // State to trigger re-render\r\n \r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n@@ -226,9 +227,9 @@\n       }\r\n     };\r\n \r\n     fetchUsers();\r\n-  }, []); // Fetch data only once on component mount\r\n+  }, [refreshKey]); // Trigger fetch on refreshKey change\r\n \r\n   const handleNodeClick = (node: User) => {\r\n     setCurrentNode(node);\r\n   };\r\n@@ -276,10 +277,10 @@\n \r\n       console.log(\"Child added successfully:\", response.data);\r\n       setSuccess(true);\r\n \r\n-      // Fetch updated users after adding child\r\n-      fetchUsers();\r\n+      // Trigger refresh by incrementing refreshKey\r\n+      setRefreshKey((prevKey) => prevKey + 1);\r\n     } catch (error) {\r\n       console.error(\"Error adding child:\", error);\r\n       setError(error);\r\n     }\r\n@@ -310,9 +311,9 @@\n                   left={userMap.get(node._id)!.left!.left}\r\n                   right={userMap.get(node._id)!.left!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n-                  refreshTree={fetchUsers} // Pass function to refresh tree\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n             {userMap.get(node._id)!.right && (\r\n@@ -322,9 +323,9 @@\n                   left={userMap.get(node._id)!.right!.left}\r\n                   right={userMap.get(node._id)!.right!.right}\r\n                   onClick={handleNodeClick}\r\n                   onAddChild={handleAddChild}\r\n-                  refreshTree={fetchUsers} // Pass function to refresh tree\r\n+                  refreshKey={refreshKey} // Pass refreshKey\r\n                 />\r\n               </div>\r\n             )}\r\n           </>\r\n@@ -346,9 +347,9 @@\n           left={userMap?.get(node._id)?.left || null}\r\n           right={userMap?.get(node._id)?.right || null}\r\n           onClick={handleNodeClick}\r\n           onAddChild={handleAddChild}\r\n-          refreshTree={fetchUsers} // Pass function to refresh tree\r\n+          refreshKey={refreshKey} // Pass refreshKey\r\n         />\r\n         <div className={styles.children}>\r\n           {leftNode && renderCompleteTree(leftNode)}\r\n           {rightNode && renderCompleteTree(rightNode)}\r\n@@ -379,9 +380,9 @@\n                     left={userMap?.get(currentNode._id)?.left || null}\r\n                     right={userMap?.get(currentNode._id)?.right || null}\r\n                     onClick={handleNodeClick}\r\n                     onAddChild={handleAddChild}\r\n-                    refreshTree={fetchUsers} // Pass function to refresh tree\r\n+                    refreshKey={refreshKey} // Pass refreshKey\r\n                   />\r\n                   {renderInitialNodes(currentNode)}\r\n                 </div>\r\n               )}\r\n"
                },
                {
                    "date": 1721371609547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,20 +78,15 @@\n           },\r\n         }\r\n       );\r\n \r\n-      if (response.status !== 200) {\r\n-        throw new Error(\"Failed to update coins\");\r\n-      }\r\n-\r\n       console.log(\"Coins updated successfully:\", response.data);\r\n-\r\n-      // Update local state without reloading page\r\n-      const updatedUser = { ...node, coins: response.data.coins };\r\n-      onClick(updatedUser); // Trigger parent component update\r\n       setNewCoins(\"\");\r\n       setShowCoinsPopup(false);\r\n       setUpdatingCoins(false);\r\n+\r\n+      // Reload the page to reflect updated coins\r\n+      window.location.reload();\r\n     } catch (error) {\r\n       console.error(\"Error updating coins:\", error);\r\n       setUpdatingCoins(false);\r\n     }\r\n@@ -102,82 +97,82 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      <div className={styles.node} onClick={() => onClick(node)}>\r\n-        <div className={styles.icon}>\r\n-          <i className=\"fas fa-user\"></i>\r\n+    <div className={styles.node} onClick={() => onClick(node)}>\r\n+      <div className={styles.icon}>\r\n+        <i className=\"fas fa-user\"></i>\r\n+      </div>\r\n+      <div className={styles.name}>{node.name}</div>\r\n+      <div className={styles.email}>{node.email}</div>\r\n+      <div className={styles.id}>Coins: {node.coins}</div>\r\n+      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+\r\n+      {/* Check if left child exists before rendering the button */}\r\n+      {!left && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"left\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Left Child\r\n+          </button>\r\n         </div>\r\n-        <div className={styles.name}>{node.name}</div>\r\n-        <div className={styles.email}>{node.email}</div>\r\n-        <div className={styles.id}>Coins: {node.coins}</div>\r\n-        <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n+      )}\r\n \r\n-        {/* Check if left child exists before rendering the button */}\r\n-        {!left && (\r\n-          <div className={styles.addChild}>\r\n-            <button\r\n-              className={styles.addChildButton}\r\n-              onClick={() => handleAddChild(\"left\")}\r\n-            >\r\n-              <i className=\"fas fa-plus\"></i> Add Left Child\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n+      {/* Check if right child exists before rendering the button */}\r\n+      {!right && (\r\n+        <div className={styles.addChild}>\r\n+          <button\r\n+            className={styles.addChildButton}\r\n+            onClick={() => handleAddChild(\"right\")}\r\n+          >\r\n+            <i className=\"fas fa-plus\"></i> Add Right Child\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n \r\n-        {/* Check if right child exists before rendering the button */}\r\n-        {!right && (\r\n-          <div className={styles.addChild}>\r\n-            <button\r\n-              className={styles.addChildButton}\r\n-              onClick={() => handleAddChild(\"right\")}\r\n-            >\r\n-              <i className=\"fas fa-plus\"></i> Add Right Child\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n+      {left && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n+        </div>\r\n+      )}\r\n \r\n-        {left && (\r\n-          <div className={styles.lineWrapper}>\r\n-            <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n-          </div>\r\n-        )}\r\n+      {right && (\r\n+        <div className={styles.lineWrapper}>\r\n+          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n+        </div>\r\n+      )}\r\n \r\n-        {right && (\r\n-          <div className={styles.lineWrapper}>\r\n-            <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n-          </div>\r\n+      <div className={styles.sendCoins}>\r\n+        {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n         )}\r\n-\r\n-        <div className={styles.sendCoins}>\r\n-          {!showCoinsPopup && (\r\n+        {showCoinsPopup && (\r\n+          <div className={styles.coinsPopup}>\r\n+            <input\r\n+              type=\"number\"\r\n+              placeholder=\"Enter Coins\"\r\n+              value={newCoins}\r\n+              onChange={handleCoinsChange}\r\n+            />\r\n             <button\r\n-              className={`${styles.sendCoinsButton} ${\r\n-                updatingCoins ? styles.updating : \"\"\r\n-              }`}\r\n-              onClick={() => setShowCoinsPopup(true)}\r\n+              className={styles.updateCoinsButton}\r\n+              onClick={handleUpdateCoins}\r\n             >\r\n-              Send Coins\r\n+              Update Coins\r\n             </button>\r\n-          )}\r\n-          {showCoinsPopup && (\r\n-            <div className={styles.coinsPopup}>\r\n-              <input\r\n-                type=\"number\"\r\n-                placeholder=\"Enter Coins\"\r\n-                value={newCoins}\r\n-                onChange={handleCoinsChange}\r\n-              />\r\n-              <button\r\n-                className={styles.updateCoinsButton}\r\n-                onClick={handleUpdateCoins}\r\n-              >\r\n-                Update Coins\r\n-              </button>\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n+          </div>\r\n+        )}\r\n       </div>\r\n+    </div>\r\n     </>\r\n   );\r\n };\r\n \r\n@@ -439,5 +434,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Index;\r\n+export default Index;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1721371673325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,11 @@\n           <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n         </div>\r\n       )}\r\n \r\n-      <div className={styles.sendCoins}>\r\n+     \r\n+    </div>\r\n+    <div className={styles.sendCoins}>\r\n         {!showCoinsPopup && (\r\n           <button\r\n             className={`${styles.sendCoinsButton} ${\r\n               updatingCoins ? styles.updating : \"\"\r\n@@ -170,9 +172,8 @@\n             </button>\r\n           </div>\r\n         )}\r\n       </div>\r\n-    </div>\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1721371684596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,11 +142,9 @@\n           <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n         </div>\r\n       )}\r\n \r\n-     \r\n-    </div>\r\n-    <div className={styles.sendCoins}>\r\n+      <div className={styles.sendCoins}>\r\n         {!showCoinsPopup && (\r\n           <button\r\n             className={`${styles.sendCoinsButton} ${\r\n               updatingCoins ? styles.updating : \"\"\r\n@@ -172,8 +170,9 @@\n             </button>\r\n           </div>\r\n         )}\r\n       </div>\r\n+    </div>\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1721371692827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,18 +143,9 @@\n         </div>\r\n       )}\r\n \r\n       <div className={styles.sendCoins}>\r\n-        {!showCoinsPopup && (\r\n-          <button\r\n-            className={`${styles.sendCoinsButton} ${\r\n-              updatingCoins ? styles.updating : \"\"\r\n-            }`}\r\n-            onClick={() => setShowCoinsPopup(true)}\r\n-          >\r\n-            Send Coins\r\n-          </button>\r\n-        )}\r\n+       \r\n         {showCoinsPopup && (\r\n           <div className={styles.coinsPopup}>\r\n             <input\r\n               type=\"number\"\r\n@@ -171,8 +162,18 @@\n           </div>\r\n         )}\r\n       </div>\r\n     </div>\r\n+    {!showCoinsPopup && (\r\n+          <button\r\n+            className={`${styles.sendCoinsButton} ${\r\n+              updatingCoins ? styles.updating : \"\"\r\n+            }`}\r\n+            onClick={() => setShowCoinsPopup(true)}\r\n+          >\r\n+            Send Coins\r\n+          </button>\r\n+        )}\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1721371721217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,27 +142,9 @@\n           <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n         </div>\r\n       )}\r\n \r\n-      <div className={styles.sendCoins}>\r\n-       \r\n-        {showCoinsPopup && (\r\n-          <div className={styles.coinsPopup}>\r\n-            <input\r\n-              type=\"number\"\r\n-              placeholder=\"Enter Coins\"\r\n-              value={newCoins}\r\n-              onChange={handleCoinsChange}\r\n-            />\r\n-            <button\r\n-              className={styles.updateCoinsButton}\r\n-              onClick={handleUpdateCoins}\r\n-            >\r\n-              Update Coins\r\n-            </button>\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n+      \r\n     </div>\r\n     {!showCoinsPopup && (\r\n           <button\r\n             className={`${styles.sendCoinsButton} ${\r\n@@ -171,9 +153,28 @@\n             onClick={() => setShowCoinsPopup(true)}\r\n           >\r\n             Send Coins\r\n           </button>\r\n-        )}\r\n+        )}  \r\n+        <div className={styles.sendCoins}>\r\n+       \r\n+       {showCoinsPopup && (\r\n+         <div className={styles.coinsPopup}>\r\n+           <input\r\n+             type=\"number\"\r\n+             placeholder=\"Enter Coins\"\r\n+             value={newCoins}\r\n+             onChange={handleCoinsChange}\r\n+           />\r\n+           <button\r\n+             className={styles.updateCoinsButton}\r\n+             onClick={handleUpdateCoins}\r\n+           >\r\n+             Update Coins\r\n+           </button>\r\n+         </div>\r\n+       )}\r\n+     </div>\r\n     </>\r\n   );\r\n };\r\n \r\n"
                }
            ],
            "date": 1721306133685,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./index.module.scss\";\r\nimport Navbar from \"../../Components/Navbar\";\r\nimport axios from \"axios\";\r\nimport io from \"socket.io-client\";\r\n\r\ninterface User {\r\n  _id: string;\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  __v: number;\r\n  leftChild?: string;\r\n  rightChild?: string;\r\n  coins?: number;\r\n  referralCode?: string;\r\n}\r\n\r\ninterface TreeNodeProps {\r\n  node: User;\r\n  left: TreeNodeProps | null;\r\n  right: TreeNodeProps | null;\r\n  onClick: (node: User) => void;\r\n  onAddChild: (parentId: string, selectedOption: \"left\" | \"right\") => void;\r\n}\r\n\r\nconst createBinaryTree = (users: User[]): Map<string, TreeNodeProps> => {\r\n  const userMap = new Map<string, TreeNodeProps>();\r\n\r\n  users.forEach((user) => {\r\n    userMap.set(user._id, { node: user, left: null, right: null });\r\n  });\r\n\r\n  users.forEach((user) => {\r\n    const node = userMap.get(user._id);\r\n    if (user.leftChild && userMap.has(user.leftChild)) {\r\n      node!.left = userMap.get(user.leftChild)!;\r\n    }\r\n    if (user.rightChild && userMap.has(user.rightChild)) {\r\n      node!.right = userMap.get(user.rightChild)!;\r\n    }\r\n  });\r\n\r\n  return userMap;\r\n};\r\n\r\nconst TreeNode: React.FC<TreeNodeProps> = ({\r\n  node,\r\n  left,\r\n  right,\r\n  onClick,\r\n  onAddChild,\r\n}) => {\r\n  const [showCoinsPopup, setShowCoinsPopup] = useState(false);\r\n  const [newCoins, setNewCoins] = useState(\"\");\r\n  const [updatingCoins, setUpdatingCoins] = useState(false);\r\n\r\n  const socket = io(\"https://www.referback.trollsufficient.com\");\r\n\r\n  useEffect(() => {\r\n    socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n      if (node._id === updatedUser._id) {\r\n        node.coins = updatedUser.coins || 0;\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [socket, node]);\r\n\r\n  const handleCoinsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNewCoins(e.target.value);\r\n  };\r\n\r\n  const handleUpdateCoins = async () => {\r\n    try {\r\n      setUpdatingCoins(true);\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      const apiEndpoint = `https://www.referback.trollsufficient.com/admin/distribute-coins/${node.referralCode}`;\r\n\r\n      const response = await axios.post(\r\n        apiEndpoint,\r\n        { coins: newCoins },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      console.log(\"Coins updated successfully:\", response.data);\r\n      setNewCoins(\"\");\r\n      setShowCoinsPopup(false);\r\n      setUpdatingCoins(false);\r\n    } catch (error) {\r\n      console.error(\"Error updating coins:\", error);\r\n      setUpdatingCoins(false);\r\n    }\r\n  };\r\n\r\n  const handleAddChild = (selectedOption: \"left\" | \"right\") => {\r\n    onAddChild(node._id, selectedOption);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.node} onClick={() => onClick(node)}>\r\n      <div className={styles.icon}>\r\n        <i className=\"fas fa-user\"></i>\r\n      </div>\r\n      <div className={styles.name}>{node.name}</div>\r\n      <div className={styles.email}>{node.email}</div>\r\n      <div className={styles.id}>Coins: {node.coins}</div>\r\n      <div className={styles.id}>Referral Code: {node.referralCode}</div>\r\n\r\n      {!left && (\r\n        <div className={styles.addChild}>\r\n          <button\r\n            className={styles.addChildButton}\r\n            onClick={() => handleAddChild(\"left\")}\r\n          >\r\n            <i className=\"fas fa-plus\"></i> Add Left Child\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {!right && (\r\n        <div className={styles.addChild}>\r\n          <button\r\n            className={styles.addChildButton}\r\n            onClick={() => handleAddChild(\"right\")}\r\n          >\r\n            <i className=\"fas fa-plus\"></i> Add Right Child\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {left && (\r\n        <div className={styles.lineWrapper}>\r\n          <div className={`${styles.line} ${styles.lineLeft}`}></div>\r\n        </div>\r\n      )}\r\n\r\n      {right && (\r\n        <div className={styles.lineWrapper}>\r\n          <div className={`${styles.line} ${styles.lineRight}`}></div>\r\n        </div>\r\n      )}\r\n\r\n      <div className={styles.sendCoins}>\r\n        {!showCoinsPopup && (\r\n          <button\r\n            className={`${styles.sendCoinsButton} ${\r\n              updatingCoins ? styles.updating : \"\"\r\n            }`}\r\n            onClick={() => setShowCoinsPopup(true)}\r\n          >\r\n            Send Coins\r\n          </button>\r\n        )}\r\n        {showCoinsPopup && (\r\n          <div className={styles.coinsPopup}>\r\n            <input\r\n              type=\"number\"\r\n              placeholder=\"Enter Coins\"\r\n              value={newCoins}\r\n              onChange={handleCoinsChange}\r\n            />\r\n            <button\r\n              className={styles.updateCoinsButton}\r\n              onClick={handleUpdateCoins}\r\n            >\r\n              Update Coins\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Index: React.FC = () => {\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [userMap, setUserMap] = useState<Map<string, TreeNodeProps> | null>(\r\n    null\r\n  );\r\n  const [currentNode, setCurrentNode] = useState<User | null>(null);\r\n  const [viewAll, setViewAll] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"accessToken\");\r\n        const response = await axios.get(\r\n          \"https://www.referback.trollsufficient.com/admin/all\",\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n        setUsers(response.data);\r\n        const map = createBinaryTree(response.data);\r\n        setUserMap(map);\r\n\r\n        if (response.data.length > 0) {\r\n          setCurrentNode(response.data[0]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUsers();\r\n\r\n    const socket = io(\"https://www.referback.trollsufficient.com\");\r\n\r\n    // Socket.IO event listeners\r\n    socket.on(\"coinsUpdated\", (updatedUser: User) => {\r\n      setUsers((prevUsers) =>\r\n        prevUsers.map((user) =>\r\n          user._id === updatedUser._id ? { ...user, coins: updatedUser.coins } : user\r\n        )\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  const handleNodeClick = (node: User) => {\r\n    setCurrentNode(node);\r\n  };\r\n\r\n  const handleAddChild = async (\r\n    parentId: string,\r\n    selectedOption: \"left\" | \"right\"\r\n  ) => {\r\n    try {\r\n      // Implement add child logic here\r\n    } catch (error) {\r\n      console.error(\"Error handling add child:\", error);\r\n    }\r\n  };\r\n\r\n  const renderInitialNodes = (node: User | null) => {\r\n    if (!node) return null;\r\n\r\n    return (\r\n      <div className={styles.children}>\r\n        {userMap && userMap.has(node._id) && (\r\n          <>\r\n            {userMap.get(node._id)!.left && (\r\n              <div\r\n                className={styles.child}\r\n                key={userMap.get(node._id)!.left!.node._id}\r\n              >\r\n                <TreeNode\r\n                  node={userMap.get(node._id)!.left!.node}\r\n                  left={userMap.get(node._id)!.left!.left}\r\n                  right={userMap.get(node._id)!.left!.right}\r\n                  onClick={handleNodeClick}\r\n                  onAddChild={handleAddChild}\r\n                />\r\n              </div>\r\n            )}\r\n            {userMap.get(node._id)!.right && (\r\n              <div\r\n                className={styles.child}\r\n                key={userMap.get(node._id)!.right!.node._id}\r\n              >\r\n                <TreeNode\r\n                  node={userMap.get(node._id)!.right!.node}\r\n                  left={userMap.get(node._id)!.right!.left}\r\n                  right={userMap.get(node._id)!.right!.right}\r\n                  onClick={handleNodeClick}\r\n                  onAddChild={handleAddChild}\r\n                />\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderCompleteTree = (node: User | null): JSX.Element | null => {\r\n    if (!node) return null;\r\n\r\n    const leftNode = userMap?.get(node._id)?.left?.node || null;\r\n    const rightNode = userMap?.get(node._id)?.right?.node || null;\r\n\r\n    return (\r\n      <div key={node._id}>\r\n        <TreeNode\r\n          node={node}\r\n          left={userMap?.get(node._id)?.left || null}\r\n          right={userMap?.get(node._id)?.right || null}\r\n          onClick={handleNodeClick}\r\n          onAddChild={handleAddChild}\r\n        />\r\n        <div className={styles.children}>\r\n          {leftNode && renderCompleteTree(leftNode)}\r\n          {rightNode && renderCompleteTree(rightNode)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <div className={styles.container}>\r\n        <div className={styles.buttonWrapper}>\r\n          <button\r\n            className={styles.toggleButton}\r\n            onClick={() => setViewAll(!viewAll)}\r\n          >\r\n            {viewAll ? \"View Initial Nodes\" : \"View All Nodes\"}\r\n          </button>\r\n        </div>\r\n        <div className={styles.treeContainer}>\r\n          {viewAll\r\n            ? renderCompleteTree(currentNode)\r\n            : currentNode && (\r\n                <div key={currentNode._id}>\r\n                  <TreeNode\r\n                    node={currentNode}\r\n                    left={userMap?.get(currentNode._id)?.left || null}\r\n                    right={userMap?.get(currentNode._id)?.right || null}\r\n                    onClick={handleNodeClick}\r\n                    onAddChild={handleAddChild}\r\n                  />\r\n                  {renderInitialNodes(currentNode)}\r\n                </div>\r\n              )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"
        }
    ]
}