{
    "sourceFile": "pages/Message/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1721630005811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721630041474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect, useRef } from 'react';\r\n+import axios from 'axios';\r\n+import io from 'socket.io-client';\r\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n+import { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\n+import styles from './index.module.scss'; // Import SCSS module styles\r\n+import Navbar from '../../Components/Navbar/index';\r\n+import {AuroraBackground} from '../../Components/Sparkles/sparkles'\r\n+\r\n+// Initialize the socket\r\n+// const socket = io('https://www.referback.trollsufficient.com');\r\n+\r\n+const Message = () => {\r\n+  const [content, setContent] = useState<any>('');\r\n+  const [messages, setMessages] = useState<any>([]);\r\n+  const [userName, setUserName] = useState<any>('');\r\n+  const messageEndRef = useRef<any>(null);\r\n+\r\n+  useEffect(() => {\r\n+    // Fetch the user's name from local storage\r\n+    const storedUserName = localStorage.getItem('userName');\r\n+    if (storedUserName) {\r\n+      setUserName(storedUserName);\r\n+    }\r\n+\r\n+    // Fetch initial messages\r\n+    const fetchMessages = async () => {\r\n+      try {\r\n+        const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n+        setMessages(response.data);\r\n+      } catch (error) {\r\n+        console.error('Error fetching messages:', error);\r\n+      }\r\n+    };\r\n+\r\n+    fetchMessages();\r\n+\r\n+    // Listen for incoming messages\r\n+    // socket.on('message', (newMessage:any) => {\r\n+    //   setMessages((prevMessage:any) => [...prevMessage, newMessage]);\r\n+    // });\r\n+\r\n+    // Cleanup on unmount\r\n+    return () => {\r\n+      // socket.off('message');\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // Scroll to bottom whenever messages change\r\n+    scrollToBottom();\r\n+  }, [messages]);\r\n+\r\n+  useEffect(() => {\r\n+    // Setup interval to fetch messages every second\r\n+    const interval = setInterval(() => {\r\n+      fetchMessages();\r\n+    }, 600);\r\n+\r\n+    // Clear interval on component unmount\r\n+    return () => clearInterval(interval);\r\n+  }, []);\r\n+\r\n+  const fetchMessages = async () => {\r\n+    try {\r\n+      const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n+      setMessages(response.data);\r\n+    } catch (error) {\r\n+      console.error('Error fetching messages:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubmit = async (e:any) => {\r\n+    e.preventDefault();\r\n+    if (!content) return;\r\n+\r\n+    try {\r\n+      const response = await axios.post('https://www.referback.trollsufficient.com/messages', {\r\n+        group_id: '121',\r\n+        sender: userName,\r\n+        content: content\r\n+      });\r\n+\r\n+      // Emit the new message to all connected clients\r\n+      // socket.emit('message', response.data);\r\n+\r\n+      setMessages((prevMessages:any) => [...prevMessages, response.data]);\r\n+      setContent('');\r\n+    } catch (error) {\r\n+      console.error('Error sending message:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleKeyPress = (e:any) => {\r\n+    if (e.key === 'Enter' && !e.shiftKey) {\r\n+      handleSubmit(e);\r\n+    }\r\n+  };\r\n+\r\n+  const scrollToBottom = () => {\r\n+    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <Navbar />\r\n+      <AuroraBackground>\r\n+      <div className={styles['message-form']}>\r\n+        <h2>Send a Message</h2>\r\n+        \r\n+        <div className={styles['message-container']}>\r\n+          {messages.map((message:any, index:any) => (\r\n+            <div\r\n+              key={index}\r\n+              className={`${styles['message']} ${message.sender === userName ? styles['sent'] : styles['received']}`}\r\n+            >\r\n+              <strong>{message.sender}:</strong> {message.content}\r\n+            </div>\r\n+          ))}\r\n+          <div ref={messageEndRef} />\r\n+        </div>\r\n+        <form onSubmit={handleSubmit}>\r\n+          <div className={styles['form-group']}>\r\n+            <label htmlFor=\"content\">Message:</label>\r\n+            <textarea\r\n+              id=\"content\"\r\n+              value={content}\r\n+              onChange={(e) => setContent(e.target.value)}\r\n+              rows={3}\r\n+              required\r\n+              onKeyPress={handleKeyPress}\r\n+            />\r\n+          </div>\r\n+          <button type=\"submit\" className={styles['send-button']}>\r\n+            <FontAwesomeIcon icon={faPaperPlane} />\r\n+          </button>\r\n+        </form>\r\n+      </div>\r\n+      </AuroraBackground>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default Message;\r\n"
                },
                {
                    "date": 1721630169101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import React, { useState, useEffect, useRef } from 'react';\r\n+import axios from 'axios';\r\n+import io from 'socket.io-client';\r\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n+import { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\n+import styles from './index.module.scss'; // Import SCSS module styles\r\n+import Navbar from '../../Components/Navbar/index';\r\n+import {AuroraBackground} from '../../Components/Sparkles/sparkles'\r\n+\r\n+// Initialize the socket\r\n+// const socket = io('https://www.referback.trollsufficient.com');\r\n+\r\n+const Message = () => {\r\n+  const [content, setContent] = useState<any>('');\r\n+  const [messages, setMessages] = useState<any>([]);\r\n+  const [userName, setUserName] = useState<any>('');\r\n+  const messageEndRef = useRef<any>(null);\r\n+\r\n+  useEffect(() => {\r\n+    // Fetch the user's name from local storage\r\n+    const storedUserName = localStorage.getItem('userName');\r\n+    if (storedUserName) {\r\n+      setUserName(storedUserName);\r\n+    }\r\n+\r\n+    // Fetch initial messages\r\n+    const fetchMessages = async () => {\r\n+      try {\r\n+        const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n+        setMessages(response.data);\r\n+      } catch (error) {\r\n+        console.error('Error fetching messages:', error);\r\n+      }\r\n+    };\r\n+\r\n+    fetchMessages();\r\n+\r\n+    // Listen for incoming messages\r\n+    // socket.on('message', (newMessage:any) => {\r\n+    //   setMessages((prevMessage:any) => [...prevMessage, newMessage]);\r\n+    // });\r\n+\r\n+    // Cleanup on unmount\r\n+    return () => {\r\n+      // socket.off('message');\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    // Scroll to bottom whenever messages change\r\n+    scrollToBottom();\r\n+  }, [messages]);\r\n+\r\n+  useEffect(() => {\r\n+    // Setup interval to fetch messages every second\r\n+    const interval = setInterval(() => {\r\n+      fetchMessages();\r\n+    }, 600);\r\n+\r\n+    // Clear interval on component unmount\r\n+    return () => clearInterval(interval);\r\n+  }, []);\r\n+\r\n+  const fetchMessages = async () => {\r\n+    try {\r\n+      const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n+      setMessages(response.data);\r\n+    } catch (error) {\r\n+      console.error('Error fetching messages:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubmit = async (e:any) => {\r\n+    e.preventDefault();\r\n+    if (!content) return;\r\n+\r\n+    try {\r\n+      const response = await axios.post('https://www.referback.trollsufficient.com/messages', {\r\n+        group_id: '121',\r\n+        sender: userName,\r\n+        content: content\r\n+      });\r\n+\r\n+      // Emit the new message to all connected clients\r\n+      // socket.emit('message', response.data);\r\n+\r\n+      setMessages((prevMessages:any) => [...prevMessages, response.data]);\r\n+      setContent('');\r\n+    } catch (error) {\r\n+      console.error('Error sending message:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleKeyPress = (e:any) => {\r\n+    if (e.key === 'Enter' && !e.shiftKey) {\r\n+      handleSubmit(e);\r\n+    }\r\n+  };\r\n+\r\n+  const scrollToBottom = () => {\r\n+    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <Navbar />\r\n+      \r\n+      <div className={styles['message-form']}>\r\n+      <AuroraBackground>\r\n+        <h2>Send a Message</h2>\r\n+        \r\n+        <div className={styles['message-container']}>\r\n+          {messages.map((message:any, index:any) => (\r\n+            <div\r\n+              key={index}\r\n+              className={`${styles['message']} ${message.sender === userName ? styles['sent'] : styles['received']}`}\r\n+            >\r\n+              <strong>{message.sender}:</strong> {message.content}\r\n+            </div>\r\n+          ))}\r\n+          <div ref={messageEndRef} />\r\n+        </div>\r\n+        <form onSubmit={handleSubmit}>\r\n+          <div className={styles['form-group']}>\r\n+            <label htmlFor=\"content\">Message:</label>\r\n+            <textarea\r\n+              id=\"content\"\r\n+              value={content}\r\n+              onChange={(e) => setContent(e.target.value)}\r\n+              rows={3}\r\n+              required\r\n+              onKeyPress={handleKeyPress}\r\n+            />\r\n+          </div>\r\n+          <button type=\"submit\" className={styles['send-button']}>\r\n+            <FontAwesomeIcon icon={faPaperPlane} />\r\n+          </button>\r\n+        </form>\r\n+        </AuroraBackground>\r\n+      </div>\r\n+     \r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default Message;\r\n"
                },
                {
                    "date": 1721630175024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,154 +105,9 @@\n     <>\r\n       <Navbar />\r\n       \r\n       <div className={styles['message-form']}>\r\n-      <AuroraBackground>\r\n-        <h2>Send a Message</h2>\r\n         \r\n-        <div className={styles['message-container']}>\r\n-          {messages.map((message:any, index:any) => (\r\n-            <div\r\n-              key={index}\r\n-              className={`${styles['message']} ${message.sender === userName ? styles['sent'] : styles['received']}`}\r\n-            >\r\n-              <strong>{message.sender}:</strong> {message.content}\r\n-            </div>\r\n-          ))}\r\n-          <div ref={messageEndRef} />\r\n-        </div>\r\n-        <form onSubmit={handleSubmit}>\r\n-          <div className={styles['form-group']}>\r\n-            <label htmlFor=\"content\">Message:</label>\r\n-            <textarea\r\n-              id=\"content\"\r\n-              value={content}\r\n-              onChange={(e) => setContent(e.target.value)}\r\n-              rows={3}\r\n-              required\r\n-              onKeyPress={handleKeyPress}\r\n-            />\r\n-          </div>\r\n-          <button type=\"submit\" className={styles['send-button']}>\r\n-            <FontAwesomeIcon icon={faPaperPlane} />\r\n-          </button>\r\n-        </form>\r\n-        </AuroraBackground>\r\n-      </div>\r\n-     \r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default Message;\r\n-import React, { useState, useEffect, useRef } from 'react';\r\n-import axios from 'axios';\r\n-import io from 'socket.io-client';\r\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n-import { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\n-import styles from './index.module.scss'; // Import SCSS module styles\r\n-import Navbar from '../../Components/Navbar/index';\r\n-import {AuroraBackground} from '../../Components/Sparkles/sparkles'\r\n-\r\n-// Initialize the socket\r\n-// const socket = io('https://www.referback.trollsufficient.com');\r\n-\r\n-const Message = () => {\r\n-  const [content, setContent] = useState<any>('');\r\n-  const [messages, setMessages] = useState<any>([]);\r\n-  const [userName, setUserName] = useState<any>('');\r\n-  const messageEndRef = useRef<any>(null);\r\n-\r\n-  useEffect(() => {\r\n-    // Fetch the user's name from local storage\r\n-    const storedUserName = localStorage.getItem('userName');\r\n-    if (storedUserName) {\r\n-      setUserName(storedUserName);\r\n-    }\r\n-\r\n-    // Fetch initial messages\r\n-    const fetchMessages = async () => {\r\n-      try {\r\n-        const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n-        setMessages(response.data);\r\n-      } catch (error) {\r\n-        console.error('Error fetching messages:', error);\r\n-      }\r\n-    };\r\n-\r\n-    fetchMessages();\r\n-\r\n-    // Listen for incoming messages\r\n-    // socket.on('message', (newMessage:any) => {\r\n-    //   setMessages((prevMessage:any) => [...prevMessage, newMessage]);\r\n-    // });\r\n-\r\n-    // Cleanup on unmount\r\n-    return () => {\r\n-      // socket.off('message');\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    // Scroll to bottom whenever messages change\r\n-    scrollToBottom();\r\n-  }, [messages]);\r\n-\r\n-  useEffect(() => {\r\n-    // Setup interval to fetch messages every second\r\n-    const interval = setInterval(() => {\r\n-      fetchMessages();\r\n-    }, 600);\r\n-\r\n-    // Clear interval on component unmount\r\n-    return () => clearInterval(interval);\r\n-  }, []);\r\n-\r\n-  const fetchMessages = async () => {\r\n-    try {\r\n-      const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n-      setMessages(response.data);\r\n-    } catch (error) {\r\n-      console.error('Error fetching messages:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubmit = async (e:any) => {\r\n-    e.preventDefault();\r\n-    if (!content) return;\r\n-\r\n-    try {\r\n-      const response = await axios.post('https://www.referback.trollsufficient.com/messages', {\r\n-        group_id: '121',\r\n-        sender: userName,\r\n-        content: content\r\n-      });\r\n-\r\n-      // Emit the new message to all connected clients\r\n-      // socket.emit('message', response.data);\r\n-\r\n-      setMessages((prevMessages:any) => [...prevMessages, response.data]);\r\n-      setContent('');\r\n-    } catch (error) {\r\n-      console.error('Error sending message:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleKeyPress = (e:any) => {\r\n-    if (e.key === 'Enter' && !e.shiftKey) {\r\n-      handleSubmit(e);\r\n-    }\r\n-  };\r\n-\r\n-  const scrollToBottom = () => {\r\n-    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <Navbar />\r\n-      <AuroraBackground>\r\n-      <div className={styles['message-form']}>\r\n         <h2>Send a Message</h2>\r\n         \r\n         <div className={styles['message-container']}>\r\n           {messages.map((message:any, index:any) => (\r\n@@ -287,146 +142,4 @@\n   );\r\n };\r\n \r\n export default Message;\r\n-import React, { useState, useEffect, useRef } from 'react';\r\n-import axios from 'axios';\r\n-import io from 'socket.io-client';\r\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n-import { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\n-import styles from './index.module.scss'; // Import SCSS module styles\r\n-import Navbar from '../../Components/Navbar/index';\r\n-import {AuroraBackground} from '../../Components/Sparkles/sparkles'\r\n-\r\n-// Initialize the socket\r\n-// const socket = io('https://www.referback.trollsufficient.com');\r\n-\r\n-const Message = () => {\r\n-  const [content, setContent] = useState<any>('');\r\n-  const [messages, setMessages] = useState<any>([]);\r\n-  const [userName, setUserName] = useState<any>('');\r\n-  const messageEndRef = useRef<any>(null);\r\n-\r\n-  useEffect(() => {\r\n-    // Fetch the user's name from local storage\r\n-    const storedUserName = localStorage.getItem('userName');\r\n-    if (storedUserName) {\r\n-      setUserName(storedUserName);\r\n-    }\r\n-\r\n-    // Fetch initial messages\r\n-    const fetchMessages = async () => {\r\n-      try {\r\n-        const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n-        setMessages(response.data);\r\n-      } catch (error) {\r\n-        console.error('Error fetching messages:', error);\r\n-      }\r\n-    };\r\n-\r\n-    fetchMessages();\r\n-\r\n-    // Listen for incoming messages\r\n-    // socket.on('message', (newMessage:any) => {\r\n-    //   setMessages((prevMessage:any) => [...prevMessage, newMessage]);\r\n-    // });\r\n-\r\n-    // Cleanup on unmount\r\n-    return () => {\r\n-      // socket.off('message');\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    // Scroll to bottom whenever messages change\r\n-    scrollToBottom();\r\n-  }, [messages]);\r\n-\r\n-  useEffect(() => {\r\n-    // Setup interval to fetch messages every second\r\n-    const interval = setInterval(() => {\r\n-      fetchMessages();\r\n-    }, 600);\r\n-\r\n-    // Clear interval on component unmount\r\n-    return () => clearInterval(interval);\r\n-  }, []);\r\n-\r\n-  const fetchMessages = async () => {\r\n-    try {\r\n-      const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n-      setMessages(response.data);\r\n-    } catch (error) {\r\n-      console.error('Error fetching messages:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubmit = async (e:any) => {\r\n-    e.preventDefault();\r\n-    if (!content) return;\r\n-\r\n-    try {\r\n-      const response = await axios.post('https://www.referback.trollsufficient.com/messages', {\r\n-        group_id: '121',\r\n-        sender: userName,\r\n-        content: content\r\n-      });\r\n-\r\n-      // Emit the new message to all connected clients\r\n-      // socket.emit('message', response.data);\r\n-\r\n-      setMessages((prevMessages:any) => [...prevMessages, response.data]);\r\n-      setContent('');\r\n-    } catch (error) {\r\n-      console.error('Error sending message:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleKeyPress = (e:any) => {\r\n-    if (e.key === 'Enter' && !e.shiftKey) {\r\n-      handleSubmit(e);\r\n-    }\r\n-  };\r\n-\r\n-  const scrollToBottom = () => {\r\n-    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <Navbar />\r\n-      <div className={styles['message-form']}>\r\n-        <h2>Send a Message</h2>\r\n-        \r\n-        <div className={styles['message-container']}>\r\n-          {messages.map((message:any, index:any) => (\r\n-            <div\r\n-              key={index}\r\n-              className={`${styles['message']} ${message.sender === userName ? styles['sent'] : styles['received']}`}\r\n-            >\r\n-              <strong>{message.sender}:</strong> {message.content}\r\n-            </div>\r\n-          ))}\r\n-          <div ref={messageEndRef} />\r\n-        </div>\r\n-        <form onSubmit={handleSubmit}>\r\n-          <div className={styles['form-group']}>\r\n-            <label htmlFor=\"content\">Message:</label>\r\n-            <textarea\r\n-              id=\"content\"\r\n-              value={content}\r\n-              onChange={(e) => setContent(e.target.value)}\r\n-              rows={3}\r\n-              required\r\n-              onKeyPress={handleKeyPress}\r\n-            />\r\n-          </div>\r\n-          <button type=\"submit\" className={styles['send-button']}>\r\n-            <FontAwesomeIcon icon={faPaperPlane} />\r\n-          </button>\r\n-        </form>\r\n-      </div>\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default Message;\r\n"
                },
                {
                    "date": 1721630183270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,11 +103,10 @@\n \r\n   return (\r\n     <>\r\n       <Navbar />\r\n-      \r\n+      {/* <AuroraBackground> */}\r\n       <div className={styles['message-form']}>\r\n-        \r\n         <h2>Send a Message</h2>\r\n         \r\n         <div className={styles['message-container']}>\r\n           {messages.map((message:any, index:any) => (\r\n@@ -136,9 +135,8 @@\n             <FontAwesomeIcon icon={faPaperPlane} />\r\n           </button>\r\n         </form>\r\n       </div>\r\n-      </AuroraBackground>\r\n     </>\r\n   );\r\n };\r\n \r\n"
                }
            ],
            "date": 1721630005811,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport io from 'socket.io-client';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\nimport styles from './index.module.scss'; // Import SCSS module styles\r\nimport Navbar from '../../Components/Navbar/index';\r\nimport {AuroraBackground} from '../../Components/Sparkles/sparkles'\r\n\r\n// Initialize the socket\r\n// const socket = io('https://www.referback.trollsufficient.com');\r\n\r\nconst Message = () => {\r\n  const [content, setContent] = useState<any>('');\r\n  const [messages, setMessages] = useState<any>([]);\r\n  const [userName, setUserName] = useState<any>('');\r\n  const messageEndRef = useRef<any>(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch the user's name from local storage\r\n    const storedUserName = localStorage.getItem('userName');\r\n    if (storedUserName) {\r\n      setUserName(storedUserName);\r\n    }\r\n\r\n    // Fetch initial messages\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n        setMessages(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n\r\n    // Listen for incoming messages\r\n    // socket.on('message', (newMessage:any) => {\r\n    //   setMessages((prevMessage:any) => [...prevMessage, newMessage]);\r\n    // });\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      // socket.off('message');\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Scroll to bottom whenever messages change\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Setup interval to fetch messages every second\r\n    const interval = setInterval(() => {\r\n      fetchMessages();\r\n    }, 600);\r\n\r\n    // Clear interval on component unmount\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const fetchMessages = async () => {\r\n    try {\r\n      const response = await axios.get('https://www.referback.trollsufficient.com/messages/121');\r\n      setMessages(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching messages:', error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e:any) => {\r\n    e.preventDefault();\r\n    if (!content) return;\r\n\r\n    try {\r\n      const response = await axios.post('https://www.referback.trollsufficient.com/messages', {\r\n        group_id: '121',\r\n        sender: userName,\r\n        content: content\r\n      });\r\n\r\n      // Emit the new message to all connected clients\r\n      // socket.emit('message', response.data);\r\n\r\n      setMessages((prevMessages:any) => [...prevMessages, response.data]);\r\n      setContent('');\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e:any) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      handleSubmit(e);\r\n    }\r\n  };\r\n\r\n  const scrollToBottom = () => {\r\n    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className={styles['message-form']}>\r\n        <h2>Send a Message</h2>\r\n        \r\n        <div className={styles['message-container']}>\r\n          {messages.map((message:any, index:any) => (\r\n            <div\r\n              key={index}\r\n              className={`${styles['message']} ${message.sender === userName ? styles['sent'] : styles['received']}`}\r\n            >\r\n              <strong>{message.sender}:</strong> {message.content}\r\n            </div>\r\n          ))}\r\n          <div ref={messageEndRef} />\r\n        </div>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className={styles['form-group']}>\r\n            <label htmlFor=\"content\">Message:</label>\r\n            <textarea\r\n              id=\"content\"\r\n              value={content}\r\n              onChange={(e) => setContent(e.target.value)}\r\n              rows={3}\r\n              required\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className={styles['send-button']}>\r\n            <FontAwesomeIcon icon={faPaperPlane} />\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n"
        }
    ]
}